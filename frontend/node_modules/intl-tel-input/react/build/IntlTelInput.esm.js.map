{
  "version": 3,
  "sources": ["../../build/js/intlTelInput.js", "../src/IntlTelInput.js"],
  "sourcesContent": ["/*\n * International Telephone Input v20.3.0\n * https://github.com/jackocnr/intl-tel-input.git\n * Licensed under the MIT license\n */\n// wrap in UMD\n(function(factory) {\n    if (typeof module === \"object\" && module.exports) module.exports = factory(); else window.intlTelInput = factory();\n})(function(undefined) {\n    \"use strict\";\n    return function() {\n        // Array of country objects for the flag dropdown.\n        // Here is the criteria for the plugin to support a given country/territory\n        // - It has an iso2 code: https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2\n        // - It has it's own country calling code (it is not a sub-region of another country): https://en.wikipedia.org/wiki/List_of_country_calling_codes\n        // - It has a flag in the region-flags project: https://github.com/behdad/region-flags/tree/gh-pages/png\n        // - It is supported by libphonenumber (it must be listed on this page): https://github.com/googlei18n/libphonenumber/blob/master/resources/ShortNumberMetadata.xml\n        // Each country array has the following information:\n        // [\n        //    Country name,\n        //    iso2 code,\n        //    International dial code,\n        //    Order (if >1 country with same dial code),\n        //    Area codes\n        // ]\n        var allCountries = [ [ \"Afghanistan\", \"af\", \"93\" ], [ \"Albania\", \"al\", \"355\" ], [ \"Algeria\", \"dz\", \"213\" ], [ \"American Samoa\", \"as\", \"1\", 5, [ \"684\" ] ], [ \"Andorra\", \"ad\", \"376\" ], [ \"Angola\", \"ao\", \"244\" ], [ \"Anguilla\", \"ai\", \"1\", 6, [ \"264\" ] ], [ \"Antigua & Barbuda\", \"ag\", \"1\", 7, [ \"268\" ] ], [ \"Argentina\", \"ar\", \"54\" ], [ \"Armenia\", \"am\", \"374\" ], [ \"Aruba\", \"aw\", \"297\" ], [ \"Ascension Island\", \"ac\", \"247\" ], [ \"Australia\", \"au\", \"61\", 0 ], [ \"Austria\", \"at\", \"43\" ], [ \"Azerbaijan\", \"az\", \"994\" ], [ \"Bahamas\", \"bs\", \"1\", 8, [ \"242\" ] ], [ \"Bahrain\", \"bh\", \"973\" ], [ \"Bangladesh\", \"bd\", \"880\" ], [ \"Barbados\", \"bb\", \"1\", 9, [ \"246\" ] ], [ \"Belarus\", \"by\", \"375\" ], [ \"Belgium\", \"be\", \"32\" ], [ \"Belize\", \"bz\", \"501\" ], [ \"Benin\", \"bj\", \"229\" ], [ \"Bermuda\", \"bm\", \"1\", 10, [ \"441\" ] ], [ \"Bhutan\", \"bt\", \"975\" ], [ \"Bolivia\", \"bo\", \"591\" ], [ \"Bosnia & Herzegovina\", \"ba\", \"387\" ], [ \"Botswana\", \"bw\", \"267\" ], [ \"Brazil\", \"br\", \"55\" ], [ \"British Indian Ocean Territory\", \"io\", \"246\" ], [ \"British Virgin Islands\", \"vg\", \"1\", 11, [ \"284\" ] ], [ \"Brunei\", \"bn\", \"673\" ], [ \"Bulgaria\", \"bg\", \"359\" ], [ \"Burkina Faso\", \"bf\", \"226\" ], [ \"Burundi\", \"bi\", \"257\" ], [ \"Cambodia\", \"kh\", \"855\" ], [ \"Cameroon\", \"cm\", \"237\" ], [ \"Canada\", \"ca\", \"1\", 1, [ \"204\", \"226\", \"236\", \"249\", \"250\", \"263\", \"289\", \"306\", \"343\", \"354\", \"365\", \"367\", \"368\", \"382\", \"387\", \"403\", \"416\", \"418\", \"428\", \"431\", \"437\", \"438\", \"450\", \"584\", \"468\", \"474\", \"506\", \"514\", \"519\", \"548\", \"579\", \"581\", \"584\", \"587\", \"604\", \"613\", \"639\", \"647\", \"672\", \"683\", \"705\", \"709\", \"742\", \"753\", \"778\", \"780\", \"782\", \"807\", \"819\", \"825\", \"867\", \"873\", \"902\", \"905\" ] ], [ \"Cape Verde\", \"cv\", \"238\" ], [ \"Caribbean Netherlands\", \"bq\", \"599\", 1, [ \"3\", \"4\", \"7\" ] ], [ \"Cayman Islands\", \"ky\", \"1\", 12, [ \"345\" ] ], [ \"Central African Republic\", \"cf\", \"236\" ], [ \"Chad\", \"td\", \"235\" ], [ \"Chile\", \"cl\", \"56\" ], [ \"China\", \"cn\", \"86\" ], [ \"Christmas Island\", \"cx\", \"61\", 2, [ \"89164\" ] ], [ \"Cocos (Keeling) Islands\", \"cc\", \"61\", 1, [ \"89162\" ] ], [ \"Colombia\", \"co\", \"57\" ], [ \"Comoros\", \"km\", \"269\" ], [ \"Congo - Brazzaville\", \"cg\", \"242\" ], [ \"Congo - Kinshasa\", \"cd\", \"243\" ], [ \"Cook Islands\", \"ck\", \"682\" ], [ \"Costa Rica\", \"cr\", \"506\" ], [ \"C\u00F4te d\u2019Ivoire\", \"ci\", \"225\" ], [ \"Croatia\", \"hr\", \"385\" ], [ \"Cuba\", \"cu\", \"53\" ], [ \"Cura\u00E7ao\", \"cw\", \"599\", 0 ], [ \"Cyprus\", \"cy\", \"357\" ], [ \"Czech Republic\", \"cz\", \"420\" ], [ \"Denmark\", \"dk\", \"45\" ], [ \"Djibouti\", \"dj\", \"253\" ], [ \"Dominica\", \"dm\", \"1\", 13, [ \"767\" ] ], [ \"Dominican Republic\", \"do\", \"1\", 2, [ \"809\", \"829\", \"849\" ] ], [ \"Ecuador\", \"ec\", \"593\" ], [ \"Egypt\", \"eg\", \"20\" ], [ \"El Salvador\", \"sv\", \"503\" ], [ \"Equatorial Guinea\", \"gq\", \"240\" ], [ \"Eritrea\", \"er\", \"291\" ], [ \"Estonia\", \"ee\", \"372\" ], [ \"Eswatini\", \"sz\", \"268\" ], [ \"Ethiopia\", \"et\", \"251\" ], [ \"Falkland Islands\", \"fk\", \"500\" ], [ \"Faroe Islands\", \"fo\", \"298\" ], [ \"Fiji\", \"fj\", \"679\" ], [ \"Finland\", \"fi\", \"358\", 0 ], [ \"France\", \"fr\", \"33\" ], [ \"French Guiana\", \"gf\", \"594\" ], [ \"French Polynesia\", \"pf\", \"689\" ], [ \"Gabon\", \"ga\", \"241\" ], [ \"Gambia\", \"gm\", \"220\" ], [ \"Georgia\", \"ge\", \"995\" ], [ \"Germany\", \"de\", \"49\" ], [ \"Ghana\", \"gh\", \"233\" ], [ \"Gibraltar\", \"gi\", \"350\" ], [ \"Greece\", \"gr\", \"30\" ], [ \"Greenland\", \"gl\", \"299\" ], [ \"Grenada\", \"gd\", \"1\", 14, [ \"473\" ] ], [ \"Guadeloupe\", \"gp\", \"590\", 0 ], [ \"Guam\", \"gu\", \"1\", 15, [ \"671\" ] ], [ \"Guatemala\", \"gt\", \"502\" ], [ \"Guernsey\", \"gg\", \"44\", 1, [ \"1481\", \"7781\", \"7839\", \"7911\" ] ], [ \"Guinea\", \"gn\", \"224\" ], [ \"Guinea-Bissau\", \"gw\", \"245\" ], [ \"Guyana\", \"gy\", \"592\" ], [ \"Haiti\", \"ht\", \"509\" ], [ \"Honduras\", \"hn\", \"504\" ], [ \"Hong Kong\", \"hk\", \"852\" ], [ \"Hungary\", \"hu\", \"36\" ], [ \"Iceland\", \"is\", \"354\" ], [ \"India\", \"in\", \"91\" ], [ \"Indonesia\", \"id\", \"62\" ], [ \"Iran\", \"ir\", \"98\" ], [ \"Iraq\", \"iq\", \"964\" ], [ \"Ireland\", \"ie\", \"353\" ], [ \"Isle of Man\", \"im\", \"44\", 2, [ \"1624\", \"74576\", \"7524\", \"7924\", \"7624\" ] ], [ \"Israel\", \"il\", \"972\" ], [ \"Italy\", \"it\", \"39\", 0 ], [ \"Jamaica\", \"jm\", \"1\", 4, [ \"876\", \"658\" ] ], [ \"Japan\", \"jp\", \"81\" ], [ \"Jersey\", \"je\", \"44\", 3, [ \"1534\", \"7509\", \"7700\", \"7797\", \"7829\", \"7937\" ] ], [ \"Jordan\", \"jo\", \"962\" ], [ \"Kazakhstan\", \"kz\", \"7\", 1, [ \"33\", \"7\" ] ], [ \"Kenya\", \"ke\", \"254\" ], [ \"Kiribati\", \"ki\", \"686\" ], [ \"Kosovo\", \"xk\", \"383\" ], [ \"Kuwait\", \"kw\", \"965\" ], [ \"Kyrgyzstan\", \"kg\", \"996\" ], [ \"Laos\", \"la\", \"856\" ], [ \"Latvia\", \"lv\", \"371\" ], [ \"Lebanon\", \"lb\", \"961\" ], [ \"Lesotho\", \"ls\", \"266\" ], [ \"Liberia\", \"lr\", \"231\" ], [ \"Libya\", \"ly\", \"218\" ], [ \"Liechtenstein\", \"li\", \"423\" ], [ \"Lithuania\", \"lt\", \"370\" ], [ \"Luxembourg\", \"lu\", \"352\" ], [ \"Macau\", \"mo\", \"853\" ], [ \"Madagascar\", \"mg\", \"261\" ], [ \"Malawi\", \"mw\", \"265\" ], [ \"Malaysia\", \"my\", \"60\" ], [ \"Maldives\", \"mv\", \"960\" ], [ \"Mali\", \"ml\", \"223\" ], [ \"Malta\", \"mt\", \"356\" ], [ \"Marshall Islands\", \"mh\", \"692\" ], [ \"Martinique\", \"mq\", \"596\" ], [ \"Mauritania\", \"mr\", \"222\" ], [ \"Mauritius\", \"mu\", \"230\" ], [ \"Mayotte\", \"yt\", \"262\", 1, [ \"269\", \"639\" ] ], [ \"Mexico\", \"mx\", \"52\" ], [ \"Micronesia\", \"fm\", \"691\" ], [ \"Moldova\", \"md\", \"373\" ], [ \"Monaco\", \"mc\", \"377\" ], [ \"Mongolia\", \"mn\", \"976\" ], [ \"Montenegro\", \"me\", \"382\" ], [ \"Montserrat\", \"ms\", \"1\", 16, [ \"664\" ] ], [ \"Morocco\", \"ma\", \"212\", 0 ], [ \"Mozambique\", \"mz\", \"258\" ], [ \"Myanmar (Burma)\", \"mm\", \"95\" ], [ \"Namibia\", \"na\", \"264\" ], [ \"Nauru\", \"nr\", \"674\" ], [ \"Nepal\", \"np\", \"977\" ], [ \"Netherlands\", \"nl\", \"31\" ], [ \"New Caledonia\", \"nc\", \"687\" ], [ \"New Zealand\", \"nz\", \"64\" ], [ \"Nicaragua\", \"ni\", \"505\" ], [ \"Niger\", \"ne\", \"227\" ], [ \"Nigeria\", \"ng\", \"234\" ], [ \"Niue\", \"nu\", \"683\" ], [ \"Norfolk Island\", \"nf\", \"672\" ], [ \"North Korea\", \"kp\", \"850\" ], [ \"North Macedonia\", \"mk\", \"389\" ], [ \"Northern Mariana Islands\", \"mp\", \"1\", 17, [ \"670\" ] ], [ \"Norway\", \"no\", \"47\", 0 ], [ \"Oman\", \"om\", \"968\" ], [ \"Pakistan\", \"pk\", \"92\" ], [ \"Palau\", \"pw\", \"680\" ], [ \"Palestine\", \"ps\", \"970\" ], [ \"Panama\", \"pa\", \"507\" ], [ \"Papua New Guinea\", \"pg\", \"675\" ], [ \"Paraguay\", \"py\", \"595\" ], [ \"Peru\", \"pe\", \"51\" ], [ \"Philippines\", \"ph\", \"63\" ], [ \"Poland\", \"pl\", \"48\" ], [ \"Portugal\", \"pt\", \"351\" ], [ \"Puerto Rico\", \"pr\", \"1\", 3, [ \"787\", \"939\" ] ], [ \"Qatar\", \"qa\", \"974\" ], [ \"R\u00E9union\", \"re\", \"262\", 0 ], [ \"Romania\", \"ro\", \"40\" ], [ \"Russia\", \"ru\", \"7\", 0 ], [ \"Rwanda\", \"rw\", \"250\" ], [ \"Samoa\", \"ws\", \"685\" ], [ \"San Marino\", \"sm\", \"378\" ], [ \"S\u00E3o Tom\u00E9 & Pr\u00EDncipe\", \"st\", \"239\" ], [ \"Saudi Arabia\", \"sa\", \"966\" ], [ \"Senegal\", \"sn\", \"221\" ], [ \"Serbia\", \"rs\", \"381\" ], [ \"Seychelles\", \"sc\", \"248\" ], [ \"Sierra Leone\", \"sl\", \"232\" ], [ \"Singapore\", \"sg\", \"65\" ], [ \"Sint Maarten\", \"sx\", \"1\", 21, [ \"721\" ] ], [ \"Slovakia\", \"sk\", \"421\" ], [ \"Slovenia\", \"si\", \"386\" ], [ \"Solomon Islands\", \"sb\", \"677\" ], [ \"Somalia\", \"so\", \"252\" ], [ \"South Africa\", \"za\", \"27\" ], [ \"South Korea\", \"kr\", \"82\" ], [ \"South Sudan\", \"ss\", \"211\" ], [ \"Spain\", \"es\", \"34\" ], [ \"Sri Lanka\", \"lk\", \"94\" ], [ \"St Barth\u00E9lemy\", \"bl\", \"590\", 1 ], [ \"St Helena\", \"sh\", \"290\" ], [ \"St Kitts & Nevis\", \"kn\", \"1\", 18, [ \"869\" ] ], [ \"St Lucia\", \"lc\", \"1\", 19, [ \"758\" ] ], [ \"St Martin\", \"mf\", \"590\", 2 ], [ \"St Pierre & Miquelon\", \"pm\", \"508\" ], [ \"St Vincent & Grenadines\", \"vc\", \"1\", 20, [ \"784\" ] ], [ \"Sudan\", \"sd\", \"249\" ], [ \"Suriname\", \"sr\", \"597\" ], [ \"Svalbard & Jan Mayen\", \"sj\", \"47\", 1, [ \"79\" ] ], [ \"Sweden\", \"se\", \"46\" ], [ \"Switzerland\", \"ch\", \"41\" ], [ \"Syria\", \"sy\", \"963\" ], [ \"Taiwan\", \"tw\", \"886\" ], [ \"Tajikistan\", \"tj\", \"992\" ], [ \"Tanzania\", \"tz\", \"255\" ], [ \"Thailand\", \"th\", \"66\" ], [ \"Timor-Leste\", \"tl\", \"670\" ], [ \"Togo\", \"tg\", \"228\" ], [ \"Tokelau\", \"tk\", \"690\" ], [ \"Tonga\", \"to\", \"676\" ], [ \"Trinidad & Tobago\", \"tt\", \"1\", 22, [ \"868\" ] ], [ \"Tunisia\", \"tn\", \"216\" ], [ \"Turkey\", \"tr\", \"90\" ], [ \"Turkmenistan\", \"tm\", \"993\" ], [ \"Turks & Caicos Islands\", \"tc\", \"1\", 23, [ \"649\" ] ], [ \"Tuvalu\", \"tv\", \"688\" ], [ \"Uganda\", \"ug\", \"256\" ], [ \"Ukraine\", \"ua\", \"380\" ], [ \"United Arab Emirates\", \"ae\", \"971\" ], [ \"United Kingdom\", \"gb\", \"44\", 0 ], [ \"United States\", \"us\", \"1\", 0 ], [ \"Uruguay\", \"uy\", \"598\" ], [ \"US Virgin Islands\", \"vi\", \"1\", 24, [ \"340\" ] ], [ \"Uzbekistan\", \"uz\", \"998\" ], [ \"Vanuatu\", \"vu\", \"678\" ], [ \"Vatican City\", \"va\", \"39\", 1, [ \"06698\" ] ], [ \"Venezuela\", \"ve\", \"58\" ], [ \"Vietnam\", \"vn\", \"84\" ], [ \"Wallis & Futuna\", \"wf\", \"681\" ], [ \"Western Sahara\", \"eh\", \"212\", 1, [ \"5288\", \"5289\" ] ], [ \"Yemen\", \"ye\", \"967\" ], [ \"Zambia\", \"zm\", \"260\" ], [ \"Zimbabwe\", \"zw\", \"263\" ], [ \"\u00C5land Islands\", \"ax\", \"358\", 1, [ \"18\" ] ] ];\n        // loop over all of the countries above, restructuring the data to be objects with named keys\n        for (var i = 0; i < allCountries.length; i++) {\n            var c = allCountries[i];\n            allCountries[i] = {\n                name: c[0],\n                iso2: c[1],\n                dialCode: c[2],\n                priority: c[3] || 0,\n                areaCodes: c[4] || null,\n                nodeById: {}\n            };\n        }\n        const intlTelInputGlobals = {\n            getInstance: input => {\n                const id = input.getAttribute(\"data-intl-tel-input-id\");\n                return window.intlTelInputGlobals.instances[id];\n            },\n            instances: {},\n            // using a global like this allows us to mock it in the tests\n            documentReady: () => document.readyState === \"complete\"\n        };\n        if (typeof window === \"object\") {\n            window.intlTelInputGlobals = intlTelInputGlobals;\n        }\n        // these vars persist through all instances of the plugin\n        let id = 0;\n        const defaults = {\n            // whether or not to allow the dropdown\n            allowDropdown: true,\n            // add a placeholder in the input with an example number for the selected country\n            autoPlaceholder: \"polite\",\n            // add a country search input at the top of the dropdown\n            countrySearch: true,\n            // modify the parentClass\n            containerClass: \"\",\n            // modify the auto placeholder\n            customPlaceholder: null,\n            // append menu to specified element\n            dropdownContainer: null,\n            // don't display these countries\n            excludeCountries: [],\n            // fix the dropdown width to the input width (rather than being as wide as the longest country name)\n            fixDropdownWidth: true,\n            // format the number as the user types\n            formatAsYouType: true,\n            // format the input value during initialisation and on setNumber\n            formatOnDisplay: true,\n            // geoIp lookup function\n            geoIpLookup: null,\n            // inject a hidden input with the name returned from this function, and on submit, populate it with the result of getNumber\n            hiddenInput: null,\n            // internationalise the plugin text e.g. search input placeholder, country names\n            i18n: {},\n            // initial country\n            initialCountry: \"\",\n            // national vs international formatting for numbers e.g. placeholders and displaying existing numbers\n            nationalMode: true,\n            // display only these countries\n            onlyCountries: [],\n            // number type to use for placeholders\n            placeholderNumberType: \"MOBILE\",\n            // the countries at the top of the list\n            preferredCountries: [],\n            // option to hide the flags - must be used with showSelectedDialCode, or allowDropdown=false\n            showFlags: true,\n            // display the international dial code next to the selected flag\n            showSelectedDialCode: false,\n            // only allow certain chars e.g. a plus followed by numeric digits, and cap at max valid length\n            strictMode: false,\n            // use full screen popup instead of dropdown for country list\n            useFullscreenPopup: typeof navigator !== \"undefined\" && typeof window !== \"undefined\" ? // we cannot just test screen size as some smartphones/website meta tags will report desktop\n            // resolutions\n            // Note: to target Android Mobiles (and not Tablets), we must find 'Android' and 'Mobile'\n            /Android.+Mobile|webOS|iPhone|iPod|BlackBerry|IEMobile|Opera Mini/i.test(navigator.userAgent) || window.innerWidth <= 500 : false,\n            // specify the path to the libphonenumber script to enable validation/formatting\n            utilsScript: \"\"\n        };\n        // https://en.wikipedia.org/wiki/List_of_North_American_Numbering_Plan_area_codes#Non-geographic_area_codes\n        const regionlessNanpNumbers = [ \"800\", \"822\", \"833\", \"844\", \"855\", \"866\", \"877\", \"880\", \"881\", \"882\", \"883\", \"884\", \"885\", \"886\", \"887\", \"888\", \"889\" ];\n        // run a method on each instance of the plugin\n        const forEachInstance = method => {\n            const {\n                instances\n            } = window.intlTelInputGlobals;\n            Object.values(instances).forEach(instance => instance[method]());\n        };\n        // this is our plugin class that we will create an instance of\n        // eslint-disable-next-line no-unused-vars\n        class Iti {\n            constructor(input, customOptions = {}) {\n                this.id = id++;\n                this.telInput = input;\n                this.activeItem = null;\n                this.highlightedItem = null;\n                // process specified options / defaults\n                this.options = Object.assign({}, defaults, customOptions);\n                this.hadInitialPlaceholder = Boolean(input.getAttribute(\"placeholder\"));\n            }\n            _init() {\n                // if showing fullscreen popup, do not fix the width\n                if (this.options.useFullscreenPopup) {\n                    this.options.fixDropdownWidth = false;\n                }\n                // when search enabled, we must fix the width else it would change with different results\n                if (this.options.countrySearch && !this.options.useFullscreenPopup) {\n                    this.options.fixDropdownWidth = true;\n                }\n                // force showFlags=true if there's a dropdown and we're not displaying the dial code,\n                // as otherwise you just have a down arrow on it's own which doesn't make sense\n                const forceShowFlags = this.options.allowDropdown && !this.options.showSelectedDialCode;\n                if (!this.options.showFlags && forceShowFlags) {\n                    this.options.showFlags = true;\n                }\n                // on mobile, we want a full screen dropdown, so we must append it to the body\n                if (this.options.useFullscreenPopup && !this.options.dropdownContainer) {\n                    this.options.dropdownContainer = document.body;\n                }\n                // check if input has one parent with RTL\n                this.isRTL = !!this.telInput.closest(\"[dir=rtl]\");\n                // these promises get resolved when their individual requests complete\n                // this way the dev can do something like iti.promise.then(...) to know when all requests are\n                // complete\n                const autoCountryPromise = new Promise((resolve, reject) => {\n                    this.resolveAutoCountryPromise = resolve;\n                    this.rejectAutoCountryPromise = reject;\n                });\n                const utilsScriptPromise = new Promise((resolve, reject) => {\n                    this.resolveUtilsScriptPromise = resolve;\n                    this.rejectUtilsScriptPromise = reject;\n                });\n                this.promise = Promise.all([ autoCountryPromise, utilsScriptPromise ]);\n                // in various situations there could be no country selected initially, but we need to be able\n                // to assume this variable exists\n                this.selectedCountryData = {};\n                // process all the data: onlyCountries, excludeCountries, preferredCountries etc\n                this._processCountryData();\n                // generate the markup\n                this._generateMarkup();\n                // set the initial state of the input value and the selected flag\n                this._setInitialState();\n                // start all of the event listeners: input keydown, selectedFlag click\n                this._initListeners();\n                // utils script, and auto country\n                this._initRequests();\n            }\n            /********************\n   *  PRIVATE METHODS\n   ********************/\n            // prepare all of the country data, including onlyCountries, excludeCountries and\n            // preferredCountries options\n            _processCountryData() {\n                // process onlyCountries or excludeCountries array if present\n                this._processAllCountries();\n                // generate this.dialCodes and this.dialCodeToIso2Map\n                this._processDialCodes();\n                // process the preferredCountries\n                this._processPreferredCountries();\n                // translate country names according to i18n option\n                this._translateCountryNames();\n                // sort countries by name\n                if (this.options.onlyCountries.length || this.options.i18n) {\n                    this.countries.sort(this._countryNameSort);\n                }\n            }\n            // add a dial code to this.dialCodeToIso2Map\n            _addToDialCodeMap(iso2, dialCode, priority) {\n                if (dialCode.length > this.dialCodeMaxLen) {\n                    this.dialCodeMaxLen = dialCode.length;\n                }\n                if (!this.dialCodeToIso2Map.hasOwnProperty(dialCode)) {\n                    this.dialCodeToIso2Map[dialCode] = [];\n                }\n                // bail if we already have this country for this dialCode\n                for (let i = 0; i < this.dialCodeToIso2Map[dialCode].length; i++) {\n                    if (this.dialCodeToIso2Map[dialCode][i] === iso2) {\n                        return;\n                    }\n                }\n                // check for undefined as 0 is falsy\n                const index = priority !== undefined ? priority : this.dialCodeToIso2Map[dialCode].length;\n                this.dialCodeToIso2Map[dialCode][index] = iso2;\n            }\n            // process onlyCountries or excludeCountries array if present\n            _processAllCountries() {\n                if (this.options.onlyCountries.length) {\n                    const lowerCaseOnlyCountries = this.options.onlyCountries.map(country => country.toLowerCase());\n                    this.countries = allCountries.filter(country => lowerCaseOnlyCountries.indexOf(country.iso2) > -1);\n                } else if (this.options.excludeCountries.length) {\n                    const lowerCaseExcludeCountries = this.options.excludeCountries.map(country => country.toLowerCase());\n                    this.countries = allCountries.filter(country => lowerCaseExcludeCountries.indexOf(country.iso2) === -1);\n                } else {\n                    this.countries = allCountries;\n                }\n            }\n            // Translate Countries by object literal provided on config\n            _translateCountryNames() {\n                for (let i = 0; i < this.countries.length; i++) {\n                    const iso2 = this.countries[i].iso2.toLowerCase();\n                    if (this.options.i18n.hasOwnProperty(iso2)) {\n                        this.countries[i].name = this.options.i18n[iso2];\n                    }\n                }\n            }\n            // sort by country name\n            _countryNameSort(a, b) {\n                if (a.name < b.name) {\n                    return -1;\n                }\n                if (a.name > b.name) {\n                    return 1;\n                }\n                return 0;\n            }\n            // generate this.dialCodes and this.dialCodeToIso2Map\n            _processDialCodes() {\n                // here we store just dial codes, where the key is the dial code, and the value is true\n                // e.g. { 1: true, 7: true, 20: true, ... }\n                this.dialCodes = {};\n                this.dialCodeMaxLen = 0;\n                // here we map dialCodes (inc both dialCode and dialCode+areaCode) to iso2 codes\n                /* e.g.\n     * {\n     *   1: [ 'us', 'ca', ... ],    # all NANP countries\n     *   12: [ 'us', 'ca', ... ],   # subset of NANP countries\n     *   120: [ 'us', 'ca' ],       # just US and Canada\n     *   1204: [ 'ca' ],            # only Canada\n     *   ...\n     *  }\n     */\n                this.dialCodeToIso2Map = {};\n                // first: add dial codes\n                for (let i = 0; i < this.countries.length; i++) {\n                    const c = this.countries[i];\n                    if (!this.dialCodes[c.dialCode]) {\n                        this.dialCodes[c.dialCode] = true;\n                    }\n                    this._addToDialCodeMap(c.iso2, c.dialCode, c.priority);\n                }\n                // next: add area codes\n                // this is a second loop over countries, to make sure we have all of the \"root\" countries\n                // already in the map, so that we can access them, as each time we add an area code substring\n                // to the map, we also need to include the \"root\" country's code, as that also matches\n                for (let i = 0; i < this.countries.length; i++) {\n                    const c = this.countries[i];\n                    // area codes\n                    if (c.areaCodes) {\n                        const rootIso2Code = this.dialCodeToIso2Map[c.dialCode][0];\n                        // for each area code\n                        for (let j = 0; j < c.areaCodes.length; j++) {\n                            const areaCode = c.areaCodes[j];\n                            // for each digit in the area code to add all partial matches as well\n                            for (let k = 1; k < areaCode.length; k++) {\n                                const partialDialCode = c.dialCode + areaCode.substr(0, k);\n                                // start with the root country, as that also matches this dial code\n                                this._addToDialCodeMap(rootIso2Code, partialDialCode);\n                                this._addToDialCodeMap(c.iso2, partialDialCode);\n                            }\n                            // add the full area code\n                            this._addToDialCodeMap(c.iso2, c.dialCode + areaCode);\n                        }\n                    }\n                }\n            }\n            // process preferred countries - iterate through the preferences, fetching the country data for\n            // each one\n            _processPreferredCountries() {\n                this.preferredCountries = [];\n                for (let i = 0; i < this.options.preferredCountries.length; i++) {\n                    const iso2 = this.options.preferredCountries[i].toLowerCase();\n                    const countryData = this._getCountryData(iso2, true);\n                    if (countryData) {\n                        this.preferredCountries.push(countryData);\n                    }\n                }\n            }\n            // create a DOM element\n            _createEl(name, attrs, container) {\n                const el = document.createElement(name);\n                if (attrs) {\n                    Object.entries(attrs).forEach(([ key, value ]) => el.setAttribute(key, value));\n                }\n                if (container) {\n                    container.appendChild(el);\n                }\n                return el;\n            }\n            // generate all of the markup for the plugin: the selected flag overlay, and the dropdown\n            _generateMarkup() {\n                this.telInput.classList.add(\"iti__tel-input\");\n                // if autocomplete does not exist on the element and its form, then\n                // prevent autocomplete as there's no safe, cross-browser event we can react to, so it can\n                // easily put the plugin in an inconsistent state e.g. the wrong flag selected for the\n                // autocompleted number, which on submit could mean wrong number is saved\n                if (!this.telInput.hasAttribute(\"autocomplete\") && !(this.telInput.form && this.telInput.form.hasAttribute(\"autocomplete\"))) {\n                    this.telInput.setAttribute(\"autocomplete\", \"off\");\n                }\n                const {\n                    allowDropdown,\n                    showSelectedDialCode,\n                    showFlags,\n                    containerClass,\n                    hiddenInput,\n                    dropdownContainer,\n                    fixDropdownWidth,\n                    useFullscreenPopup,\n                    countrySearch,\n                    i18n\n                } = this.options;\n                // containers (mostly for positioning)\n                let parentClass = \"iti\";\n                if (allowDropdown) {\n                    parentClass += \" iti--allow-dropdown\";\n                }\n                if (showSelectedDialCode) {\n                    parentClass += \" iti--show-selected-dial-code\";\n                }\n                if (showFlags) {\n                    parentClass += \" iti--show-flags\";\n                }\n                if (containerClass) {\n                    parentClass += ` ${containerClass}`;\n                }\n                if (!useFullscreenPopup) {\n                    parentClass += \" iti--inline-dropdown\";\n                }\n                const wrapper = this._createEl(\"div\", {\n                    class: parentClass\n                });\n                this.telInput.parentNode.insertBefore(wrapper, this.telInput);\n                // if we're showing flags or dial codes, we need the flags container etc\n                if (showFlags || showSelectedDialCode) {\n                    this.flagsContainer = this._createEl(\"div\", {\n                        class: \"iti__flag-container\"\n                    }, wrapper);\n                    // selected flag (displayed on left of input while allowDropdown is enabled, otherwise to right)\n                    // when countrySearch disabled: using Aria tags for \"Select-Only Combobox Example\"\n                    // https://www.w3.org/WAI/ARIA/apg/patterns/combobox/examples/combobox-select-only/\n                    this.selectedFlag = this._createEl(\"div\", {\n                        class: \"iti__selected-flag\",\n                        ...allowDropdown && {\n                            role: \"button\",\n                            \"aria-expanded\": \"false\",\n                            \"aria-label\": this.options.i18n.selectedCountryAriaLabel || \"Selected country\",\n                            \"aria-haspopup\": countrySearch ? \"true\" : \"listbox\",\n                            \"aria-controls\": countrySearch ? `iti-${this.id}__dropdown-content` : `iti-${this.id}__country-listbox`,\n                            ...countrySearch || {\n                                role: \"combobox\"\n                            }\n                        }\n                    }, this.flagsContainer);\n                    // we now include the selected flag element even when showFlags is disabled,\n                    // as need to show globe icon for showSelectedDialCode empty state\n                    this.selectedFlagInner = this._createEl(\"div\", null, this.selectedFlag);\n                    this.selectedFlagA11yText = this._createEl(\"span\", {\n                        class: \"iti__a11y-text\"\n                    }, this.selectedFlagInner);\n                }\n                wrapper.appendChild(this.telInput);\n                if (this.selectedFlag && this.telInput.disabled) {\n                    this.selectedFlag.setAttribute(\"aria-disabled\", \"true\");\n                }\n                if (showSelectedDialCode) {\n                    this.selectedDialCode = this._createEl(\"div\", {\n                        class: \"iti__selected-dial-code\"\n                    }, this.selectedFlag);\n                }\n                if (allowDropdown) {\n                    if (!this.telInput.disabled) {\n                        // make element focusable and tab navigable\n                        this.selectedFlag.setAttribute(\"tabindex\", \"0\");\n                    }\n                    this.dropdownArrow = this._createEl(\"div\", {\n                        class: \"iti__arrow\",\n                        \"aria-hidden\": \"true\"\n                    }, this.selectedFlag);\n                    const extraClasses = fixDropdownWidth ? \"\" : \"iti--flexible-dropdown-width\";\n                    this.dropdownContent = this._createEl(\"div\", {\n                        id: `iti-${this.id}__dropdown-content`,\n                        class: `iti__dropdown-content iti__hide ${extraClasses}`\n                    });\n                    if (countrySearch) {\n                        this.searchInput = this._createEl(\"input\", {\n                            type: \"text\",\n                            class: \"iti__search-input\",\n                            placeholder: i18n.searchPlaceholder || \"Search\",\n                            role: \"combobox\",\n                            \"aria-expanded\": \"true\",\n                            \"aria-label\": i18n.searchPlaceholder || \"Search\",\n                            \"aria-controls\": `iti-${this.id}__country-listbox`,\n                            \"aria-autocomplete\": \"list\",\n                            autocomplete: \"off\"\n                        }, this.dropdownContent);\n                        this.searchResultsA11yText = this._createEl(\"span\", {\n                            class: \"iti__a11y-text\"\n                        }, this.dropdownContent);\n                    }\n                    // country list: preferred countries, then divider, then all countries\n                    this.countryList = this._createEl(\"ul\", {\n                        class: \"iti__country-list\",\n                        id: `iti-${this.id}__country-listbox`,\n                        role: \"listbox\",\n                        \"aria-label\": i18n.countryListAriaLabel || \"List of countries\"\n                    }, this.dropdownContent);\n                    if (this.preferredCountries.length && !countrySearch) {\n                        this._appendListItems(this.preferredCountries, \"iti__preferred\", true);\n                        this._createEl(\"li\", {\n                            class: \"iti__divider\",\n                            \"aria-hidden\": \"true\"\n                        }, this.countryList);\n                    }\n                    this._appendListItems(this.countries, \"iti__standard\");\n                    if (countrySearch) {\n                        this._updateSearchResultsText();\n                    }\n                    // create dropdownContainer markup\n                    if (dropdownContainer) {\n                        let dropdownClasses = \"iti iti--container\";\n                        if (useFullscreenPopup) {\n                            dropdownClasses += \" iti--fullscreen-popup\";\n                        } else {\n                            dropdownClasses += \" iti--inline-dropdown\";\n                        }\n                        if (countrySearch) {\n                            dropdownClasses += \" iti--country-search\";\n                        }\n                        this.dropdown = this._createEl(\"div\", {\n                            class: dropdownClasses\n                        });\n                        this.dropdown.appendChild(this.dropdownContent);\n                    } else {\n                        this.flagsContainer.appendChild(this.dropdownContent);\n                    }\n                }\n                if (hiddenInput) {\n                    const telInputName = this.telInput.getAttribute(\"name\");\n                    const names = hiddenInput(telInputName);\n                    if (names.phone) {\n                        // Create hidden input for the full international number\n                        this.hiddenInput = this._createEl(\"input\", {\n                            type: \"hidden\",\n                            name: names.phone\n                        });\n                        wrapper.appendChild(this.hiddenInput);\n                    }\n                    if (names.country) {\n                        // Create hidden input for the selected country iso2 code\n                        this.hiddenInputCountry = this._createEl(\"input\", {\n                            type: \"hidden\",\n                            name: names.country\n                        });\n                        wrapper.appendChild(this.hiddenInputCountry);\n                    }\n                }\n            }\n            // for each of the passed countries: add a country <li> to the countryList <ul> container\n            _appendListItems(countries, className, preferred) {\n                for (let i = 0; i < countries.length; i++) {\n                    const c = countries[i];\n                    const idSuffix = preferred ? \"-preferred\" : \"\";\n                    const listItem = this._createEl(\"li\", {\n                        id: `iti-${this.id}__item-${c.iso2}${idSuffix}`,\n                        class: `iti__country ${className}`,\n                        tabindex: \"-1\",\n                        role: \"option\",\n                        \"data-dial-code\": c.dialCode,\n                        \"data-country-code\": c.iso2,\n                        \"aria-selected\": \"false\"\n                    }, this.countryList);\n                    // store this for later use e.g. country search filtering\n                    c.nodeById[this.id] = listItem;\n                    let content = \"\";\n                    // add the flag\n                    if (this.options.showFlags) {\n                        content += `<div class='iti__flag-box'><div class='iti__flag iti__${c.iso2}'></div></div>`;\n                    }\n                    // and the country name and dial code\n                    content += `<span class='iti__country-name'>${c.name}</span>`;\n                    content += `<span class='iti__dial-code'>+${c.dialCode}</span>`;\n                    listItem.insertAdjacentHTML(\"beforeend\", content);\n                }\n            }\n            // set the initial state of the input value and the selected flag by:\n            // 1. extracting a dial code from the given number\n            // 2. using explicit initialCountry\n            // 3. picking the first preferred country\n            // 4. picking the first country\n            _setInitialState(overrideAutoCountry = false) {\n                // fix firefox bug: when first load page (with input with value set to number with intl dial\n                // code) and initialising plugin removes the dial code from the input, then refresh page,\n                // and we try to init plugin again but this time on number without dial code so get grey flag\n                const attributeValue = this.telInput.getAttribute(\"value\");\n                const inputValue = this.telInput.value;\n                const useAttribute = attributeValue && attributeValue.charAt(0) === \"+\" && (!inputValue || inputValue.charAt(0) !== \"+\");\n                const val = useAttribute ? attributeValue : inputValue;\n                const dialCode = this._getDialCode(val);\n                const isRegionlessNanp = this._isRegionlessNanp(val);\n                const {\n                    initialCountry\n                } = this.options;\n                // if we already have a dial code, and it's not a regionlessNanp, we can go ahead and set the\n                // flag, else fall back to the default country\n                if (dialCode && !isRegionlessNanp) {\n                    this._updateFlagFromNumber(val);\n                } else if (initialCountry !== \"auto\" || overrideAutoCountry) {\n                    const lowerInitialCountry = initialCountry ? initialCountry.toLowerCase() : \"\";\n                    const isValidInitialCountry = lowerInitialCountry && this._getCountryData(lowerInitialCountry, true);\n                    // see if we should select a flag\n                    if (isValidInitialCountry) {\n                        this._setCountry(lowerInitialCountry);\n                    } else {\n                        if (dialCode && isRegionlessNanp) {\n                            // has intl dial code, is regionless nanp, and no initialCountry, so default to US\n                            this._setCountry(\"us\");\n                        } else {\n                            // display the empty state (globe icon)\n                            this._setCountry();\n                        }\n                    }\n                }\n                // NOTE: if initialCountry is set to auto, that will be handled separately\n                // format - note this wont be run after _updateDialCode as that's only called if no val\n                if (val) {\n                    this._updateValFromNumber(val);\n                }\n            }\n            // initialise the main event listeners: input keyup, and click selected flag\n            _initListeners() {\n                this._initTelInputListeners();\n                if (this.options.allowDropdown) {\n                    this._initDropdownListeners();\n                }\n                if ((this.hiddenInput || this.hiddenInputCountry) && this.telInput.form) {\n                    this._initHiddenInputListener();\n                }\n            }\n            // update hidden input on form submit\n            _initHiddenInputListener() {\n                this._handleHiddenInputSubmit = () => {\n                    if (this.hiddenInput) {\n                        this.hiddenInput.value = this.getNumber();\n                    }\n                    if (this.hiddenInputCountry) {\n                        this.hiddenInputCountry.value = this.getSelectedCountryData().iso2;\n                    }\n                };\n                this.telInput.form.addEventListener(\"submit\", this._handleHiddenInputSubmit);\n            }\n            // initialise the dropdown listeners\n            _initDropdownListeners() {\n                // hack for input nested inside label (which is valid markup): clicking the selected-flag to\n                // open the dropdown would then automatically trigger a 2nd click on the input which would\n                // close it again\n                this._handleLabelClick = e => {\n                    // if the dropdown is closed, then focus the input, else ignore the click\n                    if (this.dropdownContent.classList.contains(\"iti__hide\")) {\n                        this.telInput.focus();\n                    } else {\n                        e.preventDefault();\n                    }\n                };\n                const label = this.telInput.closest(\"label\");\n                if (label) {\n                    label.addEventListener(\"click\", this._handleLabelClick);\n                }\n                // toggle country dropdown on click\n                this._handleClickSelectedFlag = () => {\n                    // only intercept this event if we're opening the dropdown\n                    // else let it bubble up to the top (\"click-off-to-close\" listener)\n                    // we cannot just stopPropagation as it may be needed to close another instance\n                    if (this.dropdownContent.classList.contains(\"iti__hide\") && !this.telInput.disabled && !this.telInput.readOnly) {\n                        this._openDropdown();\n                    }\n                };\n                this.selectedFlag.addEventListener(\"click\", this._handleClickSelectedFlag);\n                // open dropdown if selected flag is focused and they press up/down/space/enter\n                this._handleFlagsContainerKeydown = e => {\n                    const isDropdownHidden = this.dropdownContent.classList.contains(\"iti__hide\");\n                    if (isDropdownHidden && [ \"ArrowUp\", \"ArrowDown\", \" \", \"Enter\" ].includes(e.key)) {\n                        // prevent form from being submitted if \"ENTER\" was pressed\n                        e.preventDefault();\n                        // prevent event from being handled again by document\n                        e.stopPropagation();\n                        this._openDropdown();\n                    }\n                    // allow navigation from dropdown to input on TAB\n                    if (e.key === \"Tab\") {\n                        this._closeDropdown();\n                    }\n                };\n                this.flagsContainer.addEventListener(\"keydown\", this._handleFlagsContainerKeydown);\n            }\n            // init many requests: utils script / geo ip lookup\n            _initRequests() {\n                // if the user has specified the path to the utils script, fetch it on window.load, else resolve\n                if (this.options.utilsScript && !window.intlTelInputUtils) {\n                    // if the plugin is being initialised after the window.load event has already been fired\n                    if (window.intlTelInputGlobals.documentReady()) {\n                        window.intlTelInputGlobals.loadUtils(this.options.utilsScript);\n                    } else {\n                        // wait until the load event so we don't block any other requests e.g. the flags image\n                        window.addEventListener(\"load\", () => {\n                            window.intlTelInputGlobals.loadUtils(this.options.utilsScript);\n                        });\n                    }\n                } else {\n                    this.resolveUtilsScriptPromise();\n                }\n                // dont bother with IP lookup if we already have a selected country\n                if (this.options.initialCountry === \"auto\" && !this.selectedCountryData.iso2) {\n                    this._loadAutoCountry();\n                } else {\n                    this.resolveAutoCountryPromise();\n                }\n            }\n            // perform the geo ip lookup\n            _loadAutoCountry() {\n                // 3 options:\n                // 1) already loaded (we're done)\n                // 2) not already started loading (start)\n                // 3) already started loading (do nothing - just wait for loading callback to fire)\n                if (window.intlTelInputGlobals.autoCountry) {\n                    this.handleAutoCountry();\n                } else if (!window.intlTelInputGlobals.startedLoadingAutoCountry) {\n                    // don't do this twice!\n                    window.intlTelInputGlobals.startedLoadingAutoCountry = true;\n                    if (typeof this.options.geoIpLookup === \"function\") {\n                        this.options.geoIpLookup((iso2 = \"\") => {\n                            const iso2Lower = iso2.toLowerCase();\n                            const isValidIso2 = iso2Lower && this._getCountryData(iso2Lower, true);\n                            if (isValidIso2) {\n                                window.intlTelInputGlobals.autoCountry = iso2Lower;\n                                // tell all instances the auto country is ready\n                                // TODO: this should just be the current instances\n                                // UPDATE: use setTimeout in case their geoIpLookup function calls this callback straight\n                                // away (e.g. if they have already done the geo ip lookup somewhere else). Using\n                                // setTimeout means that the current thread of execution will finish before executing\n                                // this, which allows the plugin to finish initialising.\n                                setTimeout(() => forEachInstance(\"handleAutoCountry\"));\n                            } else {\n                                this._setInitialState(true);\n                                forEachInstance(\"rejectAutoCountryPromise\");\n                            }\n                        }, () => forEachInstance(\"rejectAutoCountryPromise\"));\n                    }\n                }\n            }\n            // initialize the tel input listeners\n            _initTelInputListeners() {\n                const {\n                    strictMode,\n                    formatAsYouType\n                } = this.options;\n                let userOverrideFormatting = false;\n                // update flag on input event\n                this._handleInputEvent = e => {\n                    if (this._updateFlagFromNumber(this.telInput.value)) {\n                        this._triggerCountryChange();\n                    }\n                    // if user types their own formatting char (not a plus or a numeric), or they paste something, then set the override\n                    const isFormattingChar = e && e.data && /[^+0-9]/.test(e.data);\n                    const isPaste = e && e.inputType === \"insertFromPaste\" && this.telInput.value;\n                    if (isFormattingChar || isPaste && !strictMode) {\n                        userOverrideFormatting = true;\n                    }\n                    // if user removes all formatting chars, then reset the override\n                     else if (!/[^+0-9]/.test(this.telInput.value)) {\n                        userOverrideFormatting = false;\n                    }\n                    // handle FAYT, unless userOverrideFormatting\n                    if (formatAsYouType && !userOverrideFormatting) {\n                        // maintain caret position after reformatting\n                        const currentCaretPos = this.telInput.selectionStart;\n                        const valueBeforeCaret = this.telInput.value.substring(0, currentCaretPos);\n                        const relevantCharsBeforeCaret = valueBeforeCaret.replace(/[^+0-9]/g, \"\").length;\n                        const isDeleteForwards = e && e.inputType === \"deleteContentForward\";\n                        const formattedValue = this._formatNumberAsYouType();\n                        const newCaretPos = this._translateCursorPosition(relevantCharsBeforeCaret, formattedValue, currentCaretPos, isDeleteForwards);\n                        this.telInput.value = formattedValue;\n                        this.telInput.setSelectionRange(newCaretPos, newCaretPos);\n                    }\n                };\n                // this handles individual key presses as well as cut/paste events\n                // the advantage of the \"input\" event over \"keyup\" etc is that \"input\" only fires when the value changes,\n                // whereas \"keyup\" fires even for shift key, arrow key presses etc\n                this.telInput.addEventListener(\"input\", this._handleInputEvent);\n                if (strictMode) {\n                    this._handleKeydownEvent = e => {\n                        // only ignore actual character presses, rather than ctrl, alt, shift, command, arrow keys, delete/backspace, cut/copy/paste etc\n                        if (e.key.length === 1 && !e.altKey && !e.ctrlKey && !e.metaKey) {\n                            const isInitialPlus = this.telInput.selectionStart === 0 && e.key === \"+\";\n                            const isNumeric = /^[0-9]$/.test(e.key);\n                            const isAllowedChar = isInitialPlus || isNumeric;\n                            const fullNumber = this._getFullNumber();\n                            const coreNumber = intlTelInputUtils.getCoreNumber(fullNumber, this.selectedCountryData.iso2);\n                            const hasReachedMaxLength = this.maxCoreNumberLength && coreNumber.length >= this.maxCoreNumberLength;\n                            if (!isAllowedChar || hasReachedMaxLength) {\n                                e.preventDefault();\n                            }\n                        }\n                    };\n                    this.telInput.addEventListener(\"keydown\", this._handleKeydownEvent);\n                }\n            }\n            // iterate through the formattedValue until hit the right number of relevant chars\n            _translateCursorPosition(relevantChars, formattedValue, prevCaretPos, isDeleteForwards) {\n                // if the first char is a formatting char, and they backspace delete it:\n                // cursor should stay at the start (pos 0), rather than stick to the first digit (pos 1)\n                if (prevCaretPos === 0 && !isDeleteForwards) {\n                    return 0;\n                }\n                let count = 0;\n                for (let i = 0; i < formattedValue.length; i++) {\n                    if (/[+0-9]/.test(formattedValue[i])) {\n                        count++;\n                    }\n                    // normal case: stop when you hit the right number of relevant chars\n                    // (cursor will be just after the final relevant char)\n                    if (count === relevantChars && !isDeleteForwards) {\n                        return i + 1;\n                    }\n                    // spacial case: delete forwards (fn + delete on a mac):\n                    // wait until hit one extra relevant char, and put the cursor just before it (after any formatting chars)\n                    if (isDeleteForwards && count === relevantChars + 1) {\n                        return i;\n                    }\n                }\n                return formattedValue.length;\n            }\n            // adhere to the input's maxlength attr\n            _cap(number) {\n                const max = this.telInput.getAttribute(\"maxlength\");\n                return max && number.length > max ? number.substr(0, max) : number;\n            }\n            // clear the input if it just contains a dial code\n            _removeEmptyDialCode() {\n                if (this.telInput.value.charAt(0) === \"+\") {\n                    const numeric = this._getNumeric(this.telInput.value);\n                    // if just a plus, or if just a dial code\n                    if (!numeric || this.selectedCountryData.dialCode === numeric) {\n                        this.telInput.value = \"\";\n                    }\n                }\n            }\n            // extract the numeric digits from the given string\n            _getNumeric(s) {\n                return s.replace(/\\D/g, \"\");\n            }\n            // trigger a custom event on the input\n            _trigger(name) {\n                const e = new Event(name, {\n                    bubbles: true,\n                    cancelable: true\n                });\n                this.telInput.dispatchEvent(e);\n            }\n            // open the dropdown\n            _openDropdown() {\n                const {\n                    fixDropdownWidth,\n                    countrySearch\n                } = this.options;\n                if (fixDropdownWidth) {\n                    this.dropdownContent.style.width = `${this.telInput.offsetWidth}px`;\n                }\n                this.dropdownContent.classList.remove(\"iti__hide\");\n                this.selectedFlag.setAttribute(\"aria-expanded\", \"true\");\n                this._setDropdownPosition();\n                // if we have previously selected a country (and countrySearch is disabled), then highlight that item and scroll to it\n                // else highlight the first item and scroll to top (even if countrySearch is disabled e.g. on init, showing globe icon)\n                if (this.activeItem && !countrySearch) {\n                    // update highlighting and scroll to active list item\n                    this._highlightListItem(this.activeItem, false);\n                    this._scrollTo(this.activeItem, true);\n                } else {\n                    // start by highlighting the first item in the list\n                    const {\n                        firstElementChild\n                    } = this.countryList;\n                    if (firstElementChild) {\n                        this._highlightListItem(firstElementChild, false);\n                        this.countryList.scrollTop = 0;\n                    }\n                    if (countrySearch) {\n                        this.searchInput.focus();\n                    }\n                }\n                // bind all the dropdown-related listeners: mouseover, click, click-off, keydown\n                this._bindDropdownListeners();\n                // update the arrow\n                this.dropdownArrow.classList.add(\"iti__arrow--up\");\n                this._trigger(\"open:countrydropdown\");\n            }\n            // make sure the el has the className or not, depending on the value of shouldHaveClass\n            _toggleClass(el, className, shouldHaveClass) {\n                if (shouldHaveClass && !el.classList.contains(className)) {\n                    el.classList.add(className);\n                } else if (!shouldHaveClass && el.classList.contains(className)) {\n                    el.classList.remove(className);\n                }\n            }\n            // decide if should position dropdown above or below input (depends on position within viewport, and scroll)\n            _setDropdownPosition() {\n                if (this.options.dropdownContainer) {\n                    this.options.dropdownContainer.appendChild(this.dropdown);\n                }\n                if (!this.options.useFullscreenPopup) {\n                    const pos = this.telInput.getBoundingClientRect();\n                    // windowTop from https://stackoverflow.com/a/14384091/217866\n                    const windowTop = document.documentElement.scrollTop;\n                    const inputTop = pos.top + windowTop;\n                    const dropdownHeight = this.dropdownContent.offsetHeight;\n                    // dropdownFitsBelow = (dropdownBottom < windowBottom)\n                    const dropdownFitsBelow = inputTop + this.telInput.offsetHeight + dropdownHeight < windowTop + window.innerHeight;\n                    const dropdownFitsAbove = inputTop - dropdownHeight > windowTop;\n                    // dont allow positioning above when country search enabled as the search box jumps around as you filter countries\n                    const positionDropdownAboveInput = !this.options.countrySearch && !dropdownFitsBelow && dropdownFitsAbove;\n                    // by default, the dropdown will be below the input. If we want to position it above the\n                    // input, we add the dropup class.\n                    this._toggleClass(this.dropdownContent, \"iti__dropdown-content--dropup\", positionDropdownAboveInput);\n                    // if dropdownContainer is enabled, calculate postion\n                    if (this.options.dropdownContainer) {\n                        // if we want to position the dropdown below the input, we need to add the input height to the top value\n                        const extraTop = positionDropdownAboveInput ? 0 : this.telInput.offsetHeight;\n                        // calculate placement\n                        this.dropdown.style.top = `${inputTop + extraTop}px`;\n                        this.dropdown.style.left = `${pos.left + document.body.scrollLeft}px`;\n                        // close menu on window scroll\n                        this._handleWindowScroll = () => this._closeDropdown();\n                        window.addEventListener(\"scroll\", this._handleWindowScroll);\n                    }\n                }\n            }\n            // we only bind dropdown listeners when the dropdown is open\n            _bindDropdownListeners() {\n                // when mouse over a list item, just highlight that one\n                // we add the class \"highlight\", so if they hit \"enter\" we know which one to select\n                this._handleMouseoverCountryList = e => {\n                    // handle event delegation, as we're listening for this event on the countryList\n                    const listItem = e.target.closest(\".iti__country\");\n                    if (listItem) {\n                        this._highlightListItem(listItem, false);\n                    }\n                };\n                this.countryList.addEventListener(\"mouseover\", this._handleMouseoverCountryList);\n                // listen for country selection\n                this._handleClickCountryList = e => {\n                    const listItem = e.target.closest(\".iti__country\");\n                    if (listItem) {\n                        this._selectListItem(listItem);\n                    }\n                };\n                this.countryList.addEventListener(\"click\", this._handleClickCountryList);\n                // click off to close\n                // (except when this initial opening click is bubbling up)\n                // we cannot just stopPropagation as it may be needed to close another instance\n                let isOpening = true;\n                this._handleClickOffToClose = () => {\n                    if (!isOpening) {\n                        this._closeDropdown();\n                    }\n                    isOpening = false;\n                };\n                document.documentElement.addEventListener(\"click\", this._handleClickOffToClose);\n                // listen for up/down scrolling, enter to select, or escape to close\n                // use keydown as keypress doesn't fire for non-char keys and we want to catch if they\n                // just hit down and hold it to scroll down (no keyup event).\n                // listen on the document because that's where key events are triggered if no input has focus\n                let query = \"\";\n                let queryTimer = null;\n                this._handleKeydownOnDropdown = e => {\n                    // prevent down key from scrolling the whole page,\n                    // and enter key from submitting a form etc\n                    if ([ \"ArrowUp\", \"ArrowDown\", \"Enter\", \"Escape\" ].includes(e.key)) {\n                        e.preventDefault();\n                        e.stopPropagation();\n                        // up and down to navigate\n                        if (e.key === \"ArrowUp\" || e.key === \"ArrowDown\") {\n                            this._handleUpDownKey(e.key);\n                        }\n                        // enter to select\n                         else if (e.key === \"Enter\") {\n                            this._handleEnterKey();\n                        }\n                        // esc to close\n                         else if (e.key === \"Escape\") {\n                            this._closeDropdown();\n                        }\n                    }\n                    // alpha chars to perform search\n                    // regex allows one latin alpha char or space, based on https://stackoverflow.com/a/26900132/217866)\n                    if (!this.options.countrySearch && /^[a-zA-Z\u00C0-\u00FF\u0430-\u044F\u0410-\u042F ]$/.test(e.key)) {\n                        e.stopPropagation();\n                        // jump to countries that start with the query string\n                        if (queryTimer) {\n                            clearTimeout(queryTimer);\n                        }\n                        query += e.key.toLowerCase();\n                        this._searchForCountry(query);\n                        // if the timer hits 1 second, reset the query\n                        queryTimer = setTimeout(() => {\n                            query = \"\";\n                        }, 1e3);\n                    }\n                };\n                document.addEventListener(\"keydown\", this._handleKeydownOnDropdown);\n                if (this.options.countrySearch) {\n                    const doFilter = () => {\n                        const inputQuery = this.searchInput.value.trim();\n                        if (inputQuery) {\n                            this._filterCountries(inputQuery);\n                        } else {\n                            this._filterCountries(\"\", true);\n                        }\n                    };\n                    let keyupTimer = null;\n                    this._handleSearchChange = () => {\n                        // filtering country nodes is expensive (lots of DOM manipulation), so rate limit it\n                        if (keyupTimer) {\n                            clearTimeout(keyupTimer);\n                        }\n                        keyupTimer = setTimeout(() => {\n                            doFilter();\n                            keyupTimer = null;\n                        }, 100);\n                    };\n                    this.searchInput.addEventListener(\"input\", this._handleSearchChange);\n                    // stop propagation on search input click, so doesn't trigger click-off-to-close listener\n                    this.searchInput.addEventListener(\"click\", e => e.stopPropagation());\n                }\n            }\n            // turns \"R\u00E9union\" into \"Reunion\"\n            // from https://stackoverflow.com/a/37511463\n            _normaliseString(s = \"\") {\n                return s.normalize(\"NFD\").replace(/[\\u0300-\\u036f]/g, \"\").toLowerCase();\n            }\n            _filterCountries(query, isReset = false) {\n                let isFirst = true;\n                this.countryList.innerHTML = \"\";\n                const normalisedQuery = this._normaliseString(query);\n                for (let i = 0; i < this.countries.length; i++) {\n                    const c = this.countries[i];\n                    const normalisedCountryName = this._normaliseString(c.name);\n                    const fullDialCode = `+${c.dialCode}`;\n                    if (isReset || normalisedCountryName.includes(normalisedQuery) || fullDialCode.includes(normalisedQuery) || c.iso2.includes(normalisedQuery)) {\n                        this.countryList.appendChild(c.nodeById[this.id]);\n                        // highlight the first item\n                        if (isFirst) {\n                            this._highlightListItem(c.nodeById[this.id], false);\n                            isFirst = false;\n                        }\n                    }\n                }\n                // scroll to top (useful if user had previously scrolled down)\n                this.countryList.scrollTop = 0;\n                this._updateSearchResultsText();\n            }\n            // update search results text (for a11y)\n            _updateSearchResultsText() {\n                const {\n                    i18n\n                } = this.options;\n                const count = this.countryList.childElementCount;\n                let searchText;\n                if (count === 0) {\n                    searchText = i18n.zeroSearchResults || \"No results found\";\n                } else if (count === 1) {\n                    searchText = i18n.oneSearchResult || \"1 result found\";\n                } else {\n                    // eslint-disable-next-line no-template-curly-in-string\n                    searchText = i18n.multipleSearchResults ? i18n.multipleSearchResults.replace(\"${count}\", count) : `${count} results found`;\n                }\n                this.searchResultsA11yText.textContent = searchText;\n            }\n            // highlight the next/prev item in the list (and ensure it is visible)\n            _handleUpDownKey(key) {\n                let next = key === \"ArrowUp\" ? this.highlightedItem.previousElementSibling : this.highlightedItem.nextElementSibling;\n                if (next) {\n                    // skip the divider\n                    if (next.classList.contains(\"iti__divider\")) {\n                        next = key === \"ArrowUp\" ? next.previousElementSibling : next.nextElementSibling;\n                    }\n                } else if (this.countryList.childElementCount > 1) {\n                    // otherwise, we must be at the end, so loop round again\n                    next = key === \"ArrowUp\" ? this.countryList.lastElementChild : this.countryList.firstElementChild;\n                }\n                if (next) {\n                    // make sure the next item is visible\n                    // (before calling focus(), which can cause the next item to scroll to the middle of the dropdown, which is jarring)\n                    this._scrollTo(next, false);\n                    // if country search enabled, dont lose focus from the search input on up/down\n                    const doFocus = !this.options.countrySearch;\n                    this._highlightListItem(next, doFocus);\n                }\n            }\n            // select the currently highlighted item\n            _handleEnterKey() {\n                if (this.highlightedItem) {\n                    this._selectListItem(this.highlightedItem);\n                }\n            }\n            // find the first list item whose name starts with the query string\n            _searchForCountry(query) {\n                for (let i = 0; i < this.countries.length; i++) {\n                    if (this._startsWith(this.countries[i].name, query)) {\n                        const listItem = this.countries[i].nodeById[this.id];\n                        // update highlighting and scroll\n                        this._highlightListItem(listItem, false);\n                        this._scrollTo(listItem, true);\n                        break;\n                    }\n                }\n            }\n            // check if string a starts with string b\n            _startsWith(a, b) {\n                return a.substr(0, b.length).toLowerCase() === b;\n            }\n            // update the input's value to the given val (format first if possible)\n            // NOTE: this is called from _setInitialState, handleUtils and setNumber\n            _updateValFromNumber(fullNumber) {\n                let number = fullNumber;\n                if (this.options.formatOnDisplay && window.intlTelInputUtils && this.selectedCountryData) {\n                    const useNational = this.options.nationalMode || number.charAt(0) !== \"+\" && !this.options.showSelectedDialCode;\n                    const {\n                        NATIONAL,\n                        INTERNATIONAL\n                    } = intlTelInputUtils.numberFormat;\n                    const format = useNational ? NATIONAL : INTERNATIONAL;\n                    number = intlTelInputUtils.formatNumber(number, this.selectedCountryData.iso2, format);\n                }\n                number = this._beforeSetNumber(number);\n                this.telInput.value = number;\n            }\n            // check if need to select a new flag based on the given number\n            // Note: called from _setInitialState, keyup handler, setNumber\n            _updateFlagFromNumber(fullNumber) {\n                const plusIndex = fullNumber.indexOf(\"+\");\n                // if it contains a plus, discard any chars before it e.g. accidental space char.\n                // this keeps the selected country auto-updating correctly, which we want as\n                // libphonenumber's validation/getNumber methods will ignore these chars anyway\n                let number = plusIndex ? fullNumber.substring(plusIndex) : fullNumber;\n                // if we already have US/Canada selected, make sure the number starts\n                // with a +1 so _getDialCode will be able to extract the area code\n                // update: if we dont yet have selectedCountryData, but we're here (trying to update the flag\n                // from the number), that means we're initialising the plugin with a number that already has a\n                // dial code, so fine to ignore this bit\n                const selectedDialCode = this.selectedCountryData.dialCode;\n                const isNanp = selectedDialCode === \"1\";\n                if (number && isNanp && number.charAt(0) !== \"+\") {\n                    if (number.charAt(0) !== \"1\") {\n                        number = `1${number}`;\n                    }\n                    number = `+${number}`;\n                }\n                // if showSelectedDialCode enabled, then consider the selected dial code to be part of the number\n                if (this.options.showSelectedDialCode && selectedDialCode && number.charAt(0) !== \"+\") {\n                    number = `+${selectedDialCode}${number}`;\n                }\n                // try and extract valid dial code from input\n                const dialCode = this._getDialCode(number, true);\n                const numeric = this._getNumeric(number);\n                let iso2 = null;\n                if (dialCode) {\n                    const iso2Codes = this.dialCodeToIso2Map[this._getNumeric(dialCode)];\n                    // check if the right country is already selected. this should be false if the number is\n                    // longer than the matched dial code because in this case we need to make sure that if\n                    // there are multiple country matches, that the first one is selected (note: we could\n                    // just check that here, but it requires the same loop that we already have later)\n                    const alreadySelected = iso2Codes.indexOf(this.selectedCountryData.iso2) !== -1 && numeric.length <= dialCode.length - 1;\n                    const isRegionlessNanpNumber = selectedDialCode === \"1\" && this._isRegionlessNanp(numeric);\n                    // only update the flag if:\n                    // A) NOT (we currently have a NANP flag selected, and the number is a regionlessNanp)\n                    // AND\n                    // B) the right country is not already selected\n                    if (!isRegionlessNanpNumber && !alreadySelected) {\n                        // if using onlyCountries option, iso2Codes[0] may be empty, so we must find the first\n                        // non-empty index\n                        for (let j = 0; j < iso2Codes.length; j++) {\n                            if (iso2Codes[j]) {\n                                iso2 = iso2Codes[j];\n                                break;\n                            }\n                        }\n                    }\n                } else if (number.charAt(0) === \"+\" && numeric.length) {\n                    // invalid dial code, so empty\n                    // Note: use getNumeric here because the number has not been formatted yet, so could contain\n                    // bad chars\n                    iso2 = \"\";\n                } else if ((!number || number === \"+\") && !this.selectedCountryData.iso2) {\n                    // if no selected flag, and user either clears the input, or just types a plus, then show default\n                    iso2 = this.defaultCountry;\n                }\n                if (iso2 !== null) {\n                    return this._setCountry(iso2);\n                }\n                return false;\n            }\n            // check if the given number is a regionless NANP number (expects the number to contain an\n            // international dial code)\n            _isRegionlessNanp(number) {\n                const numeric = this._getNumeric(number);\n                if (numeric.charAt(0) === \"1\") {\n                    const areaCode = numeric.substr(1, 3);\n                    return regionlessNanpNumbers.indexOf(areaCode) !== -1;\n                }\n                return false;\n            }\n            // remove highlighting from other list items and highlight the given item\n            _highlightListItem(listItem, shouldFocus) {\n                const prevItem = this.highlightedItem;\n                if (prevItem) {\n                    prevItem.classList.remove(\"iti__highlight\");\n                    prevItem.setAttribute(\"aria-selected\", \"false\");\n                }\n                this.highlightedItem = listItem;\n                this.highlightedItem.classList.add(\"iti__highlight\");\n                this.highlightedItem.setAttribute(\"aria-selected\", \"true\");\n                this.selectedFlag.setAttribute(\"aria-activedescendant\", listItem.getAttribute(\"id\"));\n                if (this.options.countrySearch) {\n                    this.searchInput.setAttribute(\"aria-activedescendant\", listItem.getAttribute(\"id\"));\n                }\n                if (shouldFocus) {\n                    this.highlightedItem.focus();\n                }\n            }\n            // find the country data for the given iso2 code\n            // the ignoreOnlyCountriesOption is only used during init() while parsing the onlyCountries array\n            _getCountryData(iso2, allowFail) {\n                for (let i = 0; i < this.countries.length; i++) {\n                    if (this.countries[i].iso2 === iso2) {\n                        return this.countries[i];\n                    }\n                }\n                if (allowFail) {\n                    return null;\n                }\n                throw new Error(`No country data for '${iso2}'`);\n            }\n            // update the selected flag, dial code (if showSelectedDialCode), placeholder, title, and active list item\n            // Note: called from _setInitialState, _updateFlagFromNumber, _selectListItem, setCountry\n            _setCountry(iso2) {\n                const {\n                    allowDropdown,\n                    showSelectedDialCode,\n                    showFlags,\n                    countrySearch,\n                    i18n\n                } = this.options;\n                const prevCountry = this.selectedCountryData.iso2 ? this.selectedCountryData : {};\n                // do this first as it will throw an error and stop if iso2 is invalid\n                this.selectedCountryData = iso2 ? this._getCountryData(iso2, false) : {};\n                // update the defaultCountry - we only need the iso2 from now on, so just store that\n                if (this.selectedCountryData.iso2) {\n                    this.defaultCountry = this.selectedCountryData.iso2;\n                }\n                // update the flag class and the a11y text\n                if (this.selectedFlagInner) {\n                    let flagClass = \"\";\n                    let a11yText = \"\";\n                    if (iso2) {\n                        if (showFlags) {\n                            flagClass = `iti__flag iti__${iso2}`;\n                            a11yText = `${this.selectedCountryData.name} +${this.selectedCountryData.dialCode}`;\n                        }\n                        // if showFlags disabled and showSelectedDialCode is enabled, we dont show a flag or have any a11y text, as the displayed dial code is enough\n                    } else {\n                        flagClass = \"iti__flag iti__globe\";\n                        a11yText = i18n.noCountrySelected || \"No country selected\";\n                    }\n                    this.selectedFlagInner.className = flagClass;\n                    this.selectedFlagA11yText.textContent = a11yText;\n                }\n                this._setSelectedCountryFlagTitleAttribute(iso2, showSelectedDialCode);\n                // update the selected dial code\n                if (showSelectedDialCode) {\n                    const dialCode = this.selectedCountryData.dialCode ? `+${this.selectedCountryData.dialCode}` : \"\";\n                    this.selectedDialCode.innerHTML = dialCode;\n                    // offsetWidth is zero if input is in a hidden container during initialisation\n                    const selectedFlagWidth = this.selectedFlag.offsetWidth || this._getHiddenSelectedFlagWidth();\n                    // add 6px of padding after the grey selected-dial-code box, as this is what we use in the css\n                    if (this.isRTL) {\n                        this.telInput.style.paddingRight = `${selectedFlagWidth + 6}px`;\n                    } else {\n                        this.telInput.style.paddingLeft = `${selectedFlagWidth + 6}px`;\n                    }\n                }\n                // and the input's placeholder\n                this._updatePlaceholder();\n                // update the maximum valid number length\n                this._updateMaxLength();\n                // update the active list item (only if country search disabled, as country search doesn't store the active item)\n                if (allowDropdown && !countrySearch) {\n                    const prevItem = this.activeItem;\n                    if (prevItem) {\n                        prevItem.classList.remove(\"iti__active\");\n                        prevItem.setAttribute(\"aria-selected\", \"false\");\n                    }\n                    if (iso2) {\n                        // check if there is a preferred item first, else fall back to standard\n                        const nextItem = this.countryList.querySelector(`#iti-${this.id}__item-${iso2}-preferred`) || this.countryList.querySelector(`#iti-${this.id}__item-${iso2}`);\n                        nextItem.setAttribute(\"aria-selected\", \"true\");\n                        nextItem.classList.add(\"iti__active\");\n                        this.activeItem = nextItem;\n                    }\n                }\n                // return if the flag has changed or not\n                return prevCountry.iso2 !== iso2;\n            }\n            // update the maximum valid number length for the currently selected country\n            _updateMaxLength() {\n                if (this.options.strictMode && window.intlTelInputUtils) {\n                    if (this.selectedCountryData.iso2) {\n                        const numberType = intlTelInputUtils.numberType[this.options.placeholderNumberType];\n                        let exampleNumber = intlTelInputUtils.getExampleNumber(this.selectedCountryData.iso2, null, numberType, true);\n                        // see if adding more digits is still valid to get the true maximum valid length\n                        let validNumber = exampleNumber;\n                        while (intlTelInputUtils.isPossibleNumber(exampleNumber, this.selectedCountryData.iso2)) {\n                            validNumber = exampleNumber;\n                            exampleNumber += \"0\";\n                        }\n                        const coreNumber = intlTelInputUtils.getCoreNumber(validNumber, this.selectedCountryData.iso2);\n                        this.maxCoreNumberLength = coreNumber.length;\n                    } else {\n                        this.maxCoreNumberLength = null;\n                    }\n                }\n            }\n            _setSelectedCountryFlagTitleAttribute(iso2, showSelectedDialCode) {\n                if (!this.selectedFlag) {\n                    return;\n                }\n                let title;\n                if (iso2 && !showSelectedDialCode) {\n                    title = `${this.selectedCountryData.name}: +${this.selectedCountryData.dialCode}`;\n                } else if (iso2) {\n                    // For screen reader output, we don't want to include the dial code in the reader output twice\n                    // so just use the selected country name here:\n                    title = this.selectedCountryData.name;\n                } else {\n                    title = \"Unknown\";\n                }\n                this.selectedFlag.setAttribute(\"title\", title);\n            }\n            // when the input is in a hidden container during initialisation, we must inject some markup\n            // into the end of the DOM to calculate the correct offsetWidth\n            // NOTE: this is only used when showSelectedDialCode is enabled, so flagsContainer and selectedFlag\n            // will definitely exist\n            _getHiddenSelectedFlagWidth() {\n                // to get the right styling to apply, all we need is a shallow clone of the container,\n                // and then to inject a deep clone of the selectedFlag element\n                const containerClone = this.telInput.parentNode.cloneNode();\n                containerClone.style.visibility = \"hidden\";\n                document.body.appendChild(containerClone);\n                const flagsContainerClone = this.flagsContainer.cloneNode();\n                containerClone.appendChild(flagsContainerClone);\n                const selectedFlagClone = this.selectedFlag.cloneNode(true);\n                flagsContainerClone.appendChild(selectedFlagClone);\n                const width = selectedFlagClone.offsetWidth;\n                containerClone.parentNode.removeChild(containerClone);\n                return width;\n            }\n            // update the input placeholder to an example number from the currently selected country\n            _updatePlaceholder() {\n                const {\n                    autoPlaceholder,\n                    placeholderNumberType,\n                    nationalMode,\n                    customPlaceholder\n                } = this.options;\n                const shouldSetPlaceholder = autoPlaceholder === \"aggressive\" || !this.hadInitialPlaceholder && autoPlaceholder === \"polite\";\n                if (window.intlTelInputUtils && shouldSetPlaceholder) {\n                    const numberType = intlTelInputUtils.numberType[placeholderNumberType];\n                    // note: must set placeholder to empty string if no country selected (globe icon showing)\n                    let placeholder = this.selectedCountryData.iso2 ? intlTelInputUtils.getExampleNumber(this.selectedCountryData.iso2, nationalMode, numberType) : \"\";\n                    placeholder = this._beforeSetNumber(placeholder);\n                    if (typeof customPlaceholder === \"function\") {\n                        placeholder = customPlaceholder(placeholder, this.selectedCountryData);\n                    }\n                    this.telInput.setAttribute(\"placeholder\", placeholder);\n                }\n            }\n            // called when the user selects a list item from the dropdown\n            _selectListItem(listItem) {\n                // update selected flag and active list item\n                const flagChanged = this._setCountry(listItem.getAttribute(\"data-country-code\"));\n                this._closeDropdown();\n                this._updateDialCode(listItem.getAttribute(\"data-dial-code\"));\n                // focus the input\n                this.telInput.focus();\n                if (flagChanged) {\n                    this._triggerCountryChange();\n                }\n            }\n            // close the dropdown and unbind any listeners\n            _closeDropdown() {\n                this.dropdownContent.classList.add(\"iti__hide\");\n                this.selectedFlag.setAttribute(\"aria-expanded\", \"false\");\n                this.selectedFlag.removeAttribute(\"aria-activedescendant\");\n                if (this.highlightedItem) {\n                    this.highlightedItem.setAttribute(\"aria-selected\", \"false\");\n                }\n                if (this.options.countrySearch) {\n                    this.searchInput.removeAttribute(\"aria-activedescendant\");\n                }\n                // update the arrow\n                this.dropdownArrow.classList.remove(\"iti__arrow--up\");\n                // unbind key events\n                document.removeEventListener(\"keydown\", this._handleKeydownOnDropdown);\n                if (this.options.countrySearch) {\n                    this.searchInput.removeEventListener(\"input\", this._handleSearchChange);\n                }\n                document.documentElement.removeEventListener(\"click\", this._handleClickOffToClose);\n                this.countryList.removeEventListener(\"mouseover\", this._handleMouseoverCountryList);\n                this.countryList.removeEventListener(\"click\", this._handleClickCountryList);\n                // remove menu from container\n                if (this.options.dropdownContainer) {\n                    if (!this.options.useFullscreenPopup) {\n                        window.removeEventListener(\"scroll\", this._handleWindowScroll);\n                    }\n                    if (this.dropdown.parentNode) {\n                        this.dropdown.parentNode.removeChild(this.dropdown);\n                    }\n                }\n                this._trigger(\"close:countrydropdown\");\n            }\n            // check if an element is visible within it's container, else scroll until it is\n            _scrollTo(element, middle) {\n                const container = this.countryList;\n                // windowTop from https://stackoverflow.com/a/14384091/217866\n                const windowTop = document.documentElement.scrollTop;\n                const containerHeight = container.offsetHeight;\n                const containerTop = container.getBoundingClientRect().top + windowTop;\n                const containerBottom = containerTop + containerHeight;\n                const elementHeight = element.offsetHeight;\n                const elementTop = element.getBoundingClientRect().top + windowTop;\n                const elementBottom = elementTop + elementHeight;\n                let newScrollTop = elementTop - containerTop + container.scrollTop;\n                const middleOffset = containerHeight / 2 - elementHeight / 2;\n                if (elementTop < containerTop) {\n                    // scroll up\n                    if (middle) {\n                        newScrollTop -= middleOffset;\n                    }\n                    container.scrollTop = newScrollTop;\n                } else if (elementBottom > containerBottom) {\n                    // scroll down\n                    if (middle) {\n                        newScrollTop += middleOffset;\n                    }\n                    const heightDifference = containerHeight - elementHeight;\n                    container.scrollTop = newScrollTop - heightDifference;\n                }\n            }\n            // replace any existing dial code with the new one\n            // Note: called from _selectListItem and setCountry\n            _updateDialCode(newDialCodeBare) {\n                const inputVal = this.telInput.value;\n                // save having to pass this every time\n                const newDialCode = `+${newDialCodeBare}`;\n                let newNumber;\n                if (inputVal.charAt(0) === \"+\") {\n                    // there's a plus so we're dealing with a replacement\n                    const prevDialCode = this._getDialCode(inputVal);\n                    if (prevDialCode) {\n                        // current number contains a valid dial code, so replace it\n                        newNumber = inputVal.replace(prevDialCode, newDialCode);\n                    } else {\n                        // current number contains an invalid dial code, so ditch it\n                        // (no way to determine where the invalid dial code ends and the rest of the number begins)\n                        newNumber = newDialCode;\n                    }\n                    this.telInput.value = newNumber;\n                }\n            }\n            // try and extract a valid international dial code from a full telephone number\n            // Note: returns the raw string inc plus character and any whitespace/dots etc\n            _getDialCode(number, includeAreaCode) {\n                let dialCode = \"\";\n                // only interested in international numbers (starting with a plus)\n                if (number.charAt(0) === \"+\") {\n                    let numericChars = \"\";\n                    // iterate over chars\n                    for (let i = 0; i < number.length; i++) {\n                        const c = number.charAt(i);\n                        // if char is number (https://stackoverflow.com/a/8935649/217866)\n                        if (!isNaN(parseInt(c, 10))) {\n                            numericChars += c;\n                            // if current numericChars make a valid dial code\n                            if (includeAreaCode) {\n                                if (this.dialCodeToIso2Map[numericChars]) {\n                                    // store the actual raw string (useful for matching later)\n                                    dialCode = number.substr(0, i + 1);\n                                }\n                            } else {\n                                if (this.dialCodes[numericChars]) {\n                                    dialCode = number.substr(0, i + 1);\n                                    // if we're just looking for a dial code, we can break as soon as we find one\n                                    break;\n                                }\n                            }\n                            // stop searching as soon as we can - in this case when we hit max len\n                            if (numericChars.length === this.dialCodeMaxLen) {\n                                break;\n                            }\n                        }\n                    }\n                }\n                return dialCode;\n            }\n            // get the input val, adding the dial code if showSelectedDialCode is enabled\n            _getFullNumber() {\n                const val = this.telInput.value.trim();\n                const {\n                    dialCode\n                } = this.selectedCountryData;\n                let prefix;\n                const numericVal = this._getNumeric(val);\n                if (this.options.showSelectedDialCode && !this.options.nationalMode && val.charAt(0) !== \"+\" && dialCode && numericVal) {\n                    // when using showSelectedDialCode, it is visible so is effectively part of the typed number\n                    prefix = `+${dialCode}`;\n                } else {\n                    prefix = \"\";\n                }\n                return prefix + val;\n            }\n            // remove the dial code if showSelectedDialCode is enabled\n            // also cap the length if the input has a maxlength attribute\n            _beforeSetNumber(fullNumber) {\n                let number = fullNumber;\n                if (this.options.showSelectedDialCode) {\n                    let dialCode = this._getDialCode(number);\n                    // if there is a valid dial code\n                    if (dialCode) {\n                        // in case _getDialCode returned an area code as well\n                        dialCode = `+${this.selectedCountryData.dialCode}`;\n                        // a lot of numbers will have a space separating the dial code and the main number, and\n                        // some NANP numbers will have a hyphen e.g. +1 684-733-1234 - in both cases we want to get\n                        // rid of it\n                        // NOTE: don't just trim all non-numerics as may want to preserve an open parenthesis etc\n                        const start = number[dialCode.length] === \" \" || number[dialCode.length] === \"-\" ? dialCode.length + 1 : dialCode.length;\n                        number = number.substr(start);\n                    }\n                }\n                return this._cap(number);\n            }\n            // trigger the 'countrychange' event\n            _triggerCountryChange() {\n                this._trigger(\"countrychange\");\n            }\n            // format the number as the user types\n            _formatNumberAsYouType() {\n                const val = this._getFullNumber();\n                const result = window.intlTelInputUtils ? intlTelInputUtils.formatNumberAsYouType(val, this.selectedCountryData.iso2) : val;\n                // if showSelectedDialCode and they haven't (re)typed the dial code in the input as well, then remove the dial code\n                const {\n                    dialCode\n                } = this.selectedCountryData;\n                if (this.options.showSelectedDialCode && !this.options.nationalMode && this.telInput.value.charAt(0) !== \"+\" && result.includes(`+${dialCode}`)) {\n                    const afterDialCode = result.split(`+${dialCode}`)[1] || \"\";\n                    return afterDialCode.trim();\n                }\n                return result;\n            }\n            /**************************\n   *  SECRET PUBLIC METHODS\n   **************************/\n            // this is called when the geoip call returns\n            handleAutoCountry() {\n                if (this.options.initialCountry === \"auto\") {\n                    // we must set this even if there is an initial val in the input: in case the initial val is\n                    // invalid and they delete it - they should see their auto country\n                    this.defaultCountry = window.intlTelInputGlobals.autoCountry;\n                    // if there's no initial value in the input, then update the flag\n                    if (!this.telInput.value) {\n                        this.setCountry(this.defaultCountry);\n                    }\n                    this.resolveAutoCountryPromise();\n                }\n            }\n            // this is called when the utils request completes\n            handleUtils() {\n                // if the request was successful\n                if (window.intlTelInputUtils) {\n                    // if there's an initial value in the input, then format it\n                    if (this.telInput.value) {\n                        this._updateValFromNumber(this.telInput.value);\n                    }\n                    if (this.selectedCountryData.iso2) {\n                        this._updatePlaceholder();\n                        this._updateMaxLength();\n                    }\n                }\n                this.resolveUtilsScriptPromise();\n            }\n            /********************\n   *  PUBLIC METHODS\n   ********************/\n            // remove plugin\n            destroy() {\n                if (this.options.allowDropdown) {\n                    // make sure the dropdown is closed (and unbind listeners)\n                    this._closeDropdown();\n                    this.selectedFlag.removeEventListener(\"click\", this._handleClickSelectedFlag);\n                    this.flagsContainer.removeEventListener(\"keydown\", this._handleFlagsContainerKeydown);\n                    // label click hack\n                    const label = this.telInput.closest(\"label\");\n                    if (label) {\n                        label.removeEventListener(\"click\", this._handleLabelClick);\n                    }\n                }\n                // unbind hiddenInput listeners\n                const {\n                    form\n                } = this.telInput;\n                if (this._handleHiddenInputSubmit && form) {\n                    form.removeEventListener(\"submit\", this._handleHiddenInputSubmit);\n                }\n                // unbind key events, and cut/paste events\n                this.telInput.removeEventListener(\"input\", this._handleInputEvent);\n                if (this._handleKeydownEvent) {\n                    this.telInput.removeEventListener(\"keydown\", this._handleKeydownEvent);\n                }\n                // remove attribute of id instance: data-intl-tel-input-id\n                this.telInput.removeAttribute(\"data-intl-tel-input-id\");\n                // remove markup (but leave the original input)\n                const wrapper = this.telInput.parentNode;\n                wrapper.parentNode.insertBefore(this.telInput, wrapper);\n                wrapper.parentNode.removeChild(wrapper);\n                delete window.intlTelInputGlobals.instances[this.id];\n            }\n            // get the extension from the current number\n            getExtension() {\n                if (window.intlTelInputUtils) {\n                    return intlTelInputUtils.getExtension(this._getFullNumber(), this.selectedCountryData.iso2);\n                }\n                return \"\";\n            }\n            // format the number to the given format\n            getNumber(format) {\n                if (window.intlTelInputUtils) {\n                    const {\n                        iso2\n                    } = this.selectedCountryData;\n                    return intlTelInputUtils.formatNumber(this._getFullNumber(), iso2, format);\n                }\n                return \"\";\n            }\n            // get the type of the entered number e.g. landline/mobile\n            getNumberType() {\n                if (window.intlTelInputUtils) {\n                    return intlTelInputUtils.getNumberType(this._getFullNumber(), this.selectedCountryData.iso2);\n                }\n                return -99;\n            }\n            // get the country data for the currently selected flag\n            getSelectedCountryData() {\n                return this.selectedCountryData;\n            }\n            // get the validation error\n            getValidationError() {\n                if (window.intlTelInputUtils) {\n                    const {\n                        iso2\n                    } = this.selectedCountryData;\n                    return intlTelInputUtils.getValidationError(this._getFullNumber(), iso2);\n                }\n                return -99;\n            }\n            // validate the input val - assumes the global function isPossibleNumber (from utilsScript)\n            isValidNumber(mobileOnly = true) {\n                const val = this._getFullNumber();\n                // return false for any alpha chars\n                if (/\\p{L}/u.test(val)) {\n                    return false;\n                }\n                return window.intlTelInputUtils ? intlTelInputUtils.isPossibleNumber(val, this.selectedCountryData.iso2, mobileOnly) : null;\n            }\n            // validate the input val (precise) - assumes the global function isValidNumber (from utilsScript)\n            isValidNumberPrecise() {\n                const val = this._getFullNumber();\n                // return false for any alpha chars\n                if (/\\p{L}/u.test(val)) {\n                    return false;\n                }\n                return window.intlTelInputUtils ? intlTelInputUtils.isValidNumber(val, this.selectedCountryData.iso2) : null;\n            }\n            // update the selected flag, and update the input val accordingly\n            setCountry(iso2) {\n                const iso2Lower = iso2.toLowerCase();\n                // check if already selected\n                if (this.selectedCountryData.iso2 !== iso2Lower) {\n                    this._setCountry(iso2Lower);\n                    this._updateDialCode(this.selectedCountryData.dialCode);\n                    this._triggerCountryChange();\n                }\n            }\n            // set the input value and update the flag\n            setNumber(number) {\n                // we must update the flag first, which updates this.selectedCountryData, which is used for\n                // formatting the number before displaying it\n                const flagChanged = this._updateFlagFromNumber(number);\n                this._updateValFromNumber(number);\n                if (flagChanged) {\n                    this._triggerCountryChange();\n                }\n            }\n            // set the placeholder number typ\n            setPlaceholderNumberType(type) {\n                this.options.placeholderNumberType = type;\n                this._updatePlaceholder();\n            }\n        }\n        /********************\n *  STATIC METHODS\n ********************/\n        // get the country data object\n        intlTelInputGlobals.getCountryData = () => allCountries;\n        // inject a <script> element to load utils.js\n        const injectScript = (path, handleSuccess, handleFailure) => {\n            // inject a new script element into the page\n            const script = document.createElement(\"script\");\n            script.onload = () => {\n                forEachInstance(\"handleUtils\");\n                if (handleSuccess) {\n                    handleSuccess();\n                }\n            };\n            script.onerror = () => {\n                forEachInstance(\"rejectUtilsScriptPromise\");\n                if (handleFailure) {\n                    handleFailure();\n                }\n            };\n            script.className = \"iti-load-utils\";\n            script.async = true;\n            script.src = path;\n            document.body.appendChild(script);\n        };\n        // load the utils script\n        intlTelInputGlobals.loadUtils = path => {\n            // 2 options:\n            // 1) not already started loading (start)\n            // 2) already started loading (do nothing - just wait for the onload callback to fire, which will\n            // trigger handleUtils on all instances, invoking their resolveUtilsScriptPromise functions)\n            if (!window.intlTelInputUtils && !window.intlTelInputGlobals.startedLoadingUtilsScript) {\n                // only do this once\n                window.intlTelInputGlobals.startedLoadingUtilsScript = true;\n                return new Promise((resolve, reject) => injectScript(path, resolve, reject));\n            }\n            return null;\n        };\n        // default options\n        intlTelInputGlobals.defaults = defaults;\n        // version\n        intlTelInputGlobals.version = \"20.3.0\";\n        // convenience wrapper\n        return function(input, options) {\n            var iti = new Iti(input, options);\n            iti._init();\n            input.setAttribute(\"data-intl-tel-input-id\", iti.id);\n            window.intlTelInputGlobals.instances[iti.id] = iti;\n            return iti;\n        };\n    }();\n});", "/* eslint-disable react/forbid-prop-types */\n/* eslint-disable react/jsx-filename-extension */\n/* eslint-disable import/no-extraneous-dependencies */\nimport React, { useRef, useEffect } from 'react';\nimport PropTypes from 'prop-types';\nimport intlTelInput from \"../../build/js/intlTelInput\";\n\nconst IntlTelInput = ({\n  initialValue,\n  onChangeNumber,\n  onChangeCountry,\n  onChangeValidity,\n  onChangeErrorCode,\n  usePreciseValidation,\n  initOptions,\n  className,\n  disabled,\n  onFocus,\n  onBlur,\n  placeholder,\n  inputProps,\n}) => {\n  const inputRef = useRef(null);\n  const itiRef = useRef(null);\n  \n  const update = () => {\n    const num = itiRef.current.getNumber();\n    const countryIso = itiRef.current.getSelectedCountryData().iso2;\n    // note: this number will be in standard E164 format, but any container component can use\n    // intlTelInputUtils.formatNumber() to convert this to another format\n    // as well as intlTelInputUtils.getNumberType() etc. if need be\n    onChangeNumber(num);\n    onChangeCountry(countryIso);\n\n    const isValid = usePreciseValidation ? itiRef.current.isValidNumberPrecise() : itiRef.current.isValidNumber();\n    if (isValid) {\n      onChangeValidity(true);\n      onChangeErrorCode(null);\n    } else {\n      const errorCode = itiRef.current.getValidationError();\n      onChangeValidity(false);\n      onChangeErrorCode(errorCode);\n    }\n  };\n  \n  useEffect(() => {\n    // store a reference to the current input ref, which otherwise is already lost in the cleanup function\n    const inputRefCurrent = inputRef.current;\n    itiRef.current = intlTelInput(inputRef.current, initOptions);\n    inputRefCurrent.addEventListener(\"countrychange\", update);\n    return () => {\n      inputRefCurrent.removeEventListener(\"countrychange\", update);\n      itiRef.current.destroy();\n    };\n  }, []);\n  \n  return (\n    <input\n      type=\"tel\"\n      ref={inputRef}\n      onInput={update}\n      defaultValue={initialValue}\n      className={className}\n      disabled={disabled}\n      onFocus={onFocus}\n      onBlur={onBlur}\n      placeholder={placeholder}\n      {...inputProps}\n    />\n  );\n};\n\nIntlTelInput.propTypes = {\n  initialValue: PropTypes.string,\n  placeholder: PropTypes.string,\n  onChangeNumber: PropTypes.func,\n  onChangeCountry: PropTypes.func,\n  onChangeValidity: PropTypes.func,\n  onChangeErrorCode: PropTypes.func,\n  usePreciseValidation: PropTypes.bool,\n  initOptions: PropTypes.shape({\n    allowDropdown: PropTypes.bool,\n    autoPlaceholder: PropTypes.string,\n    containerClass: PropTypes.string,\n    countrySearch: PropTypes.bool,\n    customPlaceholder: PropTypes.func,\n    dropdownContainer: PropTypes.node,\n    excludeCountries: PropTypes.arrayOf(PropTypes.string),\n    fixDropdownWidth: PropTypes.bool,\n    formatAsYouType: PropTypes.bool,\n    formatOnDisplay: PropTypes.bool,\n    geoIpLookup: PropTypes.func,\n    hiddenInput: PropTypes.func,\n    i18n: PropTypes.objectOf(PropTypes.string),\n    initialCountry: PropTypes.string,\n    nationalMode: PropTypes.bool,\n    onlyCountries: PropTypes.arrayOf(PropTypes.string),\n    placeholderNumberType: PropTypes.string,\n    preferredCountries: PropTypes.arrayOf(PropTypes.string),\n    showFlags: PropTypes.bool,\n    showSelectedDialCode: PropTypes.bool,\n    useFullscreenPopup: PropTypes.bool,\n    utilsScript: PropTypes.string,\n  }),\n  className: PropTypes.string,\n  disabled: PropTypes.bool,\n  onFocus: PropTypes.func,\n  onBlur: PropTypes.func,\n  inputProps: PropTypes.object,\n};\n\nIntlTelInput.defaultProps = {\n  initialValue: \"\",\n  placeholder: \"\",\n  onChangeNumber: () => {},\n  onChangeCountry: () => {},\n  onChangeValidity: () => {},\n  onChangeErrorCode: () => {},\n  usePreciseValidation: false,\n  initOptions: {},\n  className: \"\",\n  disabled: false,\n  onFocus: () => {},\n  onBlur: () => {},\n  inputProps: {},\n};\n\nexport default IntlTelInput;"],
  "mappings": "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",
  "names": ["require_intlTelInput", "__commonJSMin", "exports", "module", "factory", "undefined", "allCountries", "i", "c", "intlTelInputGlobals", "input", "id", "defaults", "regionlessNanpNumbers", "forEachInstance", "method", "instances", "instance", "Iti", "customOptions", "forceShowFlags", "autoCountryPromise", "resolve", "reject", "utilsScriptPromise", "iso2", "dialCode", "priority", "index", "lowerCaseOnlyCountries", "country", "lowerCaseExcludeCountries", "a", "b", "rootIso2Code", "j", "areaCode", "k", "partialDialCode", "countryData", "name", "attrs", "container", "el", "key", "value", "allowDropdown", "showSelectedDialCode", "showFlags", "containerClass", "hiddenInput", "dropdownContainer", "fixDropdownWidth", "useFullscreenPopup", "countrySearch", "i18n", "parentClass", "wrapper", "extraClasses", "dropdownClasses", "telInputName", "names", "countries", "className", "preferred", "idSuffix", "listItem", "content", "overrideAutoCountry", "attributeValue", "inputValue", "val", "isRegionlessNanp", "initialCountry", "lowerInitialCountry", "e", "label", "iso2Lower", "strictMode", "formatAsYouType", "userOverrideFormatting", "isFormattingChar", "isPaste", "currentCaretPos", "relevantCharsBeforeCaret", "isDeleteForwards", "formattedValue", "newCaretPos", "isInitialPlus", "isNumeric", "isAllowedChar", "fullNumber", "coreNumber", "hasReachedMaxLength", "relevantChars", "prevCaretPos", "count", "number", "max", "numeric", "s", "firstElementChild", "shouldHaveClass", "pos", "windowTop", "inputTop", "dropdownHeight", "dropdownFitsBelow", "dropdownFitsAbove", "positionDropdownAboveInput", "extraTop", "isOpening", "query", "queryTimer", "doFilter", "inputQuery", "keyupTimer", "isReset", "isFirst", "normalisedQuery", "normalisedCountryName", "fullDialCode", "searchText", "next", "doFocus", "useNational", "NATIONAL", "INTERNATIONAL", "format", "plusIndex", "selectedDialCode", "iso2Codes", "alreadySelected", "shouldFocus", "prevItem", "allowFail", "prevCountry", "flagClass", "a11yText", "selectedFlagWidth", "nextItem", "numberType", "exampleNumber", "validNumber", "title", "containerClone", "flagsContainerClone", "selectedFlagClone", "width", "autoPlaceholder", "placeholderNumberType", "nationalMode", "customPlaceholder", "shouldSetPlaceholder", "placeholder", "flagChanged", "element", "middle", "containerHeight", "containerTop", "containerBottom", "elementHeight", "elementTop", "elementBottom", "newScrollTop", "middleOffset", "heightDifference", "newDialCodeBare", "inputVal", "newDialCode", "newNumber", "prevDialCode", "includeAreaCode", "numericChars", "prefix", "numericVal", "start", "result", "form", "mobileOnly", "type", "injectScript", "path", "handleSuccess", "handleFailure", "script", "options", "iti", "import_intlTelInput", "React", "useRef", "useEffect", "PropTypes", "IntlTelInput", "initialValue", "onChangeNumber", "onChangeCountry", "onChangeValidity", "onChangeErrorCode", "usePreciseValidation", "initOptions", "className", "disabled", "onFocus", "onBlur", "placeholder", "inputProps", "inputRef", "itiRef", "update", "num", "countryIso", "errorCode", "inputRefCurrent", "intlTelInput", "IntlTelInput_default"]
}
