{"ast":null,"code":"/*\n * International Telephone Input v20.3.0\n * https://github.com/jackocnr/intl-tel-input.git\n * Licensed under the MIT license\n */\n// wrap in UMD\n(function (factory) {\n  if (typeof module === \"object\" && module.exports) module.exports = factory();else window.intlTelInput = factory();\n})(function (undefined) {\n  \"use strict\";\n\n  return function () {\n    // Array of country objects for the flag dropdown.\n    // Here is the criteria for the plugin to support a given country/territory\n    // - It has an iso2 code: https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2\n    // - It has it's own country calling code (it is not a sub-region of another country): https://en.wikipedia.org/wiki/List_of_country_calling_codes\n    // - It has a flag in the region-flags project: https://github.com/behdad/region-flags/tree/gh-pages/png\n    // - It is supported by libphonenumber (it must be listed on this page): https://github.com/googlei18n/libphonenumber/blob/master/resources/ShortNumberMetadata.xml\n    // Each country array has the following information:\n    // [\n    //    Country name,\n    //    iso2 code,\n    //    International dial code,\n    //    Order (if >1 country with same dial code),\n    //    Area codes\n    // ]\n    var allCountries = [[\"Afghanistan\", \"af\", \"93\"], [\"Albania\", \"al\", \"355\"], [\"Algeria\", \"dz\", \"213\"], [\"American Samoa\", \"as\", \"1\", 5, [\"684\"]], [\"Andorra\", \"ad\", \"376\"], [\"Angola\", \"ao\", \"244\"], [\"Anguilla\", \"ai\", \"1\", 6, [\"264\"]], [\"Antigua & Barbuda\", \"ag\", \"1\", 7, [\"268\"]], [\"Argentina\", \"ar\", \"54\"], [\"Armenia\", \"am\", \"374\"], [\"Aruba\", \"aw\", \"297\"], [\"Ascension Island\", \"ac\", \"247\"], [\"Australia\", \"au\", \"61\", 0], [\"Austria\", \"at\", \"43\"], [\"Azerbaijan\", \"az\", \"994\"], [\"Bahamas\", \"bs\", \"1\", 8, [\"242\"]], [\"Bahrain\", \"bh\", \"973\"], [\"Bangladesh\", \"bd\", \"880\"], [\"Barbados\", \"bb\", \"1\", 9, [\"246\"]], [\"Belarus\", \"by\", \"375\"], [\"Belgium\", \"be\", \"32\"], [\"Belize\", \"bz\", \"501\"], [\"Benin\", \"bj\", \"229\"], [\"Bermuda\", \"bm\", \"1\", 10, [\"441\"]], [\"Bhutan\", \"bt\", \"975\"], [\"Bolivia\", \"bo\", \"591\"], [\"Bosnia & Herzegovina\", \"ba\", \"387\"], [\"Botswana\", \"bw\", \"267\"], [\"Brazil\", \"br\", \"55\"], [\"British Indian Ocean Territory\", \"io\", \"246\"], [\"British Virgin Islands\", \"vg\", \"1\", 11, [\"284\"]], [\"Brunei\", \"bn\", \"673\"], [\"Bulgaria\", \"bg\", \"359\"], [\"Burkina Faso\", \"bf\", \"226\"], [\"Burundi\", \"bi\", \"257\"], [\"Cambodia\", \"kh\", \"855\"], [\"Cameroon\", \"cm\", \"237\"], [\"Canada\", \"ca\", \"1\", 1, [\"204\", \"226\", \"236\", \"249\", \"250\", \"263\", \"289\", \"306\", \"343\", \"354\", \"365\", \"367\", \"368\", \"382\", \"387\", \"403\", \"416\", \"418\", \"428\", \"431\", \"437\", \"438\", \"450\", \"584\", \"468\", \"474\", \"506\", \"514\", \"519\", \"548\", \"579\", \"581\", \"584\", \"587\", \"604\", \"613\", \"639\", \"647\", \"672\", \"683\", \"705\", \"709\", \"742\", \"753\", \"778\", \"780\", \"782\", \"807\", \"819\", \"825\", \"867\", \"873\", \"902\", \"905\"]], [\"Cape Verde\", \"cv\", \"238\"], [\"Caribbean Netherlands\", \"bq\", \"599\", 1, [\"3\", \"4\", \"7\"]], [\"Cayman Islands\", \"ky\", \"1\", 12, [\"345\"]], [\"Central African Republic\", \"cf\", \"236\"], [\"Chad\", \"td\", \"235\"], [\"Chile\", \"cl\", \"56\"], [\"China\", \"cn\", \"86\"], [\"Christmas Island\", \"cx\", \"61\", 2, [\"89164\"]], [\"Cocos (Keeling) Islands\", \"cc\", \"61\", 1, [\"89162\"]], [\"Colombia\", \"co\", \"57\"], [\"Comoros\", \"km\", \"269\"], [\"Congo - Brazzaville\", \"cg\", \"242\"], [\"Congo - Kinshasa\", \"cd\", \"243\"], [\"Cook Islands\", \"ck\", \"682\"], [\"Costa Rica\", \"cr\", \"506\"], [\"Côte d’Ivoire\", \"ci\", \"225\"], [\"Croatia\", \"hr\", \"385\"], [\"Cuba\", \"cu\", \"53\"], [\"Curaçao\", \"cw\", \"599\", 0], [\"Cyprus\", \"cy\", \"357\"], [\"Czech Republic\", \"cz\", \"420\"], [\"Denmark\", \"dk\", \"45\"], [\"Djibouti\", \"dj\", \"253\"], [\"Dominica\", \"dm\", \"1\", 13, [\"767\"]], [\"Dominican Republic\", \"do\", \"1\", 2, [\"809\", \"829\", \"849\"]], [\"Ecuador\", \"ec\", \"593\"], [\"Egypt\", \"eg\", \"20\"], [\"El Salvador\", \"sv\", \"503\"], [\"Equatorial Guinea\", \"gq\", \"240\"], [\"Eritrea\", \"er\", \"291\"], [\"Estonia\", \"ee\", \"372\"], [\"Eswatini\", \"sz\", \"268\"], [\"Ethiopia\", \"et\", \"251\"], [\"Falkland Islands\", \"fk\", \"500\"], [\"Faroe Islands\", \"fo\", \"298\"], [\"Fiji\", \"fj\", \"679\"], [\"Finland\", \"fi\", \"358\", 0], [\"France\", \"fr\", \"33\"], [\"French Guiana\", \"gf\", \"594\"], [\"French Polynesia\", \"pf\", \"689\"], [\"Gabon\", \"ga\", \"241\"], [\"Gambia\", \"gm\", \"220\"], [\"Georgia\", \"ge\", \"995\"], [\"Germany\", \"de\", \"49\"], [\"Ghana\", \"gh\", \"233\"], [\"Gibraltar\", \"gi\", \"350\"], [\"Greece\", \"gr\", \"30\"], [\"Greenland\", \"gl\", \"299\"], [\"Grenada\", \"gd\", \"1\", 14, [\"473\"]], [\"Guadeloupe\", \"gp\", \"590\", 0], [\"Guam\", \"gu\", \"1\", 15, [\"671\"]], [\"Guatemala\", \"gt\", \"502\"], [\"Guernsey\", \"gg\", \"44\", 1, [\"1481\", \"7781\", \"7839\", \"7911\"]], [\"Guinea\", \"gn\", \"224\"], [\"Guinea-Bissau\", \"gw\", \"245\"], [\"Guyana\", \"gy\", \"592\"], [\"Haiti\", \"ht\", \"509\"], [\"Honduras\", \"hn\", \"504\"], [\"Hong Kong\", \"hk\", \"852\"], [\"Hungary\", \"hu\", \"36\"], [\"Iceland\", \"is\", \"354\"], [\"India\", \"in\", \"91\"], [\"Indonesia\", \"id\", \"62\"], [\"Iran\", \"ir\", \"98\"], [\"Iraq\", \"iq\", \"964\"], [\"Ireland\", \"ie\", \"353\"], [\"Isle of Man\", \"im\", \"44\", 2, [\"1624\", \"74576\", \"7524\", \"7924\", \"7624\"]], [\"Israel\", \"il\", \"972\"], [\"Italy\", \"it\", \"39\", 0], [\"Jamaica\", \"jm\", \"1\", 4, [\"876\", \"658\"]], [\"Japan\", \"jp\", \"81\"], [\"Jersey\", \"je\", \"44\", 3, [\"1534\", \"7509\", \"7700\", \"7797\", \"7829\", \"7937\"]], [\"Jordan\", \"jo\", \"962\"], [\"Kazakhstan\", \"kz\", \"7\", 1, [\"33\", \"7\"]], [\"Kenya\", \"ke\", \"254\"], [\"Kiribati\", \"ki\", \"686\"], [\"Kosovo\", \"xk\", \"383\"], [\"Kuwait\", \"kw\", \"965\"], [\"Kyrgyzstan\", \"kg\", \"996\"], [\"Laos\", \"la\", \"856\"], [\"Latvia\", \"lv\", \"371\"], [\"Lebanon\", \"lb\", \"961\"], [\"Lesotho\", \"ls\", \"266\"], [\"Liberia\", \"lr\", \"231\"], [\"Libya\", \"ly\", \"218\"], [\"Liechtenstein\", \"li\", \"423\"], [\"Lithuania\", \"lt\", \"370\"], [\"Luxembourg\", \"lu\", \"352\"], [\"Macau\", \"mo\", \"853\"], [\"Madagascar\", \"mg\", \"261\"], [\"Malawi\", \"mw\", \"265\"], [\"Malaysia\", \"my\", \"60\"], [\"Maldives\", \"mv\", \"960\"], [\"Mali\", \"ml\", \"223\"], [\"Malta\", \"mt\", \"356\"], [\"Marshall Islands\", \"mh\", \"692\"], [\"Martinique\", \"mq\", \"596\"], [\"Mauritania\", \"mr\", \"222\"], [\"Mauritius\", \"mu\", \"230\"], [\"Mayotte\", \"yt\", \"262\", 1, [\"269\", \"639\"]], [\"Mexico\", \"mx\", \"52\"], [\"Micronesia\", \"fm\", \"691\"], [\"Moldova\", \"md\", \"373\"], [\"Monaco\", \"mc\", \"377\"], [\"Mongolia\", \"mn\", \"976\"], [\"Montenegro\", \"me\", \"382\"], [\"Montserrat\", \"ms\", \"1\", 16, [\"664\"]], [\"Morocco\", \"ma\", \"212\", 0], [\"Mozambique\", \"mz\", \"258\"], [\"Myanmar (Burma)\", \"mm\", \"95\"], [\"Namibia\", \"na\", \"264\"], [\"Nauru\", \"nr\", \"674\"], [\"Nepal\", \"np\", \"977\"], [\"Netherlands\", \"nl\", \"31\"], [\"New Caledonia\", \"nc\", \"687\"], [\"New Zealand\", \"nz\", \"64\"], [\"Nicaragua\", \"ni\", \"505\"], [\"Niger\", \"ne\", \"227\"], [\"Nigeria\", \"ng\", \"234\"], [\"Niue\", \"nu\", \"683\"], [\"Norfolk Island\", \"nf\", \"672\"], [\"North Korea\", \"kp\", \"850\"], [\"North Macedonia\", \"mk\", \"389\"], [\"Northern Mariana Islands\", \"mp\", \"1\", 17, [\"670\"]], [\"Norway\", \"no\", \"47\", 0], [\"Oman\", \"om\", \"968\"], [\"Pakistan\", \"pk\", \"92\"], [\"Palau\", \"pw\", \"680\"], [\"Palestine\", \"ps\", \"970\"], [\"Panama\", \"pa\", \"507\"], [\"Papua New Guinea\", \"pg\", \"675\"], [\"Paraguay\", \"py\", \"595\"], [\"Peru\", \"pe\", \"51\"], [\"Philippines\", \"ph\", \"63\"], [\"Poland\", \"pl\", \"48\"], [\"Portugal\", \"pt\", \"351\"], [\"Puerto Rico\", \"pr\", \"1\", 3, [\"787\", \"939\"]], [\"Qatar\", \"qa\", \"974\"], [\"Réunion\", \"re\", \"262\", 0], [\"Romania\", \"ro\", \"40\"], [\"Russia\", \"ru\", \"7\", 0], [\"Rwanda\", \"rw\", \"250\"], [\"Samoa\", \"ws\", \"685\"], [\"San Marino\", \"sm\", \"378\"], [\"São Tomé & Príncipe\", \"st\", \"239\"], [\"Saudi Arabia\", \"sa\", \"966\"], [\"Senegal\", \"sn\", \"221\"], [\"Serbia\", \"rs\", \"381\"], [\"Seychelles\", \"sc\", \"248\"], [\"Sierra Leone\", \"sl\", \"232\"], [\"Singapore\", \"sg\", \"65\"], [\"Sint Maarten\", \"sx\", \"1\", 21, [\"721\"]], [\"Slovakia\", \"sk\", \"421\"], [\"Slovenia\", \"si\", \"386\"], [\"Solomon Islands\", \"sb\", \"677\"], [\"Somalia\", \"so\", \"252\"], [\"South Africa\", \"za\", \"27\"], [\"South Korea\", \"kr\", \"82\"], [\"South Sudan\", \"ss\", \"211\"], [\"Spain\", \"es\", \"34\"], [\"Sri Lanka\", \"lk\", \"94\"], [\"St Barthélemy\", \"bl\", \"590\", 1], [\"St Helena\", \"sh\", \"290\"], [\"St Kitts & Nevis\", \"kn\", \"1\", 18, [\"869\"]], [\"St Lucia\", \"lc\", \"1\", 19, [\"758\"]], [\"St Martin\", \"mf\", \"590\", 2], [\"St Pierre & Miquelon\", \"pm\", \"508\"], [\"St Vincent & Grenadines\", \"vc\", \"1\", 20, [\"784\"]], [\"Sudan\", \"sd\", \"249\"], [\"Suriname\", \"sr\", \"597\"], [\"Svalbard & Jan Mayen\", \"sj\", \"47\", 1, [\"79\"]], [\"Sweden\", \"se\", \"46\"], [\"Switzerland\", \"ch\", \"41\"], [\"Syria\", \"sy\", \"963\"], [\"Taiwan\", \"tw\", \"886\"], [\"Tajikistan\", \"tj\", \"992\"], [\"Tanzania\", \"tz\", \"255\"], [\"Thailand\", \"th\", \"66\"], [\"Timor-Leste\", \"tl\", \"670\"], [\"Togo\", \"tg\", \"228\"], [\"Tokelau\", \"tk\", \"690\"], [\"Tonga\", \"to\", \"676\"], [\"Trinidad & Tobago\", \"tt\", \"1\", 22, [\"868\"]], [\"Tunisia\", \"tn\", \"216\"], [\"Turkey\", \"tr\", \"90\"], [\"Turkmenistan\", \"tm\", \"993\"], [\"Turks & Caicos Islands\", \"tc\", \"1\", 23, [\"649\"]], [\"Tuvalu\", \"tv\", \"688\"], [\"Uganda\", \"ug\", \"256\"], [\"Ukraine\", \"ua\", \"380\"], [\"United Arab Emirates\", \"ae\", \"971\"], [\"United Kingdom\", \"gb\", \"44\", 0], [\"United States\", \"us\", \"1\", 0], [\"Uruguay\", \"uy\", \"598\"], [\"US Virgin Islands\", \"vi\", \"1\", 24, [\"340\"]], [\"Uzbekistan\", \"uz\", \"998\"], [\"Vanuatu\", \"vu\", \"678\"], [\"Vatican City\", \"va\", \"39\", 1, [\"06698\"]], [\"Venezuela\", \"ve\", \"58\"], [\"Vietnam\", \"vn\", \"84\"], [\"Wallis & Futuna\", \"wf\", \"681\"], [\"Western Sahara\", \"eh\", \"212\", 1, [\"5288\", \"5289\"]], [\"Yemen\", \"ye\", \"967\"], [\"Zambia\", \"zm\", \"260\"], [\"Zimbabwe\", \"zw\", \"263\"], [\"Åland Islands\", \"ax\", \"358\", 1, [\"18\"]]];\n    // loop over all of the countries above, restructuring the data to be objects with named keys\n    for (var i = 0; i < allCountries.length; i++) {\n      var c = allCountries[i];\n      allCountries[i] = {\n        name: c[0],\n        iso2: c[1],\n        dialCode: c[2],\n        priority: c[3] || 0,\n        areaCodes: c[4] || null,\n        nodeById: {}\n      };\n    }\n    const intlTelInputGlobals = {\n      getInstance: input => {\n        const id = input.getAttribute(\"data-intl-tel-input-id\");\n        return window.intlTelInputGlobals.instances[id];\n      },\n      instances: {},\n      // using a global like this allows us to mock it in the tests\n      documentReady: () => document.readyState === \"complete\"\n    };\n    if (typeof window === \"object\") {\n      window.intlTelInputGlobals = intlTelInputGlobals;\n    }\n    // these vars persist through all instances of the plugin\n    let id = 0;\n    const defaults = {\n      // whether or not to allow the dropdown\n      allowDropdown: true,\n      // add a placeholder in the input with an example number for the selected country\n      autoPlaceholder: \"polite\",\n      // add a country search input at the top of the dropdown\n      countrySearch: true,\n      // modify the parentClass\n      containerClass: \"\",\n      // modify the auto placeholder\n      customPlaceholder: null,\n      // append menu to specified element\n      dropdownContainer: null,\n      // don't display these countries\n      excludeCountries: [],\n      // fix the dropdown width to the input width (rather than being as wide as the longest country name)\n      fixDropdownWidth: true,\n      // format the number as the user types\n      formatAsYouType: true,\n      // format the input value during initialisation and on setNumber\n      formatOnDisplay: true,\n      // geoIp lookup function\n      geoIpLookup: null,\n      // inject a hidden input with the name returned from this function, and on submit, populate it with the result of getNumber\n      hiddenInput: null,\n      // internationalise the plugin text e.g. search input placeholder, country names\n      i18n: {},\n      // initial country\n      initialCountry: \"\",\n      // national vs international formatting for numbers e.g. placeholders and displaying existing numbers\n      nationalMode: true,\n      // display only these countries\n      onlyCountries: [],\n      // number type to use for placeholders\n      placeholderNumberType: \"MOBILE\",\n      // the countries at the top of the list\n      preferredCountries: [],\n      // option to hide the flags - must be used with showSelectedDialCode, or allowDropdown=false\n      showFlags: true,\n      // display the international dial code next to the selected flag\n      showSelectedDialCode: false,\n      // only allow certain chars e.g. a plus followed by numeric digits, and cap at max valid length\n      strictMode: false,\n      // use full screen popup instead of dropdown for country list\n      useFullscreenPopup: typeof navigator !== \"undefined\" && typeof window !== \"undefined\" ?\n      // we cannot just test screen size as some smartphones/website meta tags will report desktop\n      // resolutions\n      // Note: to target Android Mobiles (and not Tablets), we must find 'Android' and 'Mobile'\n      /Android.+Mobile|webOS|iPhone|iPod|BlackBerry|IEMobile|Opera Mini/i.test(navigator.userAgent) || window.innerWidth <= 500 : false,\n      // specify the path to the libphonenumber script to enable validation/formatting\n      utilsScript: \"\"\n    };\n    // https://en.wikipedia.org/wiki/List_of_North_American_Numbering_Plan_area_codes#Non-geographic_area_codes\n    const regionlessNanpNumbers = [\"800\", \"822\", \"833\", \"844\", \"855\", \"866\", \"877\", \"880\", \"881\", \"882\", \"883\", \"884\", \"885\", \"886\", \"887\", \"888\", \"889\"];\n    // run a method on each instance of the plugin\n    const forEachInstance = method => {\n      const {\n        instances\n      } = window.intlTelInputGlobals;\n      Object.values(instances).forEach(instance => instance[method]());\n    };\n    // this is our plugin class that we will create an instance of\n    // eslint-disable-next-line no-unused-vars\n    class Iti {\n      constructor(input, customOptions = {}) {\n        this.id = id++;\n        this.telInput = input;\n        this.activeItem = null;\n        this.highlightedItem = null;\n        // process specified options / defaults\n        this.options = Object.assign({}, defaults, customOptions);\n        this.hadInitialPlaceholder = Boolean(input.getAttribute(\"placeholder\"));\n      }\n      _init() {\n        // if showing fullscreen popup, do not fix the width\n        if (this.options.useFullscreenPopup) {\n          this.options.fixDropdownWidth = false;\n        }\n        // when search enabled, we must fix the width else it would change with different results\n        if (this.options.countrySearch && !this.options.useFullscreenPopup) {\n          this.options.fixDropdownWidth = true;\n        }\n        // force showFlags=true if there's a dropdown and we're not displaying the dial code,\n        // as otherwise you just have a down arrow on it's own which doesn't make sense\n        const forceShowFlags = this.options.allowDropdown && !this.options.showSelectedDialCode;\n        if (!this.options.showFlags && forceShowFlags) {\n          this.options.showFlags = true;\n        }\n        // on mobile, we want a full screen dropdown, so we must append it to the body\n        if (this.options.useFullscreenPopup && !this.options.dropdownContainer) {\n          this.options.dropdownContainer = document.body;\n        }\n        // check if input has one parent with RTL\n        this.isRTL = !!this.telInput.closest(\"[dir=rtl]\");\n        // these promises get resolved when their individual requests complete\n        // this way the dev can do something like iti.promise.then(...) to know when all requests are\n        // complete\n        const autoCountryPromise = new Promise((resolve, reject) => {\n          this.resolveAutoCountryPromise = resolve;\n          this.rejectAutoCountryPromise = reject;\n        });\n        const utilsScriptPromise = new Promise((resolve, reject) => {\n          this.resolveUtilsScriptPromise = resolve;\n          this.rejectUtilsScriptPromise = reject;\n        });\n        this.promise = Promise.all([autoCountryPromise, utilsScriptPromise]);\n        // in various situations there could be no country selected initially, but we need to be able\n        // to assume this variable exists\n        this.selectedCountryData = {};\n        // process all the data: onlyCountries, excludeCountries, preferredCountries etc\n        this._processCountryData();\n        // generate the markup\n        this._generateMarkup();\n        // set the initial state of the input value and the selected flag\n        this._setInitialState();\n        // start all of the event listeners: input keydown, selectedFlag click\n        this._initListeners();\n        // utils script, and auto country\n        this._initRequests();\n      }\n      /********************\n      *  PRIVATE METHODS\n      ********************/\n      // prepare all of the country data, including onlyCountries, excludeCountries and\n      // preferredCountries options\n      _processCountryData() {\n        // process onlyCountries or excludeCountries array if present\n        this._processAllCountries();\n        // generate this.dialCodes and this.dialCodeToIso2Map\n        this._processDialCodes();\n        // process the preferredCountries\n        this._processPreferredCountries();\n        // translate country names according to i18n option\n        this._translateCountryNames();\n        // sort countries by name\n        if (this.options.onlyCountries.length || this.options.i18n) {\n          this.countries.sort(this._countryNameSort);\n        }\n      }\n      // add a dial code to this.dialCodeToIso2Map\n      _addToDialCodeMap(iso2, dialCode, priority) {\n        if (dialCode.length > this.dialCodeMaxLen) {\n          this.dialCodeMaxLen = dialCode.length;\n        }\n        if (!this.dialCodeToIso2Map.hasOwnProperty(dialCode)) {\n          this.dialCodeToIso2Map[dialCode] = [];\n        }\n        // bail if we already have this country for this dialCode\n        for (let i = 0; i < this.dialCodeToIso2Map[dialCode].length; i++) {\n          if (this.dialCodeToIso2Map[dialCode][i] === iso2) {\n            return;\n          }\n        }\n        // check for undefined as 0 is falsy\n        const index = priority !== undefined ? priority : this.dialCodeToIso2Map[dialCode].length;\n        this.dialCodeToIso2Map[dialCode][index] = iso2;\n      }\n      // process onlyCountries or excludeCountries array if present\n      _processAllCountries() {\n        if (this.options.onlyCountries.length) {\n          const lowerCaseOnlyCountries = this.options.onlyCountries.map(country => country.toLowerCase());\n          this.countries = allCountries.filter(country => lowerCaseOnlyCountries.indexOf(country.iso2) > -1);\n        } else if (this.options.excludeCountries.length) {\n          const lowerCaseExcludeCountries = this.options.excludeCountries.map(country => country.toLowerCase());\n          this.countries = allCountries.filter(country => lowerCaseExcludeCountries.indexOf(country.iso2) === -1);\n        } else {\n          this.countries = allCountries;\n        }\n      }\n      // Translate Countries by object literal provided on config\n      _translateCountryNames() {\n        for (let i = 0; i < this.countries.length; i++) {\n          const iso2 = this.countries[i].iso2.toLowerCase();\n          if (this.options.i18n.hasOwnProperty(iso2)) {\n            this.countries[i].name = this.options.i18n[iso2];\n          }\n        }\n      }\n      // sort by country name\n      _countryNameSort(a, b) {\n        if (a.name < b.name) {\n          return -1;\n        }\n        if (a.name > b.name) {\n          return 1;\n        }\n        return 0;\n      }\n      // generate this.dialCodes and this.dialCodeToIso2Map\n      _processDialCodes() {\n        // here we store just dial codes, where the key is the dial code, and the value is true\n        // e.g. { 1: true, 7: true, 20: true, ... }\n        this.dialCodes = {};\n        this.dialCodeMaxLen = 0;\n        // here we map dialCodes (inc both dialCode and dialCode+areaCode) to iso2 codes\n        /* e.g.\n        * {\n        *   1: [ 'us', 'ca', ... ],    # all NANP countries\n        *   12: [ 'us', 'ca', ... ],   # subset of NANP countries\n        *   120: [ 'us', 'ca' ],       # just US and Canada\n        *   1204: [ 'ca' ],            # only Canada\n        *   ...\n        *  }\n        */\n        this.dialCodeToIso2Map = {};\n        // first: add dial codes\n        for (let i = 0; i < this.countries.length; i++) {\n          const c = this.countries[i];\n          if (!this.dialCodes[c.dialCode]) {\n            this.dialCodes[c.dialCode] = true;\n          }\n          this._addToDialCodeMap(c.iso2, c.dialCode, c.priority);\n        }\n        // next: add area codes\n        // this is a second loop over countries, to make sure we have all of the \"root\" countries\n        // already in the map, so that we can access them, as each time we add an area code substring\n        // to the map, we also need to include the \"root\" country's code, as that also matches\n        for (let i = 0; i < this.countries.length; i++) {\n          const c = this.countries[i];\n          // area codes\n          if (c.areaCodes) {\n            const rootIso2Code = this.dialCodeToIso2Map[c.dialCode][0];\n            // for each area code\n            for (let j = 0; j < c.areaCodes.length; j++) {\n              const areaCode = c.areaCodes[j];\n              // for each digit in the area code to add all partial matches as well\n              for (let k = 1; k < areaCode.length; k++) {\n                const partialDialCode = c.dialCode + areaCode.substr(0, k);\n                // start with the root country, as that also matches this dial code\n                this._addToDialCodeMap(rootIso2Code, partialDialCode);\n                this._addToDialCodeMap(c.iso2, partialDialCode);\n              }\n              // add the full area code\n              this._addToDialCodeMap(c.iso2, c.dialCode + areaCode);\n            }\n          }\n        }\n      }\n      // process preferred countries - iterate through the preferences, fetching the country data for\n      // each one\n      _processPreferredCountries() {\n        this.preferredCountries = [];\n        for (let i = 0; i < this.options.preferredCountries.length; i++) {\n          const iso2 = this.options.preferredCountries[i].toLowerCase();\n          const countryData = this._getCountryData(iso2, true);\n          if (countryData) {\n            this.preferredCountries.push(countryData);\n          }\n        }\n      }\n      // create a DOM element\n      _createEl(name, attrs, container) {\n        const el = document.createElement(name);\n        if (attrs) {\n          Object.entries(attrs).forEach(([key, value]) => el.setAttribute(key, value));\n        }\n        if (container) {\n          container.appendChild(el);\n        }\n        return el;\n      }\n      // generate all of the markup for the plugin: the selected flag overlay, and the dropdown\n      _generateMarkup() {\n        this.telInput.classList.add(\"iti__tel-input\");\n        // if autocomplete does not exist on the element and its form, then\n        // prevent autocomplete as there's no safe, cross-browser event we can react to, so it can\n        // easily put the plugin in an inconsistent state e.g. the wrong flag selected for the\n        // autocompleted number, which on submit could mean wrong number is saved\n        if (!this.telInput.hasAttribute(\"autocomplete\") && !(this.telInput.form && this.telInput.form.hasAttribute(\"autocomplete\"))) {\n          this.telInput.setAttribute(\"autocomplete\", \"off\");\n        }\n        const {\n          allowDropdown,\n          showSelectedDialCode,\n          showFlags,\n          containerClass,\n          hiddenInput,\n          dropdownContainer,\n          fixDropdownWidth,\n          useFullscreenPopup,\n          countrySearch,\n          i18n\n        } = this.options;\n        // containers (mostly for positioning)\n        let parentClass = \"iti\";\n        if (allowDropdown) {\n          parentClass += \" iti--allow-dropdown\";\n        }\n        if (showSelectedDialCode) {\n          parentClass += \" iti--show-selected-dial-code\";\n        }\n        if (showFlags) {\n          parentClass += \" iti--show-flags\";\n        }\n        if (containerClass) {\n          parentClass += ` ${containerClass}`;\n        }\n        if (!useFullscreenPopup) {\n          parentClass += \" iti--inline-dropdown\";\n        }\n        const wrapper = this._createEl(\"div\", {\n          class: parentClass\n        });\n        this.telInput.parentNode.insertBefore(wrapper, this.telInput);\n        // if we're showing flags or dial codes, we need the flags container etc\n        if (showFlags || showSelectedDialCode) {\n          this.flagsContainer = this._createEl(\"div\", {\n            class: \"iti__flag-container\"\n          }, wrapper);\n          // selected flag (displayed on left of input while allowDropdown is enabled, otherwise to right)\n          // when countrySearch disabled: using Aria tags for \"Select-Only Combobox Example\"\n          // https://www.w3.org/WAI/ARIA/apg/patterns/combobox/examples/combobox-select-only/\n          this.selectedFlag = this._createEl(\"div\", {\n            class: \"iti__selected-flag\",\n            ...(allowDropdown && {\n              role: \"button\",\n              \"aria-expanded\": \"false\",\n              \"aria-label\": this.options.i18n.selectedCountryAriaLabel || \"Selected country\",\n              \"aria-haspopup\": countrySearch ? \"true\" : \"listbox\",\n              \"aria-controls\": countrySearch ? `iti-${this.id}__dropdown-content` : `iti-${this.id}__country-listbox`,\n              ...(countrySearch || {\n                role: \"combobox\"\n              })\n            })\n          }, this.flagsContainer);\n          // we now include the selected flag element even when showFlags is disabled,\n          // as need to show globe icon for showSelectedDialCode empty state\n          this.selectedFlagInner = this._createEl(\"div\", null, this.selectedFlag);\n          this.selectedFlagA11yText = this._createEl(\"span\", {\n            class: \"iti__a11y-text\"\n          }, this.selectedFlagInner);\n        }\n        wrapper.appendChild(this.telInput);\n        if (this.selectedFlag && this.telInput.disabled) {\n          this.selectedFlag.setAttribute(\"aria-disabled\", \"true\");\n        }\n        if (showSelectedDialCode) {\n          this.selectedDialCode = this._createEl(\"div\", {\n            class: \"iti__selected-dial-code\"\n          }, this.selectedFlag);\n        }\n        if (allowDropdown) {\n          if (!this.telInput.disabled) {\n            // make element focusable and tab navigable\n            this.selectedFlag.setAttribute(\"tabindex\", \"0\");\n          }\n          this.dropdownArrow = this._createEl(\"div\", {\n            class: \"iti__arrow\",\n            \"aria-hidden\": \"true\"\n          }, this.selectedFlag);\n          const extraClasses = fixDropdownWidth ? \"\" : \"iti--flexible-dropdown-width\";\n          this.dropdownContent = this._createEl(\"div\", {\n            id: `iti-${this.id}__dropdown-content`,\n            class: `iti__dropdown-content iti__hide ${extraClasses}`\n          });\n          if (countrySearch) {\n            this.searchInput = this._createEl(\"input\", {\n              type: \"text\",\n              class: \"iti__search-input\",\n              placeholder: i18n.searchPlaceholder || \"Search\",\n              role: \"combobox\",\n              \"aria-expanded\": \"true\",\n              \"aria-label\": i18n.searchPlaceholder || \"Search\",\n              \"aria-controls\": `iti-${this.id}__country-listbox`,\n              \"aria-autocomplete\": \"list\",\n              autocomplete: \"off\"\n            }, this.dropdownContent);\n            this.searchResultsA11yText = this._createEl(\"span\", {\n              class: \"iti__a11y-text\"\n            }, this.dropdownContent);\n          }\n          // country list: preferred countries, then divider, then all countries\n          this.countryList = this._createEl(\"ul\", {\n            class: \"iti__country-list\",\n            id: `iti-${this.id}__country-listbox`,\n            role: \"listbox\",\n            \"aria-label\": i18n.countryListAriaLabel || \"List of countries\"\n          }, this.dropdownContent);\n          if (this.preferredCountries.length && !countrySearch) {\n            this._appendListItems(this.preferredCountries, \"iti__preferred\", true);\n            this._createEl(\"li\", {\n              class: \"iti__divider\",\n              \"aria-hidden\": \"true\"\n            }, this.countryList);\n          }\n          this._appendListItems(this.countries, \"iti__standard\");\n          if (countrySearch) {\n            this._updateSearchResultsText();\n          }\n          // create dropdownContainer markup\n          if (dropdownContainer) {\n            let dropdownClasses = \"iti iti--container\";\n            if (useFullscreenPopup) {\n              dropdownClasses += \" iti--fullscreen-popup\";\n            } else {\n              dropdownClasses += \" iti--inline-dropdown\";\n            }\n            if (countrySearch) {\n              dropdownClasses += \" iti--country-search\";\n            }\n            this.dropdown = this._createEl(\"div\", {\n              class: dropdownClasses\n            });\n            this.dropdown.appendChild(this.dropdownContent);\n          } else {\n            this.flagsContainer.appendChild(this.dropdownContent);\n          }\n        }\n        if (hiddenInput) {\n          const telInputName = this.telInput.getAttribute(\"name\");\n          const names = hiddenInput(telInputName);\n          if (names.phone) {\n            // Create hidden input for the full international number\n            this.hiddenInput = this._createEl(\"input\", {\n              type: \"hidden\",\n              name: names.phone\n            });\n            wrapper.appendChild(this.hiddenInput);\n          }\n          if (names.country) {\n            // Create hidden input for the selected country iso2 code\n            this.hiddenInputCountry = this._createEl(\"input\", {\n              type: \"hidden\",\n              name: names.country\n            });\n            wrapper.appendChild(this.hiddenInputCountry);\n          }\n        }\n      }\n      // for each of the passed countries: add a country <li> to the countryList <ul> container\n      _appendListItems(countries, className, preferred) {\n        for (let i = 0; i < countries.length; i++) {\n          const c = countries[i];\n          const idSuffix = preferred ? \"-preferred\" : \"\";\n          const listItem = this._createEl(\"li\", {\n            id: `iti-${this.id}__item-${c.iso2}${idSuffix}`,\n            class: `iti__country ${className}`,\n            tabindex: \"-1\",\n            role: \"option\",\n            \"data-dial-code\": c.dialCode,\n            \"data-country-code\": c.iso2,\n            \"aria-selected\": \"false\"\n          }, this.countryList);\n          // store this for later use e.g. country search filtering\n          c.nodeById[this.id] = listItem;\n          let content = \"\";\n          // add the flag\n          if (this.options.showFlags) {\n            content += `<div class='iti__flag-box'><div class='iti__flag iti__${c.iso2}'></div></div>`;\n          }\n          // and the country name and dial code\n          content += `<span class='iti__country-name'>${c.name}</span>`;\n          content += `<span class='iti__dial-code'>+${c.dialCode}</span>`;\n          listItem.insertAdjacentHTML(\"beforeend\", content);\n        }\n      }\n      // set the initial state of the input value and the selected flag by:\n      // 1. extracting a dial code from the given number\n      // 2. using explicit initialCountry\n      // 3. picking the first preferred country\n      // 4. picking the first country\n      _setInitialState(overrideAutoCountry = false) {\n        // fix firefox bug: when first load page (with input with value set to number with intl dial\n        // code) and initialising plugin removes the dial code from the input, then refresh page,\n        // and we try to init plugin again but this time on number without dial code so get grey flag\n        const attributeValue = this.telInput.getAttribute(\"value\");\n        const inputValue = this.telInput.value;\n        const useAttribute = attributeValue && attributeValue.charAt(0) === \"+\" && (!inputValue || inputValue.charAt(0) !== \"+\");\n        const val = useAttribute ? attributeValue : inputValue;\n        const dialCode = this._getDialCode(val);\n        const isRegionlessNanp = this._isRegionlessNanp(val);\n        const {\n          initialCountry\n        } = this.options;\n        // if we already have a dial code, and it's not a regionlessNanp, we can go ahead and set the\n        // flag, else fall back to the default country\n        if (dialCode && !isRegionlessNanp) {\n          this._updateFlagFromNumber(val);\n        } else if (initialCountry !== \"auto\" || overrideAutoCountry) {\n          const lowerInitialCountry = initialCountry ? initialCountry.toLowerCase() : \"\";\n          const isValidInitialCountry = lowerInitialCountry && this._getCountryData(lowerInitialCountry, true);\n          // see if we should select a flag\n          if (isValidInitialCountry) {\n            this._setCountry(lowerInitialCountry);\n          } else {\n            if (dialCode && isRegionlessNanp) {\n              // has intl dial code, is regionless nanp, and no initialCountry, so default to US\n              this._setCountry(\"us\");\n            } else {\n              // display the empty state (globe icon)\n              this._setCountry();\n            }\n          }\n        }\n        // NOTE: if initialCountry is set to auto, that will be handled separately\n        // format - note this wont be run after _updateDialCode as that's only called if no val\n        if (val) {\n          this._updateValFromNumber(val);\n        }\n      }\n      // initialise the main event listeners: input keyup, and click selected flag\n      _initListeners() {\n        this._initTelInputListeners();\n        if (this.options.allowDropdown) {\n          this._initDropdownListeners();\n        }\n        if ((this.hiddenInput || this.hiddenInputCountry) && this.telInput.form) {\n          this._initHiddenInputListener();\n        }\n      }\n      // update hidden input on form submit\n      _initHiddenInputListener() {\n        this._handleHiddenInputSubmit = () => {\n          if (this.hiddenInput) {\n            this.hiddenInput.value = this.getNumber();\n          }\n          if (this.hiddenInputCountry) {\n            this.hiddenInputCountry.value = this.getSelectedCountryData().iso2;\n          }\n        };\n        this.telInput.form.addEventListener(\"submit\", this._handleHiddenInputSubmit);\n      }\n      // initialise the dropdown listeners\n      _initDropdownListeners() {\n        // hack for input nested inside label (which is valid markup): clicking the selected-flag to\n        // open the dropdown would then automatically trigger a 2nd click on the input which would\n        // close it again\n        this._handleLabelClick = e => {\n          // if the dropdown is closed, then focus the input, else ignore the click\n          if (this.dropdownContent.classList.contains(\"iti__hide\")) {\n            this.telInput.focus();\n          } else {\n            e.preventDefault();\n          }\n        };\n        const label = this.telInput.closest(\"label\");\n        if (label) {\n          label.addEventListener(\"click\", this._handleLabelClick);\n        }\n        // toggle country dropdown on click\n        this._handleClickSelectedFlag = () => {\n          // only intercept this event if we're opening the dropdown\n          // else let it bubble up to the top (\"click-off-to-close\" listener)\n          // we cannot just stopPropagation as it may be needed to close another instance\n          if (this.dropdownContent.classList.contains(\"iti__hide\") && !this.telInput.disabled && !this.telInput.readOnly) {\n            this._openDropdown();\n          }\n        };\n        this.selectedFlag.addEventListener(\"click\", this._handleClickSelectedFlag);\n        // open dropdown if selected flag is focused and they press up/down/space/enter\n        this._handleFlagsContainerKeydown = e => {\n          const isDropdownHidden = this.dropdownContent.classList.contains(\"iti__hide\");\n          if (isDropdownHidden && [\"ArrowUp\", \"ArrowDown\", \" \", \"Enter\"].includes(e.key)) {\n            // prevent form from being submitted if \"ENTER\" was pressed\n            e.preventDefault();\n            // prevent event from being handled again by document\n            e.stopPropagation();\n            this._openDropdown();\n          }\n          // allow navigation from dropdown to input on TAB\n          if (e.key === \"Tab\") {\n            this._closeDropdown();\n          }\n        };\n        this.flagsContainer.addEventListener(\"keydown\", this._handleFlagsContainerKeydown);\n      }\n      // init many requests: utils script / geo ip lookup\n      _initRequests() {\n        // if the user has specified the path to the utils script, fetch it on window.load, else resolve\n        if (this.options.utilsScript && !window.intlTelInputUtils) {\n          // if the plugin is being initialised after the window.load event has already been fired\n          if (window.intlTelInputGlobals.documentReady()) {\n            window.intlTelInputGlobals.loadUtils(this.options.utilsScript);\n          } else {\n            // wait until the load event so we don't block any other requests e.g. the flags image\n            window.addEventListener(\"load\", () => {\n              window.intlTelInputGlobals.loadUtils(this.options.utilsScript);\n            });\n          }\n        } else {\n          this.resolveUtilsScriptPromise();\n        }\n        // dont bother with IP lookup if we already have a selected country\n        if (this.options.initialCountry === \"auto\" && !this.selectedCountryData.iso2) {\n          this._loadAutoCountry();\n        } else {\n          this.resolveAutoCountryPromise();\n        }\n      }\n      // perform the geo ip lookup\n      _loadAutoCountry() {\n        // 3 options:\n        // 1) already loaded (we're done)\n        // 2) not already started loading (start)\n        // 3) already started loading (do nothing - just wait for loading callback to fire)\n        if (window.intlTelInputGlobals.autoCountry) {\n          this.handleAutoCountry();\n        } else if (!window.intlTelInputGlobals.startedLoadingAutoCountry) {\n          // don't do this twice!\n          window.intlTelInputGlobals.startedLoadingAutoCountry = true;\n          if (typeof this.options.geoIpLookup === \"function\") {\n            this.options.geoIpLookup((iso2 = \"\") => {\n              const iso2Lower = iso2.toLowerCase();\n              const isValidIso2 = iso2Lower && this._getCountryData(iso2Lower, true);\n              if (isValidIso2) {\n                window.intlTelInputGlobals.autoCountry = iso2Lower;\n                // tell all instances the auto country is ready\n                // TODO: this should just be the current instances\n                // UPDATE: use setTimeout in case their geoIpLookup function calls this callback straight\n                // away (e.g. if they have already done the geo ip lookup somewhere else). Using\n                // setTimeout means that the current thread of execution will finish before executing\n                // this, which allows the plugin to finish initialising.\n                setTimeout(() => forEachInstance(\"handleAutoCountry\"));\n              } else {\n                this._setInitialState(true);\n                forEachInstance(\"rejectAutoCountryPromise\");\n              }\n            }, () => forEachInstance(\"rejectAutoCountryPromise\"));\n          }\n        }\n      }\n      // initialize the tel input listeners\n      _initTelInputListeners() {\n        const {\n          strictMode,\n          formatAsYouType\n        } = this.options;\n        let userOverrideFormatting = false;\n        // update flag on input event\n        this._handleInputEvent = e => {\n          if (this._updateFlagFromNumber(this.telInput.value)) {\n            this._triggerCountryChange();\n          }\n          // if user types their own formatting char (not a plus or a numeric), or they paste something, then set the override\n          const isFormattingChar = e && e.data && /[^+0-9]/.test(e.data);\n          const isPaste = e && e.inputType === \"insertFromPaste\" && this.telInput.value;\n          if (isFormattingChar || isPaste && !strictMode) {\n            userOverrideFormatting = true;\n          }\n          // if user removes all formatting chars, then reset the override\n          else if (!/[^+0-9]/.test(this.telInput.value)) {\n            userOverrideFormatting = false;\n          }\n          // handle FAYT, unless userOverrideFormatting\n          if (formatAsYouType && !userOverrideFormatting) {\n            // maintain caret position after reformatting\n            const currentCaretPos = this.telInput.selectionStart;\n            const valueBeforeCaret = this.telInput.value.substring(0, currentCaretPos);\n            const relevantCharsBeforeCaret = valueBeforeCaret.replace(/[^+0-9]/g, \"\").length;\n            const isDeleteForwards = e && e.inputType === \"deleteContentForward\";\n            const formattedValue = this._formatNumberAsYouType();\n            const newCaretPos = this._translateCursorPosition(relevantCharsBeforeCaret, formattedValue, currentCaretPos, isDeleteForwards);\n            this.telInput.value = formattedValue;\n            this.telInput.setSelectionRange(newCaretPos, newCaretPos);\n          }\n        };\n        // this handles individual key presses as well as cut/paste events\n        // the advantage of the \"input\" event over \"keyup\" etc is that \"input\" only fires when the value changes,\n        // whereas \"keyup\" fires even for shift key, arrow key presses etc\n        this.telInput.addEventListener(\"input\", this._handleInputEvent);\n        if (strictMode) {\n          this._handleKeydownEvent = e => {\n            // only ignore actual character presses, rather than ctrl, alt, shift, command, arrow keys, delete/backspace, cut/copy/paste etc\n            if (e.key.length === 1 && !e.altKey && !e.ctrlKey && !e.metaKey) {\n              const isInitialPlus = this.telInput.selectionStart === 0 && e.key === \"+\";\n              const isNumeric = /^[0-9]$/.test(e.key);\n              const isAllowedChar = isInitialPlus || isNumeric;\n              const fullNumber = this._getFullNumber();\n              const coreNumber = intlTelInputUtils.getCoreNumber(fullNumber, this.selectedCountryData.iso2);\n              const hasReachedMaxLength = this.maxCoreNumberLength && coreNumber.length >= this.maxCoreNumberLength;\n              if (!isAllowedChar || hasReachedMaxLength) {\n                e.preventDefault();\n              }\n            }\n          };\n          this.telInput.addEventListener(\"keydown\", this._handleKeydownEvent);\n        }\n      }\n      // iterate through the formattedValue until hit the right number of relevant chars\n      _translateCursorPosition(relevantChars, formattedValue, prevCaretPos, isDeleteForwards) {\n        // if the first char is a formatting char, and they backspace delete it:\n        // cursor should stay at the start (pos 0), rather than stick to the first digit (pos 1)\n        if (prevCaretPos === 0 && !isDeleteForwards) {\n          return 0;\n        }\n        let count = 0;\n        for (let i = 0; i < formattedValue.length; i++) {\n          if (/[+0-9]/.test(formattedValue[i])) {\n            count++;\n          }\n          // normal case: stop when you hit the right number of relevant chars\n          // (cursor will be just after the final relevant char)\n          if (count === relevantChars && !isDeleteForwards) {\n            return i + 1;\n          }\n          // spacial case: delete forwards (fn + delete on a mac):\n          // wait until hit one extra relevant char, and put the cursor just before it (after any formatting chars)\n          if (isDeleteForwards && count === relevantChars + 1) {\n            return i;\n          }\n        }\n        return formattedValue.length;\n      }\n      // adhere to the input's maxlength attr\n      _cap(number) {\n        const max = this.telInput.getAttribute(\"maxlength\");\n        return max && number.length > max ? number.substr(0, max) : number;\n      }\n      // clear the input if it just contains a dial code\n      _removeEmptyDialCode() {\n        if (this.telInput.value.charAt(0) === \"+\") {\n          const numeric = this._getNumeric(this.telInput.value);\n          // if just a plus, or if just a dial code\n          if (!numeric || this.selectedCountryData.dialCode === numeric) {\n            this.telInput.value = \"\";\n          }\n        }\n      }\n      // extract the numeric digits from the given string\n      _getNumeric(s) {\n        return s.replace(/\\D/g, \"\");\n      }\n      // trigger a custom event on the input\n      _trigger(name) {\n        const e = new Event(name, {\n          bubbles: true,\n          cancelable: true\n        });\n        this.telInput.dispatchEvent(e);\n      }\n      // open the dropdown\n      _openDropdown() {\n        const {\n          fixDropdownWidth,\n          countrySearch\n        } = this.options;\n        if (fixDropdownWidth) {\n          this.dropdownContent.style.width = `${this.telInput.offsetWidth}px`;\n        }\n        this.dropdownContent.classList.remove(\"iti__hide\");\n        this.selectedFlag.setAttribute(\"aria-expanded\", \"true\");\n        this._setDropdownPosition();\n        // if we have previously selected a country (and countrySearch is disabled), then highlight that item and scroll to it\n        // else highlight the first item and scroll to top (even if countrySearch is disabled e.g. on init, showing globe icon)\n        if (this.activeItem && !countrySearch) {\n          // update highlighting and scroll to active list item\n          this._highlightListItem(this.activeItem, false);\n          this._scrollTo(this.activeItem, true);\n        } else {\n          // start by highlighting the first item in the list\n          const {\n            firstElementChild\n          } = this.countryList;\n          if (firstElementChild) {\n            this._highlightListItem(firstElementChild, false);\n            this.countryList.scrollTop = 0;\n          }\n          if (countrySearch) {\n            this.searchInput.focus();\n          }\n        }\n        // bind all the dropdown-related listeners: mouseover, click, click-off, keydown\n        this._bindDropdownListeners();\n        // update the arrow\n        this.dropdownArrow.classList.add(\"iti__arrow--up\");\n        this._trigger(\"open:countrydropdown\");\n      }\n      // make sure the el has the className or not, depending on the value of shouldHaveClass\n      _toggleClass(el, className, shouldHaveClass) {\n        if (shouldHaveClass && !el.classList.contains(className)) {\n          el.classList.add(className);\n        } else if (!shouldHaveClass && el.classList.contains(className)) {\n          el.classList.remove(className);\n        }\n      }\n      // decide if should position dropdown above or below input (depends on position within viewport, and scroll)\n      _setDropdownPosition() {\n        if (this.options.dropdownContainer) {\n          this.options.dropdownContainer.appendChild(this.dropdown);\n        }\n        if (!this.options.useFullscreenPopup) {\n          const pos = this.telInput.getBoundingClientRect();\n          // windowTop from https://stackoverflow.com/a/14384091/217866\n          const windowTop = document.documentElement.scrollTop;\n          const inputTop = pos.top + windowTop;\n          const dropdownHeight = this.dropdownContent.offsetHeight;\n          // dropdownFitsBelow = (dropdownBottom < windowBottom)\n          const dropdownFitsBelow = inputTop + this.telInput.offsetHeight + dropdownHeight < windowTop + window.innerHeight;\n          const dropdownFitsAbove = inputTop - dropdownHeight > windowTop;\n          // dont allow positioning above when country search enabled as the search box jumps around as you filter countries\n          const positionDropdownAboveInput = !this.options.countrySearch && !dropdownFitsBelow && dropdownFitsAbove;\n          // by default, the dropdown will be below the input. If we want to position it above the\n          // input, we add the dropup class.\n          this._toggleClass(this.dropdownContent, \"iti__dropdown-content--dropup\", positionDropdownAboveInput);\n          // if dropdownContainer is enabled, calculate postion\n          if (this.options.dropdownContainer) {\n            // if we want to position the dropdown below the input, we need to add the input height to the top value\n            const extraTop = positionDropdownAboveInput ? 0 : this.telInput.offsetHeight;\n            // calculate placement\n            this.dropdown.style.top = `${inputTop + extraTop}px`;\n            this.dropdown.style.left = `${pos.left + document.body.scrollLeft}px`;\n            // close menu on window scroll\n            this._handleWindowScroll = () => this._closeDropdown();\n            window.addEventListener(\"scroll\", this._handleWindowScroll);\n          }\n        }\n      }\n      // we only bind dropdown listeners when the dropdown is open\n      _bindDropdownListeners() {\n        // when mouse over a list item, just highlight that one\n        // we add the class \"highlight\", so if they hit \"enter\" we know which one to select\n        this._handleMouseoverCountryList = e => {\n          // handle event delegation, as we're listening for this event on the countryList\n          const listItem = e.target.closest(\".iti__country\");\n          if (listItem) {\n            this._highlightListItem(listItem, false);\n          }\n        };\n        this.countryList.addEventListener(\"mouseover\", this._handleMouseoverCountryList);\n        // listen for country selection\n        this._handleClickCountryList = e => {\n          const listItem = e.target.closest(\".iti__country\");\n          if (listItem) {\n            this._selectListItem(listItem);\n          }\n        };\n        this.countryList.addEventListener(\"click\", this._handleClickCountryList);\n        // click off to close\n        // (except when this initial opening click is bubbling up)\n        // we cannot just stopPropagation as it may be needed to close another instance\n        let isOpening = true;\n        this._handleClickOffToClose = () => {\n          if (!isOpening) {\n            this._closeDropdown();\n          }\n          isOpening = false;\n        };\n        document.documentElement.addEventListener(\"click\", this._handleClickOffToClose);\n        // listen for up/down scrolling, enter to select, or escape to close\n        // use keydown as keypress doesn't fire for non-char keys and we want to catch if they\n        // just hit down and hold it to scroll down (no keyup event).\n        // listen on the document because that's where key events are triggered if no input has focus\n        let query = \"\";\n        let queryTimer = null;\n        this._handleKeydownOnDropdown = e => {\n          // prevent down key from scrolling the whole page,\n          // and enter key from submitting a form etc\n          if ([\"ArrowUp\", \"ArrowDown\", \"Enter\", \"Escape\"].includes(e.key)) {\n            e.preventDefault();\n            e.stopPropagation();\n            // up and down to navigate\n            if (e.key === \"ArrowUp\" || e.key === \"ArrowDown\") {\n              this._handleUpDownKey(e.key);\n            }\n            // enter to select\n            else if (e.key === \"Enter\") {\n              this._handleEnterKey();\n            }\n            // esc to close\n            else if (e.key === \"Escape\") {\n              this._closeDropdown();\n            }\n          }\n          // alpha chars to perform search\n          // regex allows one latin alpha char or space, based on https://stackoverflow.com/a/26900132/217866)\n          if (!this.options.countrySearch && /^[a-zA-ZÀ-ÿа-яА-Я ]$/.test(e.key)) {\n            e.stopPropagation();\n            // jump to countries that start with the query string\n            if (queryTimer) {\n              clearTimeout(queryTimer);\n            }\n            query += e.key.toLowerCase();\n            this._searchForCountry(query);\n            // if the timer hits 1 second, reset the query\n            queryTimer = setTimeout(() => {\n              query = \"\";\n            }, 1e3);\n          }\n        };\n        document.addEventListener(\"keydown\", this._handleKeydownOnDropdown);\n        if (this.options.countrySearch) {\n          const doFilter = () => {\n            const inputQuery = this.searchInput.value.trim();\n            if (inputQuery) {\n              this._filterCountries(inputQuery);\n            } else {\n              this._filterCountries(\"\", true);\n            }\n          };\n          let keyupTimer = null;\n          this._handleSearchChange = () => {\n            // filtering country nodes is expensive (lots of DOM manipulation), so rate limit it\n            if (keyupTimer) {\n              clearTimeout(keyupTimer);\n            }\n            keyupTimer = setTimeout(() => {\n              doFilter();\n              keyupTimer = null;\n            }, 100);\n          };\n          this.searchInput.addEventListener(\"input\", this._handleSearchChange);\n          // stop propagation on search input click, so doesn't trigger click-off-to-close listener\n          this.searchInput.addEventListener(\"click\", e => e.stopPropagation());\n        }\n      }\n      // turns \"Réunion\" into \"Reunion\"\n      // from https://stackoverflow.com/a/37511463\n      _normaliseString(s = \"\") {\n        return s.normalize(\"NFD\").replace(/[\\u0300-\\u036f]/g, \"\").toLowerCase();\n      }\n      _filterCountries(query, isReset = false) {\n        let isFirst = true;\n        this.countryList.innerHTML = \"\";\n        const normalisedQuery = this._normaliseString(query);\n        for (let i = 0; i < this.countries.length; i++) {\n          const c = this.countries[i];\n          const normalisedCountryName = this._normaliseString(c.name);\n          const fullDialCode = `+${c.dialCode}`;\n          if (isReset || normalisedCountryName.includes(normalisedQuery) || fullDialCode.includes(normalisedQuery) || c.iso2.includes(normalisedQuery)) {\n            this.countryList.appendChild(c.nodeById[this.id]);\n            // highlight the first item\n            if (isFirst) {\n              this._highlightListItem(c.nodeById[this.id], false);\n              isFirst = false;\n            }\n          }\n        }\n        // scroll to top (useful if user had previously scrolled down)\n        this.countryList.scrollTop = 0;\n        this._updateSearchResultsText();\n      }\n      // update search results text (for a11y)\n      _updateSearchResultsText() {\n        const {\n          i18n\n        } = this.options;\n        const count = this.countryList.childElementCount;\n        let searchText;\n        if (count === 0) {\n          searchText = i18n.zeroSearchResults || \"No results found\";\n        } else if (count === 1) {\n          searchText = i18n.oneSearchResult || \"1 result found\";\n        } else {\n          // eslint-disable-next-line no-template-curly-in-string\n          searchText = i18n.multipleSearchResults ? i18n.multipleSearchResults.replace(\"${count}\", count) : `${count} results found`;\n        }\n        this.searchResultsA11yText.textContent = searchText;\n      }\n      // highlight the next/prev item in the list (and ensure it is visible)\n      _handleUpDownKey(key) {\n        let next = key === \"ArrowUp\" ? this.highlightedItem.previousElementSibling : this.highlightedItem.nextElementSibling;\n        if (next) {\n          // skip the divider\n          if (next.classList.contains(\"iti__divider\")) {\n            next = key === \"ArrowUp\" ? next.previousElementSibling : next.nextElementSibling;\n          }\n        } else if (this.countryList.childElementCount > 1) {\n          // otherwise, we must be at the end, so loop round again\n          next = key === \"ArrowUp\" ? this.countryList.lastElementChild : this.countryList.firstElementChild;\n        }\n        if (next) {\n          // make sure the next item is visible\n          // (before calling focus(), which can cause the next item to scroll to the middle of the dropdown, which is jarring)\n          this._scrollTo(next, false);\n          // if country search enabled, dont lose focus from the search input on up/down\n          const doFocus = !this.options.countrySearch;\n          this._highlightListItem(next, doFocus);\n        }\n      }\n      // select the currently highlighted item\n      _handleEnterKey() {\n        if (this.highlightedItem) {\n          this._selectListItem(this.highlightedItem);\n        }\n      }\n      // find the first list item whose name starts with the query string\n      _searchForCountry(query) {\n        for (let i = 0; i < this.countries.length; i++) {\n          if (this._startsWith(this.countries[i].name, query)) {\n            const listItem = this.countries[i].nodeById[this.id];\n            // update highlighting and scroll\n            this._highlightListItem(listItem, false);\n            this._scrollTo(listItem, true);\n            break;\n          }\n        }\n      }\n      // check if string a starts with string b\n      _startsWith(a, b) {\n        return a.substr(0, b.length).toLowerCase() === b;\n      }\n      // update the input's value to the given val (format first if possible)\n      // NOTE: this is called from _setInitialState, handleUtils and setNumber\n      _updateValFromNumber(fullNumber) {\n        let number = fullNumber;\n        if (this.options.formatOnDisplay && window.intlTelInputUtils && this.selectedCountryData) {\n          const useNational = this.options.nationalMode || number.charAt(0) !== \"+\" && !this.options.showSelectedDialCode;\n          const {\n            NATIONAL,\n            INTERNATIONAL\n          } = intlTelInputUtils.numberFormat;\n          const format = useNational ? NATIONAL : INTERNATIONAL;\n          number = intlTelInputUtils.formatNumber(number, this.selectedCountryData.iso2, format);\n        }\n        number = this._beforeSetNumber(number);\n        this.telInput.value = number;\n      }\n      // check if need to select a new flag based on the given number\n      // Note: called from _setInitialState, keyup handler, setNumber\n      _updateFlagFromNumber(fullNumber) {\n        const plusIndex = fullNumber.indexOf(\"+\");\n        // if it contains a plus, discard any chars before it e.g. accidental space char.\n        // this keeps the selected country auto-updating correctly, which we want as\n        // libphonenumber's validation/getNumber methods will ignore these chars anyway\n        let number = plusIndex ? fullNumber.substring(plusIndex) : fullNumber;\n        // if we already have US/Canada selected, make sure the number starts\n        // with a +1 so _getDialCode will be able to extract the area code\n        // update: if we dont yet have selectedCountryData, but we're here (trying to update the flag\n        // from the number), that means we're initialising the plugin with a number that already has a\n        // dial code, so fine to ignore this bit\n        const selectedDialCode = this.selectedCountryData.dialCode;\n        const isNanp = selectedDialCode === \"1\";\n        if (number && isNanp && number.charAt(0) !== \"+\") {\n          if (number.charAt(0) !== \"1\") {\n            number = `1${number}`;\n          }\n          number = `+${number}`;\n        }\n        // if showSelectedDialCode enabled, then consider the selected dial code to be part of the number\n        if (this.options.showSelectedDialCode && selectedDialCode && number.charAt(0) !== \"+\") {\n          number = `+${selectedDialCode}${number}`;\n        }\n        // try and extract valid dial code from input\n        const dialCode = this._getDialCode(number, true);\n        const numeric = this._getNumeric(number);\n        let iso2 = null;\n        if (dialCode) {\n          const iso2Codes = this.dialCodeToIso2Map[this._getNumeric(dialCode)];\n          // check if the right country is already selected. this should be false if the number is\n          // longer than the matched dial code because in this case we need to make sure that if\n          // there are multiple country matches, that the first one is selected (note: we could\n          // just check that here, but it requires the same loop that we already have later)\n          const alreadySelected = iso2Codes.indexOf(this.selectedCountryData.iso2) !== -1 && numeric.length <= dialCode.length - 1;\n          const isRegionlessNanpNumber = selectedDialCode === \"1\" && this._isRegionlessNanp(numeric);\n          // only update the flag if:\n          // A) NOT (we currently have a NANP flag selected, and the number is a regionlessNanp)\n          // AND\n          // B) the right country is not already selected\n          if (!isRegionlessNanpNumber && !alreadySelected) {\n            // if using onlyCountries option, iso2Codes[0] may be empty, so we must find the first\n            // non-empty index\n            for (let j = 0; j < iso2Codes.length; j++) {\n              if (iso2Codes[j]) {\n                iso2 = iso2Codes[j];\n                break;\n              }\n            }\n          }\n        } else if (number.charAt(0) === \"+\" && numeric.length) {\n          // invalid dial code, so empty\n          // Note: use getNumeric here because the number has not been formatted yet, so could contain\n          // bad chars\n          iso2 = \"\";\n        } else if ((!number || number === \"+\") && !this.selectedCountryData.iso2) {\n          // if no selected flag, and user either clears the input, or just types a plus, then show default\n          iso2 = this.defaultCountry;\n        }\n        if (iso2 !== null) {\n          return this._setCountry(iso2);\n        }\n        return false;\n      }\n      // check if the given number is a regionless NANP number (expects the number to contain an\n      // international dial code)\n      _isRegionlessNanp(number) {\n        const numeric = this._getNumeric(number);\n        if (numeric.charAt(0) === \"1\") {\n          const areaCode = numeric.substr(1, 3);\n          return regionlessNanpNumbers.indexOf(areaCode) !== -1;\n        }\n        return false;\n      }\n      // remove highlighting from other list items and highlight the given item\n      _highlightListItem(listItem, shouldFocus) {\n        const prevItem = this.highlightedItem;\n        if (prevItem) {\n          prevItem.classList.remove(\"iti__highlight\");\n          prevItem.setAttribute(\"aria-selected\", \"false\");\n        }\n        this.highlightedItem = listItem;\n        this.highlightedItem.classList.add(\"iti__highlight\");\n        this.highlightedItem.setAttribute(\"aria-selected\", \"true\");\n        this.selectedFlag.setAttribute(\"aria-activedescendant\", listItem.getAttribute(\"id\"));\n        if (this.options.countrySearch) {\n          this.searchInput.setAttribute(\"aria-activedescendant\", listItem.getAttribute(\"id\"));\n        }\n        if (shouldFocus) {\n          this.highlightedItem.focus();\n        }\n      }\n      // find the country data for the given iso2 code\n      // the ignoreOnlyCountriesOption is only used during init() while parsing the onlyCountries array\n      _getCountryData(iso2, allowFail) {\n        for (let i = 0; i < this.countries.length; i++) {\n          if (this.countries[i].iso2 === iso2) {\n            return this.countries[i];\n          }\n        }\n        if (allowFail) {\n          return null;\n        }\n        throw new Error(`No country data for '${iso2}'`);\n      }\n      // update the selected flag, dial code (if showSelectedDialCode), placeholder, title, and active list item\n      // Note: called from _setInitialState, _updateFlagFromNumber, _selectListItem, setCountry\n      _setCountry(iso2) {\n        const {\n          allowDropdown,\n          showSelectedDialCode,\n          showFlags,\n          countrySearch,\n          i18n\n        } = this.options;\n        const prevCountry = this.selectedCountryData.iso2 ? this.selectedCountryData : {};\n        // do this first as it will throw an error and stop if iso2 is invalid\n        this.selectedCountryData = iso2 ? this._getCountryData(iso2, false) : {};\n        // update the defaultCountry - we only need the iso2 from now on, so just store that\n        if (this.selectedCountryData.iso2) {\n          this.defaultCountry = this.selectedCountryData.iso2;\n        }\n        // update the flag class and the a11y text\n        if (this.selectedFlagInner) {\n          let flagClass = \"\";\n          let a11yText = \"\";\n          if (iso2) {\n            if (showFlags) {\n              flagClass = `iti__flag iti__${iso2}`;\n              a11yText = `${this.selectedCountryData.name} +${this.selectedCountryData.dialCode}`;\n            }\n            // if showFlags disabled and showSelectedDialCode is enabled, we dont show a flag or have any a11y text, as the displayed dial code is enough\n          } else {\n            flagClass = \"iti__flag iti__globe\";\n            a11yText = i18n.noCountrySelected || \"No country selected\";\n          }\n          this.selectedFlagInner.className = flagClass;\n          this.selectedFlagA11yText.textContent = a11yText;\n        }\n        this._setSelectedCountryFlagTitleAttribute(iso2, showSelectedDialCode);\n        // update the selected dial code\n        if (showSelectedDialCode) {\n          const dialCode = this.selectedCountryData.dialCode ? `+${this.selectedCountryData.dialCode}` : \"\";\n          this.selectedDialCode.innerHTML = dialCode;\n          // offsetWidth is zero if input is in a hidden container during initialisation\n          const selectedFlagWidth = this.selectedFlag.offsetWidth || this._getHiddenSelectedFlagWidth();\n          // add 6px of padding after the grey selected-dial-code box, as this is what we use in the css\n          if (this.isRTL) {\n            this.telInput.style.paddingRight = `${selectedFlagWidth + 6}px`;\n          } else {\n            this.telInput.style.paddingLeft = `${selectedFlagWidth + 6}px`;\n          }\n        }\n        // and the input's placeholder\n        this._updatePlaceholder();\n        // update the maximum valid number length\n        this._updateMaxLength();\n        // update the active list item (only if country search disabled, as country search doesn't store the active item)\n        if (allowDropdown && !countrySearch) {\n          const prevItem = this.activeItem;\n          if (prevItem) {\n            prevItem.classList.remove(\"iti__active\");\n            prevItem.setAttribute(\"aria-selected\", \"false\");\n          }\n          if (iso2) {\n            // check if there is a preferred item first, else fall back to standard\n            const nextItem = this.countryList.querySelector(`#iti-${this.id}__item-${iso2}-preferred`) || this.countryList.querySelector(`#iti-${this.id}__item-${iso2}`);\n            nextItem.setAttribute(\"aria-selected\", \"true\");\n            nextItem.classList.add(\"iti__active\");\n            this.activeItem = nextItem;\n          }\n        }\n        // return if the flag has changed or not\n        return prevCountry.iso2 !== iso2;\n      }\n      // update the maximum valid number length for the currently selected country\n      _updateMaxLength() {\n        if (this.options.strictMode && window.intlTelInputUtils) {\n          if (this.selectedCountryData.iso2) {\n            const numberType = intlTelInputUtils.numberType[this.options.placeholderNumberType];\n            let exampleNumber = intlTelInputUtils.getExampleNumber(this.selectedCountryData.iso2, null, numberType, true);\n            // see if adding more digits is still valid to get the true maximum valid length\n            let validNumber = exampleNumber;\n            while (intlTelInputUtils.isPossibleNumber(exampleNumber, this.selectedCountryData.iso2)) {\n              validNumber = exampleNumber;\n              exampleNumber += \"0\";\n            }\n            const coreNumber = intlTelInputUtils.getCoreNumber(validNumber, this.selectedCountryData.iso2);\n            this.maxCoreNumberLength = coreNumber.length;\n          } else {\n            this.maxCoreNumberLength = null;\n          }\n        }\n      }\n      _setSelectedCountryFlagTitleAttribute(iso2, showSelectedDialCode) {\n        if (!this.selectedFlag) {\n          return;\n        }\n        let title;\n        if (iso2 && !showSelectedDialCode) {\n          title = `${this.selectedCountryData.name}: +${this.selectedCountryData.dialCode}`;\n        } else if (iso2) {\n          // For screen reader output, we don't want to include the dial code in the reader output twice\n          // so just use the selected country name here:\n          title = this.selectedCountryData.name;\n        } else {\n          title = \"Unknown\";\n        }\n        this.selectedFlag.setAttribute(\"title\", title);\n      }\n      // when the input is in a hidden container during initialisation, we must inject some markup\n      // into the end of the DOM to calculate the correct offsetWidth\n      // NOTE: this is only used when showSelectedDialCode is enabled, so flagsContainer and selectedFlag\n      // will definitely exist\n      _getHiddenSelectedFlagWidth() {\n        // to get the right styling to apply, all we need is a shallow clone of the container,\n        // and then to inject a deep clone of the selectedFlag element\n        const containerClone = this.telInput.parentNode.cloneNode();\n        containerClone.style.visibility = \"hidden\";\n        document.body.appendChild(containerClone);\n        const flagsContainerClone = this.flagsContainer.cloneNode();\n        containerClone.appendChild(flagsContainerClone);\n        const selectedFlagClone = this.selectedFlag.cloneNode(true);\n        flagsContainerClone.appendChild(selectedFlagClone);\n        const width = selectedFlagClone.offsetWidth;\n        containerClone.parentNode.removeChild(containerClone);\n        return width;\n      }\n      // update the input placeholder to an example number from the currently selected country\n      _updatePlaceholder() {\n        const {\n          autoPlaceholder,\n          placeholderNumberType,\n          nationalMode,\n          customPlaceholder\n        } = this.options;\n        const shouldSetPlaceholder = autoPlaceholder === \"aggressive\" || !this.hadInitialPlaceholder && autoPlaceholder === \"polite\";\n        if (window.intlTelInputUtils && shouldSetPlaceholder) {\n          const numberType = intlTelInputUtils.numberType[placeholderNumberType];\n          // note: must set placeholder to empty string if no country selected (globe icon showing)\n          let placeholder = this.selectedCountryData.iso2 ? intlTelInputUtils.getExampleNumber(this.selectedCountryData.iso2, nationalMode, numberType) : \"\";\n          placeholder = this._beforeSetNumber(placeholder);\n          if (typeof customPlaceholder === \"function\") {\n            placeholder = customPlaceholder(placeholder, this.selectedCountryData);\n          }\n          this.telInput.setAttribute(\"placeholder\", placeholder);\n        }\n      }\n      // called when the user selects a list item from the dropdown\n      _selectListItem(listItem) {\n        // update selected flag and active list item\n        const flagChanged = this._setCountry(listItem.getAttribute(\"data-country-code\"));\n        this._closeDropdown();\n        this._updateDialCode(listItem.getAttribute(\"data-dial-code\"));\n        // focus the input\n        this.telInput.focus();\n        if (flagChanged) {\n          this._triggerCountryChange();\n        }\n      }\n      // close the dropdown and unbind any listeners\n      _closeDropdown() {\n        this.dropdownContent.classList.add(\"iti__hide\");\n        this.selectedFlag.setAttribute(\"aria-expanded\", \"false\");\n        this.selectedFlag.removeAttribute(\"aria-activedescendant\");\n        if (this.highlightedItem) {\n          this.highlightedItem.setAttribute(\"aria-selected\", \"false\");\n        }\n        if (this.options.countrySearch) {\n          this.searchInput.removeAttribute(\"aria-activedescendant\");\n        }\n        // update the arrow\n        this.dropdownArrow.classList.remove(\"iti__arrow--up\");\n        // unbind key events\n        document.removeEventListener(\"keydown\", this._handleKeydownOnDropdown);\n        if (this.options.countrySearch) {\n          this.searchInput.removeEventListener(\"input\", this._handleSearchChange);\n        }\n        document.documentElement.removeEventListener(\"click\", this._handleClickOffToClose);\n        this.countryList.removeEventListener(\"mouseover\", this._handleMouseoverCountryList);\n        this.countryList.removeEventListener(\"click\", this._handleClickCountryList);\n        // remove menu from container\n        if (this.options.dropdownContainer) {\n          if (!this.options.useFullscreenPopup) {\n            window.removeEventListener(\"scroll\", this._handleWindowScroll);\n          }\n          if (this.dropdown.parentNode) {\n            this.dropdown.parentNode.removeChild(this.dropdown);\n          }\n        }\n        this._trigger(\"close:countrydropdown\");\n      }\n      // check if an element is visible within it's container, else scroll until it is\n      _scrollTo(element, middle) {\n        const container = this.countryList;\n        // windowTop from https://stackoverflow.com/a/14384091/217866\n        const windowTop = document.documentElement.scrollTop;\n        const containerHeight = container.offsetHeight;\n        const containerTop = container.getBoundingClientRect().top + windowTop;\n        const containerBottom = containerTop + containerHeight;\n        const elementHeight = element.offsetHeight;\n        const elementTop = element.getBoundingClientRect().top + windowTop;\n        const elementBottom = elementTop + elementHeight;\n        let newScrollTop = elementTop - containerTop + container.scrollTop;\n        const middleOffset = containerHeight / 2 - elementHeight / 2;\n        if (elementTop < containerTop) {\n          // scroll up\n          if (middle) {\n            newScrollTop -= middleOffset;\n          }\n          container.scrollTop = newScrollTop;\n        } else if (elementBottom > containerBottom) {\n          // scroll down\n          if (middle) {\n            newScrollTop += middleOffset;\n          }\n          const heightDifference = containerHeight - elementHeight;\n          container.scrollTop = newScrollTop - heightDifference;\n        }\n      }\n      // replace any existing dial code with the new one\n      // Note: called from _selectListItem and setCountry\n      _updateDialCode(newDialCodeBare) {\n        const inputVal = this.telInput.value;\n        // save having to pass this every time\n        const newDialCode = `+${newDialCodeBare}`;\n        let newNumber;\n        if (inputVal.charAt(0) === \"+\") {\n          // there's a plus so we're dealing with a replacement\n          const prevDialCode = this._getDialCode(inputVal);\n          if (prevDialCode) {\n            // current number contains a valid dial code, so replace it\n            newNumber = inputVal.replace(prevDialCode, newDialCode);\n          } else {\n            // current number contains an invalid dial code, so ditch it\n            // (no way to determine where the invalid dial code ends and the rest of the number begins)\n            newNumber = newDialCode;\n          }\n          this.telInput.value = newNumber;\n        }\n      }\n      // try and extract a valid international dial code from a full telephone number\n      // Note: returns the raw string inc plus character and any whitespace/dots etc\n      _getDialCode(number, includeAreaCode) {\n        let dialCode = \"\";\n        // only interested in international numbers (starting with a plus)\n        if (number.charAt(0) === \"+\") {\n          let numericChars = \"\";\n          // iterate over chars\n          for (let i = 0; i < number.length; i++) {\n            const c = number.charAt(i);\n            // if char is number (https://stackoverflow.com/a/8935649/217866)\n            if (!isNaN(parseInt(c, 10))) {\n              numericChars += c;\n              // if current numericChars make a valid dial code\n              if (includeAreaCode) {\n                if (this.dialCodeToIso2Map[numericChars]) {\n                  // store the actual raw string (useful for matching later)\n                  dialCode = number.substr(0, i + 1);\n                }\n              } else {\n                if (this.dialCodes[numericChars]) {\n                  dialCode = number.substr(0, i + 1);\n                  // if we're just looking for a dial code, we can break as soon as we find one\n                  break;\n                }\n              }\n              // stop searching as soon as we can - in this case when we hit max len\n              if (numericChars.length === this.dialCodeMaxLen) {\n                break;\n              }\n            }\n          }\n        }\n        return dialCode;\n      }\n      // get the input val, adding the dial code if showSelectedDialCode is enabled\n      _getFullNumber() {\n        const val = this.telInput.value.trim();\n        const {\n          dialCode\n        } = this.selectedCountryData;\n        let prefix;\n        const numericVal = this._getNumeric(val);\n        if (this.options.showSelectedDialCode && !this.options.nationalMode && val.charAt(0) !== \"+\" && dialCode && numericVal) {\n          // when using showSelectedDialCode, it is visible so is effectively part of the typed number\n          prefix = `+${dialCode}`;\n        } else {\n          prefix = \"\";\n        }\n        return prefix + val;\n      }\n      // remove the dial code if showSelectedDialCode is enabled\n      // also cap the length if the input has a maxlength attribute\n      _beforeSetNumber(fullNumber) {\n        let number = fullNumber;\n        if (this.options.showSelectedDialCode) {\n          let dialCode = this._getDialCode(number);\n          // if there is a valid dial code\n          if (dialCode) {\n            // in case _getDialCode returned an area code as well\n            dialCode = `+${this.selectedCountryData.dialCode}`;\n            // a lot of numbers will have a space separating the dial code and the main number, and\n            // some NANP numbers will have a hyphen e.g. +1 684-733-1234 - in both cases we want to get\n            // rid of it\n            // NOTE: don't just trim all non-numerics as may want to preserve an open parenthesis etc\n            const start = number[dialCode.length] === \" \" || number[dialCode.length] === \"-\" ? dialCode.length + 1 : dialCode.length;\n            number = number.substr(start);\n          }\n        }\n        return this._cap(number);\n      }\n      // trigger the 'countrychange' event\n      _triggerCountryChange() {\n        this._trigger(\"countrychange\");\n      }\n      // format the number as the user types\n      _formatNumberAsYouType() {\n        const val = this._getFullNumber();\n        const result = window.intlTelInputUtils ? intlTelInputUtils.formatNumberAsYouType(val, this.selectedCountryData.iso2) : val;\n        // if showSelectedDialCode and they haven't (re)typed the dial code in the input as well, then remove the dial code\n        const {\n          dialCode\n        } = this.selectedCountryData;\n        if (this.options.showSelectedDialCode && !this.options.nationalMode && this.telInput.value.charAt(0) !== \"+\" && result.includes(`+${dialCode}`)) {\n          const afterDialCode = result.split(`+${dialCode}`)[1] || \"\";\n          return afterDialCode.trim();\n        }\n        return result;\n      }\n      /**************************\n      *  SECRET PUBLIC METHODS\n      **************************/\n      // this is called when the geoip call returns\n      handleAutoCountry() {\n        if (this.options.initialCountry === \"auto\") {\n          // we must set this even if there is an initial val in the input: in case the initial val is\n          // invalid and they delete it - they should see their auto country\n          this.defaultCountry = window.intlTelInputGlobals.autoCountry;\n          // if there's no initial value in the input, then update the flag\n          if (!this.telInput.value) {\n            this.setCountry(this.defaultCountry);\n          }\n          this.resolveAutoCountryPromise();\n        }\n      }\n      // this is called when the utils request completes\n      handleUtils() {\n        // if the request was successful\n        if (window.intlTelInputUtils) {\n          // if there's an initial value in the input, then format it\n          if (this.telInput.value) {\n            this._updateValFromNumber(this.telInput.value);\n          }\n          if (this.selectedCountryData.iso2) {\n            this._updatePlaceholder();\n            this._updateMaxLength();\n          }\n        }\n        this.resolveUtilsScriptPromise();\n      }\n      /********************\n      *  PUBLIC METHODS\n      ********************/\n      // remove plugin\n      destroy() {\n        if (this.options.allowDropdown) {\n          // make sure the dropdown is closed (and unbind listeners)\n          this._closeDropdown();\n          this.selectedFlag.removeEventListener(\"click\", this._handleClickSelectedFlag);\n          this.flagsContainer.removeEventListener(\"keydown\", this._handleFlagsContainerKeydown);\n          // label click hack\n          const label = this.telInput.closest(\"label\");\n          if (label) {\n            label.removeEventListener(\"click\", this._handleLabelClick);\n          }\n        }\n        // unbind hiddenInput listeners\n        const {\n          form\n        } = this.telInput;\n        if (this._handleHiddenInputSubmit && form) {\n          form.removeEventListener(\"submit\", this._handleHiddenInputSubmit);\n        }\n        // unbind key events, and cut/paste events\n        this.telInput.removeEventListener(\"input\", this._handleInputEvent);\n        if (this._handleKeydownEvent) {\n          this.telInput.removeEventListener(\"keydown\", this._handleKeydownEvent);\n        }\n        // remove attribute of id instance: data-intl-tel-input-id\n        this.telInput.removeAttribute(\"data-intl-tel-input-id\");\n        // remove markup (but leave the original input)\n        const wrapper = this.telInput.parentNode;\n        wrapper.parentNode.insertBefore(this.telInput, wrapper);\n        wrapper.parentNode.removeChild(wrapper);\n        delete window.intlTelInputGlobals.instances[this.id];\n      }\n      // get the extension from the current number\n      getExtension() {\n        if (window.intlTelInputUtils) {\n          return intlTelInputUtils.getExtension(this._getFullNumber(), this.selectedCountryData.iso2);\n        }\n        return \"\";\n      }\n      // format the number to the given format\n      getNumber(format) {\n        if (window.intlTelInputUtils) {\n          const {\n            iso2\n          } = this.selectedCountryData;\n          return intlTelInputUtils.formatNumber(this._getFullNumber(), iso2, format);\n        }\n        return \"\";\n      }\n      // get the type of the entered number e.g. landline/mobile\n      getNumberType() {\n        if (window.intlTelInputUtils) {\n          return intlTelInputUtils.getNumberType(this._getFullNumber(), this.selectedCountryData.iso2);\n        }\n        return -99;\n      }\n      // get the country data for the currently selected flag\n      getSelectedCountryData() {\n        return this.selectedCountryData;\n      }\n      // get the validation error\n      getValidationError() {\n        if (window.intlTelInputUtils) {\n          const {\n            iso2\n          } = this.selectedCountryData;\n          return intlTelInputUtils.getValidationError(this._getFullNumber(), iso2);\n        }\n        return -99;\n      }\n      // validate the input val - assumes the global function isPossibleNumber (from utilsScript)\n      isValidNumber(mobileOnly = true) {\n        const val = this._getFullNumber();\n        // return false for any alpha chars\n        if (/\\p{L}/u.test(val)) {\n          return false;\n        }\n        return window.intlTelInputUtils ? intlTelInputUtils.isPossibleNumber(val, this.selectedCountryData.iso2, mobileOnly) : null;\n      }\n      // validate the input val (precise) - assumes the global function isValidNumber (from utilsScript)\n      isValidNumberPrecise() {\n        const val = this._getFullNumber();\n        // return false for any alpha chars\n        if (/\\p{L}/u.test(val)) {\n          return false;\n        }\n        return window.intlTelInputUtils ? intlTelInputUtils.isValidNumber(val, this.selectedCountryData.iso2) : null;\n      }\n      // update the selected flag, and update the input val accordingly\n      setCountry(iso2) {\n        const iso2Lower = iso2.toLowerCase();\n        // check if already selected\n        if (this.selectedCountryData.iso2 !== iso2Lower) {\n          this._setCountry(iso2Lower);\n          this._updateDialCode(this.selectedCountryData.dialCode);\n          this._triggerCountryChange();\n        }\n      }\n      // set the input value and update the flag\n      setNumber(number) {\n        // we must update the flag first, which updates this.selectedCountryData, which is used for\n        // formatting the number before displaying it\n        const flagChanged = this._updateFlagFromNumber(number);\n        this._updateValFromNumber(number);\n        if (flagChanged) {\n          this._triggerCountryChange();\n        }\n      }\n      // set the placeholder number typ\n      setPlaceholderNumberType(type) {\n        this.options.placeholderNumberType = type;\n        this._updatePlaceholder();\n      }\n    }\n    /********************\n    *  STATIC METHODS\n    ********************/\n    // get the country data object\n    intlTelInputGlobals.getCountryData = () => allCountries;\n    // inject a <script> element to load utils.js\n    const injectScript = (path, handleSuccess, handleFailure) => {\n      // inject a new script element into the page\n      const script = document.createElement(\"script\");\n      script.onload = () => {\n        forEachInstance(\"handleUtils\");\n        if (handleSuccess) {\n          handleSuccess();\n        }\n      };\n      script.onerror = () => {\n        forEachInstance(\"rejectUtilsScriptPromise\");\n        if (handleFailure) {\n          handleFailure();\n        }\n      };\n      script.className = \"iti-load-utils\";\n      script.async = true;\n      script.src = path;\n      document.body.appendChild(script);\n    };\n    // load the utils script\n    intlTelInputGlobals.loadUtils = path => {\n      // 2 options:\n      // 1) not already started loading (start)\n      // 2) already started loading (do nothing - just wait for the onload callback to fire, which will\n      // trigger handleUtils on all instances, invoking their resolveUtilsScriptPromise functions)\n      if (!window.intlTelInputUtils && !window.intlTelInputGlobals.startedLoadingUtilsScript) {\n        // only do this once\n        window.intlTelInputGlobals.startedLoadingUtilsScript = true;\n        return new Promise((resolve, reject) => injectScript(path, resolve, reject));\n      }\n      return null;\n    };\n    // default options\n    intlTelInputGlobals.defaults = defaults;\n    // version\n    intlTelInputGlobals.version = \"20.3.0\";\n    // convenience wrapper\n    return function (input, options) {\n      var iti = new Iti(input, options);\n      iti._init();\n      input.setAttribute(\"data-intl-tel-input-id\", iti.id);\n      window.intlTelInputGlobals.instances[iti.id] = iti;\n      return iti;\n    };\n  }();\n});","map":{"version":3,"names":["factory","module","exports","window","intlTelInput","undefined","allCountries","i","length","c","name","iso2","dialCode","priority","areaCodes","nodeById","intlTelInputGlobals","getInstance","input","id","getAttribute","instances","documentReady","document","readyState","defaults","allowDropdown","autoPlaceholder","countrySearch","containerClass","customPlaceholder","dropdownContainer","excludeCountries","fixDropdownWidth","formatAsYouType","formatOnDisplay","geoIpLookup","hiddenInput","i18n","initialCountry","nationalMode","onlyCountries","placeholderNumberType","preferredCountries","showFlags","showSelectedDialCode","strictMode","useFullscreenPopup","navigator","test","userAgent","innerWidth","utilsScript","regionlessNanpNumbers","forEachInstance","method","Object","values","forEach","instance","Iti","constructor","customOptions","telInput","activeItem","highlightedItem","options","assign","hadInitialPlaceholder","Boolean","_init","forceShowFlags","body","isRTL","closest","autoCountryPromise","Promise","resolve","reject","resolveAutoCountryPromise","rejectAutoCountryPromise","utilsScriptPromise","resolveUtilsScriptPromise","rejectUtilsScriptPromise","promise","all","selectedCountryData","_processCountryData","_generateMarkup","_setInitialState","_initListeners","_initRequests","_processAllCountries","_processDialCodes","_processPreferredCountries","_translateCountryNames","countries","sort","_countryNameSort","_addToDialCodeMap","dialCodeMaxLen","dialCodeToIso2Map","hasOwnProperty","index","lowerCaseOnlyCountries","map","country","toLowerCase","filter","indexOf","lowerCaseExcludeCountries","a","b","dialCodes","rootIso2Code","j","areaCode","k","partialDialCode","substr","countryData","_getCountryData","push","_createEl","attrs","container","el","createElement","entries","key","value","setAttribute","appendChild","classList","add","hasAttribute","form","parentClass","wrapper","class","parentNode","insertBefore","flagsContainer","selectedFlag","role","selectedCountryAriaLabel","selectedFlagInner","selectedFlagA11yText","disabled","selectedDialCode","dropdownArrow","extraClasses","dropdownContent","searchInput","type","placeholder","searchPlaceholder","autocomplete","searchResultsA11yText","countryList","countryListAriaLabel","_appendListItems","_updateSearchResultsText","dropdownClasses","dropdown","telInputName","names","phone","hiddenInputCountry","className","preferred","idSuffix","listItem","tabindex","content","insertAdjacentHTML","overrideAutoCountry","attributeValue","inputValue","useAttribute","charAt","val","_getDialCode","isRegionlessNanp","_isRegionlessNanp","_updateFlagFromNumber","lowerInitialCountry","isValidInitialCountry","_setCountry","_updateValFromNumber","_initTelInputListeners","_initDropdownListeners","_initHiddenInputListener","_handleHiddenInputSubmit","getNumber","getSelectedCountryData","addEventListener","_handleLabelClick","e","contains","focus","preventDefault","label","_handleClickSelectedFlag","readOnly","_openDropdown","_handleFlagsContainerKeydown","isDropdownHidden","includes","stopPropagation","_closeDropdown","intlTelInputUtils","loadUtils","_loadAutoCountry","autoCountry","handleAutoCountry","startedLoadingAutoCountry","iso2Lower","isValidIso2","setTimeout","userOverrideFormatting","_handleInputEvent","_triggerCountryChange","isFormattingChar","data","isPaste","inputType","currentCaretPos","selectionStart","valueBeforeCaret","substring","relevantCharsBeforeCaret","replace","isDeleteForwards","formattedValue","_formatNumberAsYouType","newCaretPos","_translateCursorPosition","setSelectionRange","_handleKeydownEvent","altKey","ctrlKey","metaKey","isInitialPlus","isNumeric","isAllowedChar","fullNumber","_getFullNumber","coreNumber","getCoreNumber","hasReachedMaxLength","maxCoreNumberLength","relevantChars","prevCaretPos","count","_cap","number","max","_removeEmptyDialCode","numeric","_getNumeric","s","_trigger","Event","bubbles","cancelable","dispatchEvent","style","width","offsetWidth","remove","_setDropdownPosition","_highlightListItem","_scrollTo","firstElementChild","scrollTop","_bindDropdownListeners","_toggleClass","shouldHaveClass","pos","getBoundingClientRect","windowTop","documentElement","inputTop","top","dropdownHeight","offsetHeight","dropdownFitsBelow","innerHeight","dropdownFitsAbove","positionDropdownAboveInput","extraTop","left","scrollLeft","_handleWindowScroll","_handleMouseoverCountryList","target","_handleClickCountryList","_selectListItem","isOpening","_handleClickOffToClose","query","queryTimer","_handleKeydownOnDropdown","_handleUpDownKey","_handleEnterKey","clearTimeout","_searchForCountry","doFilter","inputQuery","trim","_filterCountries","keyupTimer","_handleSearchChange","_normaliseString","normalize","isReset","isFirst","innerHTML","normalisedQuery","normalisedCountryName","fullDialCode","childElementCount","searchText","zeroSearchResults","oneSearchResult","multipleSearchResults","textContent","next","previousElementSibling","nextElementSibling","lastElementChild","doFocus","_startsWith","useNational","NATIONAL","INTERNATIONAL","numberFormat","format","formatNumber","_beforeSetNumber","plusIndex","isNanp","iso2Codes","alreadySelected","isRegionlessNanpNumber","defaultCountry","shouldFocus","prevItem","allowFail","Error","prevCountry","flagClass","a11yText","noCountrySelected","_setSelectedCountryFlagTitleAttribute","selectedFlagWidth","_getHiddenSelectedFlagWidth","paddingRight","paddingLeft","_updatePlaceholder","_updateMaxLength","nextItem","querySelector","numberType","exampleNumber","getExampleNumber","validNumber","isPossibleNumber","title","containerClone","cloneNode","visibility","flagsContainerClone","selectedFlagClone","removeChild","shouldSetPlaceholder","flagChanged","_updateDialCode","removeAttribute","removeEventListener","element","middle","containerHeight","containerTop","containerBottom","elementHeight","elementTop","elementBottom","newScrollTop","middleOffset","heightDifference","newDialCodeBare","inputVal","newDialCode","newNumber","prevDialCode","includeAreaCode","numericChars","isNaN","parseInt","prefix","numericVal","start","result","formatNumberAsYouType","afterDialCode","split","setCountry","handleUtils","destroy","getExtension","getNumberType","getValidationError","isValidNumber","mobileOnly","isValidNumberPrecise","setNumber","setPlaceholderNumberType","getCountryData","injectScript","path","handleSuccess","handleFailure","script","onload","onerror","async","src","startedLoadingUtilsScript","version","iti"],"sources":["E:/GitRepo/Frontendbasics/frontend/node_modules/intl-tel-input/build/js/intlTelInput.js"],"sourcesContent":["/*\n * International Telephone Input v20.3.0\n * https://github.com/jackocnr/intl-tel-input.git\n * Licensed under the MIT license\n */\n// wrap in UMD\n(function(factory) {\n    if (typeof module === \"object\" && module.exports) module.exports = factory(); else window.intlTelInput = factory();\n})(function(undefined) {\n    \"use strict\";\n    return function() {\n        // Array of country objects for the flag dropdown.\n        // Here is the criteria for the plugin to support a given country/territory\n        // - It has an iso2 code: https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2\n        // - It has it's own country calling code (it is not a sub-region of another country): https://en.wikipedia.org/wiki/List_of_country_calling_codes\n        // - It has a flag in the region-flags project: https://github.com/behdad/region-flags/tree/gh-pages/png\n        // - It is supported by libphonenumber (it must be listed on this page): https://github.com/googlei18n/libphonenumber/blob/master/resources/ShortNumberMetadata.xml\n        // Each country array has the following information:\n        // [\n        //    Country name,\n        //    iso2 code,\n        //    International dial code,\n        //    Order (if >1 country with same dial code),\n        //    Area codes\n        // ]\n        var allCountries = [ [ \"Afghanistan\", \"af\", \"93\" ], [ \"Albania\", \"al\", \"355\" ], [ \"Algeria\", \"dz\", \"213\" ], [ \"American Samoa\", \"as\", \"1\", 5, [ \"684\" ] ], [ \"Andorra\", \"ad\", \"376\" ], [ \"Angola\", \"ao\", \"244\" ], [ \"Anguilla\", \"ai\", \"1\", 6, [ \"264\" ] ], [ \"Antigua & Barbuda\", \"ag\", \"1\", 7, [ \"268\" ] ], [ \"Argentina\", \"ar\", \"54\" ], [ \"Armenia\", \"am\", \"374\" ], [ \"Aruba\", \"aw\", \"297\" ], [ \"Ascension Island\", \"ac\", \"247\" ], [ \"Australia\", \"au\", \"61\", 0 ], [ \"Austria\", \"at\", \"43\" ], [ \"Azerbaijan\", \"az\", \"994\" ], [ \"Bahamas\", \"bs\", \"1\", 8, [ \"242\" ] ], [ \"Bahrain\", \"bh\", \"973\" ], [ \"Bangladesh\", \"bd\", \"880\" ], [ \"Barbados\", \"bb\", \"1\", 9, [ \"246\" ] ], [ \"Belarus\", \"by\", \"375\" ], [ \"Belgium\", \"be\", \"32\" ], [ \"Belize\", \"bz\", \"501\" ], [ \"Benin\", \"bj\", \"229\" ], [ \"Bermuda\", \"bm\", \"1\", 10, [ \"441\" ] ], [ \"Bhutan\", \"bt\", \"975\" ], [ \"Bolivia\", \"bo\", \"591\" ], [ \"Bosnia & Herzegovina\", \"ba\", \"387\" ], [ \"Botswana\", \"bw\", \"267\" ], [ \"Brazil\", \"br\", \"55\" ], [ \"British Indian Ocean Territory\", \"io\", \"246\" ], [ \"British Virgin Islands\", \"vg\", \"1\", 11, [ \"284\" ] ], [ \"Brunei\", \"bn\", \"673\" ], [ \"Bulgaria\", \"bg\", \"359\" ], [ \"Burkina Faso\", \"bf\", \"226\" ], [ \"Burundi\", \"bi\", \"257\" ], [ \"Cambodia\", \"kh\", \"855\" ], [ \"Cameroon\", \"cm\", \"237\" ], [ \"Canada\", \"ca\", \"1\", 1, [ \"204\", \"226\", \"236\", \"249\", \"250\", \"263\", \"289\", \"306\", \"343\", \"354\", \"365\", \"367\", \"368\", \"382\", \"387\", \"403\", \"416\", \"418\", \"428\", \"431\", \"437\", \"438\", \"450\", \"584\", \"468\", \"474\", \"506\", \"514\", \"519\", \"548\", \"579\", \"581\", \"584\", \"587\", \"604\", \"613\", \"639\", \"647\", \"672\", \"683\", \"705\", \"709\", \"742\", \"753\", \"778\", \"780\", \"782\", \"807\", \"819\", \"825\", \"867\", \"873\", \"902\", \"905\" ] ], [ \"Cape Verde\", \"cv\", \"238\" ], [ \"Caribbean Netherlands\", \"bq\", \"599\", 1, [ \"3\", \"4\", \"7\" ] ], [ \"Cayman Islands\", \"ky\", \"1\", 12, [ \"345\" ] ], [ \"Central African Republic\", \"cf\", \"236\" ], [ \"Chad\", \"td\", \"235\" ], [ \"Chile\", \"cl\", \"56\" ], [ \"China\", \"cn\", \"86\" ], [ \"Christmas Island\", \"cx\", \"61\", 2, [ \"89164\" ] ], [ \"Cocos (Keeling) Islands\", \"cc\", \"61\", 1, [ \"89162\" ] ], [ \"Colombia\", \"co\", \"57\" ], [ \"Comoros\", \"km\", \"269\" ], [ \"Congo - Brazzaville\", \"cg\", \"242\" ], [ \"Congo - Kinshasa\", \"cd\", \"243\" ], [ \"Cook Islands\", \"ck\", \"682\" ], [ \"Costa Rica\", \"cr\", \"506\" ], [ \"Côte d’Ivoire\", \"ci\", \"225\" ], [ \"Croatia\", \"hr\", \"385\" ], [ \"Cuba\", \"cu\", \"53\" ], [ \"Curaçao\", \"cw\", \"599\", 0 ], [ \"Cyprus\", \"cy\", \"357\" ], [ \"Czech Republic\", \"cz\", \"420\" ], [ \"Denmark\", \"dk\", \"45\" ], [ \"Djibouti\", \"dj\", \"253\" ], [ \"Dominica\", \"dm\", \"1\", 13, [ \"767\" ] ], [ \"Dominican Republic\", \"do\", \"1\", 2, [ \"809\", \"829\", \"849\" ] ], [ \"Ecuador\", \"ec\", \"593\" ], [ \"Egypt\", \"eg\", \"20\" ], [ \"El Salvador\", \"sv\", \"503\" ], [ \"Equatorial Guinea\", \"gq\", \"240\" ], [ \"Eritrea\", \"er\", \"291\" ], [ \"Estonia\", \"ee\", \"372\" ], [ \"Eswatini\", \"sz\", \"268\" ], [ \"Ethiopia\", \"et\", \"251\" ], [ \"Falkland Islands\", \"fk\", \"500\" ], [ \"Faroe Islands\", \"fo\", \"298\" ], [ \"Fiji\", \"fj\", \"679\" ], [ \"Finland\", \"fi\", \"358\", 0 ], [ \"France\", \"fr\", \"33\" ], [ \"French Guiana\", \"gf\", \"594\" ], [ \"French Polynesia\", \"pf\", \"689\" ], [ \"Gabon\", \"ga\", \"241\" ], [ \"Gambia\", \"gm\", \"220\" ], [ \"Georgia\", \"ge\", \"995\" ], [ \"Germany\", \"de\", \"49\" ], [ \"Ghana\", \"gh\", \"233\" ], [ \"Gibraltar\", \"gi\", \"350\" ], [ \"Greece\", \"gr\", \"30\" ], [ \"Greenland\", \"gl\", \"299\" ], [ \"Grenada\", \"gd\", \"1\", 14, [ \"473\" ] ], [ \"Guadeloupe\", \"gp\", \"590\", 0 ], [ \"Guam\", \"gu\", \"1\", 15, [ \"671\" ] ], [ \"Guatemala\", \"gt\", \"502\" ], [ \"Guernsey\", \"gg\", \"44\", 1, [ \"1481\", \"7781\", \"7839\", \"7911\" ] ], [ \"Guinea\", \"gn\", \"224\" ], [ \"Guinea-Bissau\", \"gw\", \"245\" ], [ \"Guyana\", \"gy\", \"592\" ], [ \"Haiti\", \"ht\", \"509\" ], [ \"Honduras\", \"hn\", \"504\" ], [ \"Hong Kong\", \"hk\", \"852\" ], [ \"Hungary\", \"hu\", \"36\" ], [ \"Iceland\", \"is\", \"354\" ], [ \"India\", \"in\", \"91\" ], [ \"Indonesia\", \"id\", \"62\" ], [ \"Iran\", \"ir\", \"98\" ], [ \"Iraq\", \"iq\", \"964\" ], [ \"Ireland\", \"ie\", \"353\" ], [ \"Isle of Man\", \"im\", \"44\", 2, [ \"1624\", \"74576\", \"7524\", \"7924\", \"7624\" ] ], [ \"Israel\", \"il\", \"972\" ], [ \"Italy\", \"it\", \"39\", 0 ], [ \"Jamaica\", \"jm\", \"1\", 4, [ \"876\", \"658\" ] ], [ \"Japan\", \"jp\", \"81\" ], [ \"Jersey\", \"je\", \"44\", 3, [ \"1534\", \"7509\", \"7700\", \"7797\", \"7829\", \"7937\" ] ], [ \"Jordan\", \"jo\", \"962\" ], [ \"Kazakhstan\", \"kz\", \"7\", 1, [ \"33\", \"7\" ] ], [ \"Kenya\", \"ke\", \"254\" ], [ \"Kiribati\", \"ki\", \"686\" ], [ \"Kosovo\", \"xk\", \"383\" ], [ \"Kuwait\", \"kw\", \"965\" ], [ \"Kyrgyzstan\", \"kg\", \"996\" ], [ \"Laos\", \"la\", \"856\" ], [ \"Latvia\", \"lv\", \"371\" ], [ \"Lebanon\", \"lb\", \"961\" ], [ \"Lesotho\", \"ls\", \"266\" ], [ \"Liberia\", \"lr\", \"231\" ], [ \"Libya\", \"ly\", \"218\" ], [ \"Liechtenstein\", \"li\", \"423\" ], [ \"Lithuania\", \"lt\", \"370\" ], [ \"Luxembourg\", \"lu\", \"352\" ], [ \"Macau\", \"mo\", \"853\" ], [ \"Madagascar\", \"mg\", \"261\" ], [ \"Malawi\", \"mw\", \"265\" ], [ \"Malaysia\", \"my\", \"60\" ], [ \"Maldives\", \"mv\", \"960\" ], [ \"Mali\", \"ml\", \"223\" ], [ \"Malta\", \"mt\", \"356\" ], [ \"Marshall Islands\", \"mh\", \"692\" ], [ \"Martinique\", \"mq\", \"596\" ], [ \"Mauritania\", \"mr\", \"222\" ], [ \"Mauritius\", \"mu\", \"230\" ], [ \"Mayotte\", \"yt\", \"262\", 1, [ \"269\", \"639\" ] ], [ \"Mexico\", \"mx\", \"52\" ], [ \"Micronesia\", \"fm\", \"691\" ], [ \"Moldova\", \"md\", \"373\" ], [ \"Monaco\", \"mc\", \"377\" ], [ \"Mongolia\", \"mn\", \"976\" ], [ \"Montenegro\", \"me\", \"382\" ], [ \"Montserrat\", \"ms\", \"1\", 16, [ \"664\" ] ], [ \"Morocco\", \"ma\", \"212\", 0 ], [ \"Mozambique\", \"mz\", \"258\" ], [ \"Myanmar (Burma)\", \"mm\", \"95\" ], [ \"Namibia\", \"na\", \"264\" ], [ \"Nauru\", \"nr\", \"674\" ], [ \"Nepal\", \"np\", \"977\" ], [ \"Netherlands\", \"nl\", \"31\" ], [ \"New Caledonia\", \"nc\", \"687\" ], [ \"New Zealand\", \"nz\", \"64\" ], [ \"Nicaragua\", \"ni\", \"505\" ], [ \"Niger\", \"ne\", \"227\" ], [ \"Nigeria\", \"ng\", \"234\" ], [ \"Niue\", \"nu\", \"683\" ], [ \"Norfolk Island\", \"nf\", \"672\" ], [ \"North Korea\", \"kp\", \"850\" ], [ \"North Macedonia\", \"mk\", \"389\" ], [ \"Northern Mariana Islands\", \"mp\", \"1\", 17, [ \"670\" ] ], [ \"Norway\", \"no\", \"47\", 0 ], [ \"Oman\", \"om\", \"968\" ], [ \"Pakistan\", \"pk\", \"92\" ], [ \"Palau\", \"pw\", \"680\" ], [ \"Palestine\", \"ps\", \"970\" ], [ \"Panama\", \"pa\", \"507\" ], [ \"Papua New Guinea\", \"pg\", \"675\" ], [ \"Paraguay\", \"py\", \"595\" ], [ \"Peru\", \"pe\", \"51\" ], [ \"Philippines\", \"ph\", \"63\" ], [ \"Poland\", \"pl\", \"48\" ], [ \"Portugal\", \"pt\", \"351\" ], [ \"Puerto Rico\", \"pr\", \"1\", 3, [ \"787\", \"939\" ] ], [ \"Qatar\", \"qa\", \"974\" ], [ \"Réunion\", \"re\", \"262\", 0 ], [ \"Romania\", \"ro\", \"40\" ], [ \"Russia\", \"ru\", \"7\", 0 ], [ \"Rwanda\", \"rw\", \"250\" ], [ \"Samoa\", \"ws\", \"685\" ], [ \"San Marino\", \"sm\", \"378\" ], [ \"São Tomé & Príncipe\", \"st\", \"239\" ], [ \"Saudi Arabia\", \"sa\", \"966\" ], [ \"Senegal\", \"sn\", \"221\" ], [ \"Serbia\", \"rs\", \"381\" ], [ \"Seychelles\", \"sc\", \"248\" ], [ \"Sierra Leone\", \"sl\", \"232\" ], [ \"Singapore\", \"sg\", \"65\" ], [ \"Sint Maarten\", \"sx\", \"1\", 21, [ \"721\" ] ], [ \"Slovakia\", \"sk\", \"421\" ], [ \"Slovenia\", \"si\", \"386\" ], [ \"Solomon Islands\", \"sb\", \"677\" ], [ \"Somalia\", \"so\", \"252\" ], [ \"South Africa\", \"za\", \"27\" ], [ \"South Korea\", \"kr\", \"82\" ], [ \"South Sudan\", \"ss\", \"211\" ], [ \"Spain\", \"es\", \"34\" ], [ \"Sri Lanka\", \"lk\", \"94\" ], [ \"St Barthélemy\", \"bl\", \"590\", 1 ], [ \"St Helena\", \"sh\", \"290\" ], [ \"St Kitts & Nevis\", \"kn\", \"1\", 18, [ \"869\" ] ], [ \"St Lucia\", \"lc\", \"1\", 19, [ \"758\" ] ], [ \"St Martin\", \"mf\", \"590\", 2 ], [ \"St Pierre & Miquelon\", \"pm\", \"508\" ], [ \"St Vincent & Grenadines\", \"vc\", \"1\", 20, [ \"784\" ] ], [ \"Sudan\", \"sd\", \"249\" ], [ \"Suriname\", \"sr\", \"597\" ], [ \"Svalbard & Jan Mayen\", \"sj\", \"47\", 1, [ \"79\" ] ], [ \"Sweden\", \"se\", \"46\" ], [ \"Switzerland\", \"ch\", \"41\" ], [ \"Syria\", \"sy\", \"963\" ], [ \"Taiwan\", \"tw\", \"886\" ], [ \"Tajikistan\", \"tj\", \"992\" ], [ \"Tanzania\", \"tz\", \"255\" ], [ \"Thailand\", \"th\", \"66\" ], [ \"Timor-Leste\", \"tl\", \"670\" ], [ \"Togo\", \"tg\", \"228\" ], [ \"Tokelau\", \"tk\", \"690\" ], [ \"Tonga\", \"to\", \"676\" ], [ \"Trinidad & Tobago\", \"tt\", \"1\", 22, [ \"868\" ] ], [ \"Tunisia\", \"tn\", \"216\" ], [ \"Turkey\", \"tr\", \"90\" ], [ \"Turkmenistan\", \"tm\", \"993\" ], [ \"Turks & Caicos Islands\", \"tc\", \"1\", 23, [ \"649\" ] ], [ \"Tuvalu\", \"tv\", \"688\" ], [ \"Uganda\", \"ug\", \"256\" ], [ \"Ukraine\", \"ua\", \"380\" ], [ \"United Arab Emirates\", \"ae\", \"971\" ], [ \"United Kingdom\", \"gb\", \"44\", 0 ], [ \"United States\", \"us\", \"1\", 0 ], [ \"Uruguay\", \"uy\", \"598\" ], [ \"US Virgin Islands\", \"vi\", \"1\", 24, [ \"340\" ] ], [ \"Uzbekistan\", \"uz\", \"998\" ], [ \"Vanuatu\", \"vu\", \"678\" ], [ \"Vatican City\", \"va\", \"39\", 1, [ \"06698\" ] ], [ \"Venezuela\", \"ve\", \"58\" ], [ \"Vietnam\", \"vn\", \"84\" ], [ \"Wallis & Futuna\", \"wf\", \"681\" ], [ \"Western Sahara\", \"eh\", \"212\", 1, [ \"5288\", \"5289\" ] ], [ \"Yemen\", \"ye\", \"967\" ], [ \"Zambia\", \"zm\", \"260\" ], [ \"Zimbabwe\", \"zw\", \"263\" ], [ \"Åland Islands\", \"ax\", \"358\", 1, [ \"18\" ] ] ];\n        // loop over all of the countries above, restructuring the data to be objects with named keys\n        for (var i = 0; i < allCountries.length; i++) {\n            var c = allCountries[i];\n            allCountries[i] = {\n                name: c[0],\n                iso2: c[1],\n                dialCode: c[2],\n                priority: c[3] || 0,\n                areaCodes: c[4] || null,\n                nodeById: {}\n            };\n        }\n        const intlTelInputGlobals = {\n            getInstance: input => {\n                const id = input.getAttribute(\"data-intl-tel-input-id\");\n                return window.intlTelInputGlobals.instances[id];\n            },\n            instances: {},\n            // using a global like this allows us to mock it in the tests\n            documentReady: () => document.readyState === \"complete\"\n        };\n        if (typeof window === \"object\") {\n            window.intlTelInputGlobals = intlTelInputGlobals;\n        }\n        // these vars persist through all instances of the plugin\n        let id = 0;\n        const defaults = {\n            // whether or not to allow the dropdown\n            allowDropdown: true,\n            // add a placeholder in the input with an example number for the selected country\n            autoPlaceholder: \"polite\",\n            // add a country search input at the top of the dropdown\n            countrySearch: true,\n            // modify the parentClass\n            containerClass: \"\",\n            // modify the auto placeholder\n            customPlaceholder: null,\n            // append menu to specified element\n            dropdownContainer: null,\n            // don't display these countries\n            excludeCountries: [],\n            // fix the dropdown width to the input width (rather than being as wide as the longest country name)\n            fixDropdownWidth: true,\n            // format the number as the user types\n            formatAsYouType: true,\n            // format the input value during initialisation and on setNumber\n            formatOnDisplay: true,\n            // geoIp lookup function\n            geoIpLookup: null,\n            // inject a hidden input with the name returned from this function, and on submit, populate it with the result of getNumber\n            hiddenInput: null,\n            // internationalise the plugin text e.g. search input placeholder, country names\n            i18n: {},\n            // initial country\n            initialCountry: \"\",\n            // national vs international formatting for numbers e.g. placeholders and displaying existing numbers\n            nationalMode: true,\n            // display only these countries\n            onlyCountries: [],\n            // number type to use for placeholders\n            placeholderNumberType: \"MOBILE\",\n            // the countries at the top of the list\n            preferredCountries: [],\n            // option to hide the flags - must be used with showSelectedDialCode, or allowDropdown=false\n            showFlags: true,\n            // display the international dial code next to the selected flag\n            showSelectedDialCode: false,\n            // only allow certain chars e.g. a plus followed by numeric digits, and cap at max valid length\n            strictMode: false,\n            // use full screen popup instead of dropdown for country list\n            useFullscreenPopup: typeof navigator !== \"undefined\" && typeof window !== \"undefined\" ? // we cannot just test screen size as some smartphones/website meta tags will report desktop\n            // resolutions\n            // Note: to target Android Mobiles (and not Tablets), we must find 'Android' and 'Mobile'\n            /Android.+Mobile|webOS|iPhone|iPod|BlackBerry|IEMobile|Opera Mini/i.test(navigator.userAgent) || window.innerWidth <= 500 : false,\n            // specify the path to the libphonenumber script to enable validation/formatting\n            utilsScript: \"\"\n        };\n        // https://en.wikipedia.org/wiki/List_of_North_American_Numbering_Plan_area_codes#Non-geographic_area_codes\n        const regionlessNanpNumbers = [ \"800\", \"822\", \"833\", \"844\", \"855\", \"866\", \"877\", \"880\", \"881\", \"882\", \"883\", \"884\", \"885\", \"886\", \"887\", \"888\", \"889\" ];\n        // run a method on each instance of the plugin\n        const forEachInstance = method => {\n            const {\n                instances\n            } = window.intlTelInputGlobals;\n            Object.values(instances).forEach(instance => instance[method]());\n        };\n        // this is our plugin class that we will create an instance of\n        // eslint-disable-next-line no-unused-vars\n        class Iti {\n            constructor(input, customOptions = {}) {\n                this.id = id++;\n                this.telInput = input;\n                this.activeItem = null;\n                this.highlightedItem = null;\n                // process specified options / defaults\n                this.options = Object.assign({}, defaults, customOptions);\n                this.hadInitialPlaceholder = Boolean(input.getAttribute(\"placeholder\"));\n            }\n            _init() {\n                // if showing fullscreen popup, do not fix the width\n                if (this.options.useFullscreenPopup) {\n                    this.options.fixDropdownWidth = false;\n                }\n                // when search enabled, we must fix the width else it would change with different results\n                if (this.options.countrySearch && !this.options.useFullscreenPopup) {\n                    this.options.fixDropdownWidth = true;\n                }\n                // force showFlags=true if there's a dropdown and we're not displaying the dial code,\n                // as otherwise you just have a down arrow on it's own which doesn't make sense\n                const forceShowFlags = this.options.allowDropdown && !this.options.showSelectedDialCode;\n                if (!this.options.showFlags && forceShowFlags) {\n                    this.options.showFlags = true;\n                }\n                // on mobile, we want a full screen dropdown, so we must append it to the body\n                if (this.options.useFullscreenPopup && !this.options.dropdownContainer) {\n                    this.options.dropdownContainer = document.body;\n                }\n                // check if input has one parent with RTL\n                this.isRTL = !!this.telInput.closest(\"[dir=rtl]\");\n                // these promises get resolved when their individual requests complete\n                // this way the dev can do something like iti.promise.then(...) to know when all requests are\n                // complete\n                const autoCountryPromise = new Promise((resolve, reject) => {\n                    this.resolveAutoCountryPromise = resolve;\n                    this.rejectAutoCountryPromise = reject;\n                });\n                const utilsScriptPromise = new Promise((resolve, reject) => {\n                    this.resolveUtilsScriptPromise = resolve;\n                    this.rejectUtilsScriptPromise = reject;\n                });\n                this.promise = Promise.all([ autoCountryPromise, utilsScriptPromise ]);\n                // in various situations there could be no country selected initially, but we need to be able\n                // to assume this variable exists\n                this.selectedCountryData = {};\n                // process all the data: onlyCountries, excludeCountries, preferredCountries etc\n                this._processCountryData();\n                // generate the markup\n                this._generateMarkup();\n                // set the initial state of the input value and the selected flag\n                this._setInitialState();\n                // start all of the event listeners: input keydown, selectedFlag click\n                this._initListeners();\n                // utils script, and auto country\n                this._initRequests();\n            }\n            /********************\n   *  PRIVATE METHODS\n   ********************/\n            // prepare all of the country data, including onlyCountries, excludeCountries and\n            // preferredCountries options\n            _processCountryData() {\n                // process onlyCountries or excludeCountries array if present\n                this._processAllCountries();\n                // generate this.dialCodes and this.dialCodeToIso2Map\n                this._processDialCodes();\n                // process the preferredCountries\n                this._processPreferredCountries();\n                // translate country names according to i18n option\n                this._translateCountryNames();\n                // sort countries by name\n                if (this.options.onlyCountries.length || this.options.i18n) {\n                    this.countries.sort(this._countryNameSort);\n                }\n            }\n            // add a dial code to this.dialCodeToIso2Map\n            _addToDialCodeMap(iso2, dialCode, priority) {\n                if (dialCode.length > this.dialCodeMaxLen) {\n                    this.dialCodeMaxLen = dialCode.length;\n                }\n                if (!this.dialCodeToIso2Map.hasOwnProperty(dialCode)) {\n                    this.dialCodeToIso2Map[dialCode] = [];\n                }\n                // bail if we already have this country for this dialCode\n                for (let i = 0; i < this.dialCodeToIso2Map[dialCode].length; i++) {\n                    if (this.dialCodeToIso2Map[dialCode][i] === iso2) {\n                        return;\n                    }\n                }\n                // check for undefined as 0 is falsy\n                const index = priority !== undefined ? priority : this.dialCodeToIso2Map[dialCode].length;\n                this.dialCodeToIso2Map[dialCode][index] = iso2;\n            }\n            // process onlyCountries or excludeCountries array if present\n            _processAllCountries() {\n                if (this.options.onlyCountries.length) {\n                    const lowerCaseOnlyCountries = this.options.onlyCountries.map(country => country.toLowerCase());\n                    this.countries = allCountries.filter(country => lowerCaseOnlyCountries.indexOf(country.iso2) > -1);\n                } else if (this.options.excludeCountries.length) {\n                    const lowerCaseExcludeCountries = this.options.excludeCountries.map(country => country.toLowerCase());\n                    this.countries = allCountries.filter(country => lowerCaseExcludeCountries.indexOf(country.iso2) === -1);\n                } else {\n                    this.countries = allCountries;\n                }\n            }\n            // Translate Countries by object literal provided on config\n            _translateCountryNames() {\n                for (let i = 0; i < this.countries.length; i++) {\n                    const iso2 = this.countries[i].iso2.toLowerCase();\n                    if (this.options.i18n.hasOwnProperty(iso2)) {\n                        this.countries[i].name = this.options.i18n[iso2];\n                    }\n                }\n            }\n            // sort by country name\n            _countryNameSort(a, b) {\n                if (a.name < b.name) {\n                    return -1;\n                }\n                if (a.name > b.name) {\n                    return 1;\n                }\n                return 0;\n            }\n            // generate this.dialCodes and this.dialCodeToIso2Map\n            _processDialCodes() {\n                // here we store just dial codes, where the key is the dial code, and the value is true\n                // e.g. { 1: true, 7: true, 20: true, ... }\n                this.dialCodes = {};\n                this.dialCodeMaxLen = 0;\n                // here we map dialCodes (inc both dialCode and dialCode+areaCode) to iso2 codes\n                /* e.g.\n     * {\n     *   1: [ 'us', 'ca', ... ],    # all NANP countries\n     *   12: [ 'us', 'ca', ... ],   # subset of NANP countries\n     *   120: [ 'us', 'ca' ],       # just US and Canada\n     *   1204: [ 'ca' ],            # only Canada\n     *   ...\n     *  }\n     */\n                this.dialCodeToIso2Map = {};\n                // first: add dial codes\n                for (let i = 0; i < this.countries.length; i++) {\n                    const c = this.countries[i];\n                    if (!this.dialCodes[c.dialCode]) {\n                        this.dialCodes[c.dialCode] = true;\n                    }\n                    this._addToDialCodeMap(c.iso2, c.dialCode, c.priority);\n                }\n                // next: add area codes\n                // this is a second loop over countries, to make sure we have all of the \"root\" countries\n                // already in the map, so that we can access them, as each time we add an area code substring\n                // to the map, we also need to include the \"root\" country's code, as that also matches\n                for (let i = 0; i < this.countries.length; i++) {\n                    const c = this.countries[i];\n                    // area codes\n                    if (c.areaCodes) {\n                        const rootIso2Code = this.dialCodeToIso2Map[c.dialCode][0];\n                        // for each area code\n                        for (let j = 0; j < c.areaCodes.length; j++) {\n                            const areaCode = c.areaCodes[j];\n                            // for each digit in the area code to add all partial matches as well\n                            for (let k = 1; k < areaCode.length; k++) {\n                                const partialDialCode = c.dialCode + areaCode.substr(0, k);\n                                // start with the root country, as that also matches this dial code\n                                this._addToDialCodeMap(rootIso2Code, partialDialCode);\n                                this._addToDialCodeMap(c.iso2, partialDialCode);\n                            }\n                            // add the full area code\n                            this._addToDialCodeMap(c.iso2, c.dialCode + areaCode);\n                        }\n                    }\n                }\n            }\n            // process preferred countries - iterate through the preferences, fetching the country data for\n            // each one\n            _processPreferredCountries() {\n                this.preferredCountries = [];\n                for (let i = 0; i < this.options.preferredCountries.length; i++) {\n                    const iso2 = this.options.preferredCountries[i].toLowerCase();\n                    const countryData = this._getCountryData(iso2, true);\n                    if (countryData) {\n                        this.preferredCountries.push(countryData);\n                    }\n                }\n            }\n            // create a DOM element\n            _createEl(name, attrs, container) {\n                const el = document.createElement(name);\n                if (attrs) {\n                    Object.entries(attrs).forEach(([ key, value ]) => el.setAttribute(key, value));\n                }\n                if (container) {\n                    container.appendChild(el);\n                }\n                return el;\n            }\n            // generate all of the markup for the plugin: the selected flag overlay, and the dropdown\n            _generateMarkup() {\n                this.telInput.classList.add(\"iti__tel-input\");\n                // if autocomplete does not exist on the element and its form, then\n                // prevent autocomplete as there's no safe, cross-browser event we can react to, so it can\n                // easily put the plugin in an inconsistent state e.g. the wrong flag selected for the\n                // autocompleted number, which on submit could mean wrong number is saved\n                if (!this.telInput.hasAttribute(\"autocomplete\") && !(this.telInput.form && this.telInput.form.hasAttribute(\"autocomplete\"))) {\n                    this.telInput.setAttribute(\"autocomplete\", \"off\");\n                }\n                const {\n                    allowDropdown,\n                    showSelectedDialCode,\n                    showFlags,\n                    containerClass,\n                    hiddenInput,\n                    dropdownContainer,\n                    fixDropdownWidth,\n                    useFullscreenPopup,\n                    countrySearch,\n                    i18n\n                } = this.options;\n                // containers (mostly for positioning)\n                let parentClass = \"iti\";\n                if (allowDropdown) {\n                    parentClass += \" iti--allow-dropdown\";\n                }\n                if (showSelectedDialCode) {\n                    parentClass += \" iti--show-selected-dial-code\";\n                }\n                if (showFlags) {\n                    parentClass += \" iti--show-flags\";\n                }\n                if (containerClass) {\n                    parentClass += ` ${containerClass}`;\n                }\n                if (!useFullscreenPopup) {\n                    parentClass += \" iti--inline-dropdown\";\n                }\n                const wrapper = this._createEl(\"div\", {\n                    class: parentClass\n                });\n                this.telInput.parentNode.insertBefore(wrapper, this.telInput);\n                // if we're showing flags or dial codes, we need the flags container etc\n                if (showFlags || showSelectedDialCode) {\n                    this.flagsContainer = this._createEl(\"div\", {\n                        class: \"iti__flag-container\"\n                    }, wrapper);\n                    // selected flag (displayed on left of input while allowDropdown is enabled, otherwise to right)\n                    // when countrySearch disabled: using Aria tags for \"Select-Only Combobox Example\"\n                    // https://www.w3.org/WAI/ARIA/apg/patterns/combobox/examples/combobox-select-only/\n                    this.selectedFlag = this._createEl(\"div\", {\n                        class: \"iti__selected-flag\",\n                        ...allowDropdown && {\n                            role: \"button\",\n                            \"aria-expanded\": \"false\",\n                            \"aria-label\": this.options.i18n.selectedCountryAriaLabel || \"Selected country\",\n                            \"aria-haspopup\": countrySearch ? \"true\" : \"listbox\",\n                            \"aria-controls\": countrySearch ? `iti-${this.id}__dropdown-content` : `iti-${this.id}__country-listbox`,\n                            ...countrySearch || {\n                                role: \"combobox\"\n                            }\n                        }\n                    }, this.flagsContainer);\n                    // we now include the selected flag element even when showFlags is disabled,\n                    // as need to show globe icon for showSelectedDialCode empty state\n                    this.selectedFlagInner = this._createEl(\"div\", null, this.selectedFlag);\n                    this.selectedFlagA11yText = this._createEl(\"span\", {\n                        class: \"iti__a11y-text\"\n                    }, this.selectedFlagInner);\n                }\n                wrapper.appendChild(this.telInput);\n                if (this.selectedFlag && this.telInput.disabled) {\n                    this.selectedFlag.setAttribute(\"aria-disabled\", \"true\");\n                }\n                if (showSelectedDialCode) {\n                    this.selectedDialCode = this._createEl(\"div\", {\n                        class: \"iti__selected-dial-code\"\n                    }, this.selectedFlag);\n                }\n                if (allowDropdown) {\n                    if (!this.telInput.disabled) {\n                        // make element focusable and tab navigable\n                        this.selectedFlag.setAttribute(\"tabindex\", \"0\");\n                    }\n                    this.dropdownArrow = this._createEl(\"div\", {\n                        class: \"iti__arrow\",\n                        \"aria-hidden\": \"true\"\n                    }, this.selectedFlag);\n                    const extraClasses = fixDropdownWidth ? \"\" : \"iti--flexible-dropdown-width\";\n                    this.dropdownContent = this._createEl(\"div\", {\n                        id: `iti-${this.id}__dropdown-content`,\n                        class: `iti__dropdown-content iti__hide ${extraClasses}`\n                    });\n                    if (countrySearch) {\n                        this.searchInput = this._createEl(\"input\", {\n                            type: \"text\",\n                            class: \"iti__search-input\",\n                            placeholder: i18n.searchPlaceholder || \"Search\",\n                            role: \"combobox\",\n                            \"aria-expanded\": \"true\",\n                            \"aria-label\": i18n.searchPlaceholder || \"Search\",\n                            \"aria-controls\": `iti-${this.id}__country-listbox`,\n                            \"aria-autocomplete\": \"list\",\n                            autocomplete: \"off\"\n                        }, this.dropdownContent);\n                        this.searchResultsA11yText = this._createEl(\"span\", {\n                            class: \"iti__a11y-text\"\n                        }, this.dropdownContent);\n                    }\n                    // country list: preferred countries, then divider, then all countries\n                    this.countryList = this._createEl(\"ul\", {\n                        class: \"iti__country-list\",\n                        id: `iti-${this.id}__country-listbox`,\n                        role: \"listbox\",\n                        \"aria-label\": i18n.countryListAriaLabel || \"List of countries\"\n                    }, this.dropdownContent);\n                    if (this.preferredCountries.length && !countrySearch) {\n                        this._appendListItems(this.preferredCountries, \"iti__preferred\", true);\n                        this._createEl(\"li\", {\n                            class: \"iti__divider\",\n                            \"aria-hidden\": \"true\"\n                        }, this.countryList);\n                    }\n                    this._appendListItems(this.countries, \"iti__standard\");\n                    if (countrySearch) {\n                        this._updateSearchResultsText();\n                    }\n                    // create dropdownContainer markup\n                    if (dropdownContainer) {\n                        let dropdownClasses = \"iti iti--container\";\n                        if (useFullscreenPopup) {\n                            dropdownClasses += \" iti--fullscreen-popup\";\n                        } else {\n                            dropdownClasses += \" iti--inline-dropdown\";\n                        }\n                        if (countrySearch) {\n                            dropdownClasses += \" iti--country-search\";\n                        }\n                        this.dropdown = this._createEl(\"div\", {\n                            class: dropdownClasses\n                        });\n                        this.dropdown.appendChild(this.dropdownContent);\n                    } else {\n                        this.flagsContainer.appendChild(this.dropdownContent);\n                    }\n                }\n                if (hiddenInput) {\n                    const telInputName = this.telInput.getAttribute(\"name\");\n                    const names = hiddenInput(telInputName);\n                    if (names.phone) {\n                        // Create hidden input for the full international number\n                        this.hiddenInput = this._createEl(\"input\", {\n                            type: \"hidden\",\n                            name: names.phone\n                        });\n                        wrapper.appendChild(this.hiddenInput);\n                    }\n                    if (names.country) {\n                        // Create hidden input for the selected country iso2 code\n                        this.hiddenInputCountry = this._createEl(\"input\", {\n                            type: \"hidden\",\n                            name: names.country\n                        });\n                        wrapper.appendChild(this.hiddenInputCountry);\n                    }\n                }\n            }\n            // for each of the passed countries: add a country <li> to the countryList <ul> container\n            _appendListItems(countries, className, preferred) {\n                for (let i = 0; i < countries.length; i++) {\n                    const c = countries[i];\n                    const idSuffix = preferred ? \"-preferred\" : \"\";\n                    const listItem = this._createEl(\"li\", {\n                        id: `iti-${this.id}__item-${c.iso2}${idSuffix}`,\n                        class: `iti__country ${className}`,\n                        tabindex: \"-1\",\n                        role: \"option\",\n                        \"data-dial-code\": c.dialCode,\n                        \"data-country-code\": c.iso2,\n                        \"aria-selected\": \"false\"\n                    }, this.countryList);\n                    // store this for later use e.g. country search filtering\n                    c.nodeById[this.id] = listItem;\n                    let content = \"\";\n                    // add the flag\n                    if (this.options.showFlags) {\n                        content += `<div class='iti__flag-box'><div class='iti__flag iti__${c.iso2}'></div></div>`;\n                    }\n                    // and the country name and dial code\n                    content += `<span class='iti__country-name'>${c.name}</span>`;\n                    content += `<span class='iti__dial-code'>+${c.dialCode}</span>`;\n                    listItem.insertAdjacentHTML(\"beforeend\", content);\n                }\n            }\n            // set the initial state of the input value and the selected flag by:\n            // 1. extracting a dial code from the given number\n            // 2. using explicit initialCountry\n            // 3. picking the first preferred country\n            // 4. picking the first country\n            _setInitialState(overrideAutoCountry = false) {\n                // fix firefox bug: when first load page (with input with value set to number with intl dial\n                // code) and initialising plugin removes the dial code from the input, then refresh page,\n                // and we try to init plugin again but this time on number without dial code so get grey flag\n                const attributeValue = this.telInput.getAttribute(\"value\");\n                const inputValue = this.telInput.value;\n                const useAttribute = attributeValue && attributeValue.charAt(0) === \"+\" && (!inputValue || inputValue.charAt(0) !== \"+\");\n                const val = useAttribute ? attributeValue : inputValue;\n                const dialCode = this._getDialCode(val);\n                const isRegionlessNanp = this._isRegionlessNanp(val);\n                const {\n                    initialCountry\n                } = this.options;\n                // if we already have a dial code, and it's not a regionlessNanp, we can go ahead and set the\n                // flag, else fall back to the default country\n                if (dialCode && !isRegionlessNanp) {\n                    this._updateFlagFromNumber(val);\n                } else if (initialCountry !== \"auto\" || overrideAutoCountry) {\n                    const lowerInitialCountry = initialCountry ? initialCountry.toLowerCase() : \"\";\n                    const isValidInitialCountry = lowerInitialCountry && this._getCountryData(lowerInitialCountry, true);\n                    // see if we should select a flag\n                    if (isValidInitialCountry) {\n                        this._setCountry(lowerInitialCountry);\n                    } else {\n                        if (dialCode && isRegionlessNanp) {\n                            // has intl dial code, is regionless nanp, and no initialCountry, so default to US\n                            this._setCountry(\"us\");\n                        } else {\n                            // display the empty state (globe icon)\n                            this._setCountry();\n                        }\n                    }\n                }\n                // NOTE: if initialCountry is set to auto, that will be handled separately\n                // format - note this wont be run after _updateDialCode as that's only called if no val\n                if (val) {\n                    this._updateValFromNumber(val);\n                }\n            }\n            // initialise the main event listeners: input keyup, and click selected flag\n            _initListeners() {\n                this._initTelInputListeners();\n                if (this.options.allowDropdown) {\n                    this._initDropdownListeners();\n                }\n                if ((this.hiddenInput || this.hiddenInputCountry) && this.telInput.form) {\n                    this._initHiddenInputListener();\n                }\n            }\n            // update hidden input on form submit\n            _initHiddenInputListener() {\n                this._handleHiddenInputSubmit = () => {\n                    if (this.hiddenInput) {\n                        this.hiddenInput.value = this.getNumber();\n                    }\n                    if (this.hiddenInputCountry) {\n                        this.hiddenInputCountry.value = this.getSelectedCountryData().iso2;\n                    }\n                };\n                this.telInput.form.addEventListener(\"submit\", this._handleHiddenInputSubmit);\n            }\n            // initialise the dropdown listeners\n            _initDropdownListeners() {\n                // hack for input nested inside label (which is valid markup): clicking the selected-flag to\n                // open the dropdown would then automatically trigger a 2nd click on the input which would\n                // close it again\n                this._handleLabelClick = e => {\n                    // if the dropdown is closed, then focus the input, else ignore the click\n                    if (this.dropdownContent.classList.contains(\"iti__hide\")) {\n                        this.telInput.focus();\n                    } else {\n                        e.preventDefault();\n                    }\n                };\n                const label = this.telInput.closest(\"label\");\n                if (label) {\n                    label.addEventListener(\"click\", this._handleLabelClick);\n                }\n                // toggle country dropdown on click\n                this._handleClickSelectedFlag = () => {\n                    // only intercept this event if we're opening the dropdown\n                    // else let it bubble up to the top (\"click-off-to-close\" listener)\n                    // we cannot just stopPropagation as it may be needed to close another instance\n                    if (this.dropdownContent.classList.contains(\"iti__hide\") && !this.telInput.disabled && !this.telInput.readOnly) {\n                        this._openDropdown();\n                    }\n                };\n                this.selectedFlag.addEventListener(\"click\", this._handleClickSelectedFlag);\n                // open dropdown if selected flag is focused and they press up/down/space/enter\n                this._handleFlagsContainerKeydown = e => {\n                    const isDropdownHidden = this.dropdownContent.classList.contains(\"iti__hide\");\n                    if (isDropdownHidden && [ \"ArrowUp\", \"ArrowDown\", \" \", \"Enter\" ].includes(e.key)) {\n                        // prevent form from being submitted if \"ENTER\" was pressed\n                        e.preventDefault();\n                        // prevent event from being handled again by document\n                        e.stopPropagation();\n                        this._openDropdown();\n                    }\n                    // allow navigation from dropdown to input on TAB\n                    if (e.key === \"Tab\") {\n                        this._closeDropdown();\n                    }\n                };\n                this.flagsContainer.addEventListener(\"keydown\", this._handleFlagsContainerKeydown);\n            }\n            // init many requests: utils script / geo ip lookup\n            _initRequests() {\n                // if the user has specified the path to the utils script, fetch it on window.load, else resolve\n                if (this.options.utilsScript && !window.intlTelInputUtils) {\n                    // if the plugin is being initialised after the window.load event has already been fired\n                    if (window.intlTelInputGlobals.documentReady()) {\n                        window.intlTelInputGlobals.loadUtils(this.options.utilsScript);\n                    } else {\n                        // wait until the load event so we don't block any other requests e.g. the flags image\n                        window.addEventListener(\"load\", () => {\n                            window.intlTelInputGlobals.loadUtils(this.options.utilsScript);\n                        });\n                    }\n                } else {\n                    this.resolveUtilsScriptPromise();\n                }\n                // dont bother with IP lookup if we already have a selected country\n                if (this.options.initialCountry === \"auto\" && !this.selectedCountryData.iso2) {\n                    this._loadAutoCountry();\n                } else {\n                    this.resolveAutoCountryPromise();\n                }\n            }\n            // perform the geo ip lookup\n            _loadAutoCountry() {\n                // 3 options:\n                // 1) already loaded (we're done)\n                // 2) not already started loading (start)\n                // 3) already started loading (do nothing - just wait for loading callback to fire)\n                if (window.intlTelInputGlobals.autoCountry) {\n                    this.handleAutoCountry();\n                } else if (!window.intlTelInputGlobals.startedLoadingAutoCountry) {\n                    // don't do this twice!\n                    window.intlTelInputGlobals.startedLoadingAutoCountry = true;\n                    if (typeof this.options.geoIpLookup === \"function\") {\n                        this.options.geoIpLookup((iso2 = \"\") => {\n                            const iso2Lower = iso2.toLowerCase();\n                            const isValidIso2 = iso2Lower && this._getCountryData(iso2Lower, true);\n                            if (isValidIso2) {\n                                window.intlTelInputGlobals.autoCountry = iso2Lower;\n                                // tell all instances the auto country is ready\n                                // TODO: this should just be the current instances\n                                // UPDATE: use setTimeout in case their geoIpLookup function calls this callback straight\n                                // away (e.g. if they have already done the geo ip lookup somewhere else). Using\n                                // setTimeout means that the current thread of execution will finish before executing\n                                // this, which allows the plugin to finish initialising.\n                                setTimeout(() => forEachInstance(\"handleAutoCountry\"));\n                            } else {\n                                this._setInitialState(true);\n                                forEachInstance(\"rejectAutoCountryPromise\");\n                            }\n                        }, () => forEachInstance(\"rejectAutoCountryPromise\"));\n                    }\n                }\n            }\n            // initialize the tel input listeners\n            _initTelInputListeners() {\n                const {\n                    strictMode,\n                    formatAsYouType\n                } = this.options;\n                let userOverrideFormatting = false;\n                // update flag on input event\n                this._handleInputEvent = e => {\n                    if (this._updateFlagFromNumber(this.telInput.value)) {\n                        this._triggerCountryChange();\n                    }\n                    // if user types their own formatting char (not a plus or a numeric), or they paste something, then set the override\n                    const isFormattingChar = e && e.data && /[^+0-9]/.test(e.data);\n                    const isPaste = e && e.inputType === \"insertFromPaste\" && this.telInput.value;\n                    if (isFormattingChar || isPaste && !strictMode) {\n                        userOverrideFormatting = true;\n                    }\n                    // if user removes all formatting chars, then reset the override\n                     else if (!/[^+0-9]/.test(this.telInput.value)) {\n                        userOverrideFormatting = false;\n                    }\n                    // handle FAYT, unless userOverrideFormatting\n                    if (formatAsYouType && !userOverrideFormatting) {\n                        // maintain caret position after reformatting\n                        const currentCaretPos = this.telInput.selectionStart;\n                        const valueBeforeCaret = this.telInput.value.substring(0, currentCaretPos);\n                        const relevantCharsBeforeCaret = valueBeforeCaret.replace(/[^+0-9]/g, \"\").length;\n                        const isDeleteForwards = e && e.inputType === \"deleteContentForward\";\n                        const formattedValue = this._formatNumberAsYouType();\n                        const newCaretPos = this._translateCursorPosition(relevantCharsBeforeCaret, formattedValue, currentCaretPos, isDeleteForwards);\n                        this.telInput.value = formattedValue;\n                        this.telInput.setSelectionRange(newCaretPos, newCaretPos);\n                    }\n                };\n                // this handles individual key presses as well as cut/paste events\n                // the advantage of the \"input\" event over \"keyup\" etc is that \"input\" only fires when the value changes,\n                // whereas \"keyup\" fires even for shift key, arrow key presses etc\n                this.telInput.addEventListener(\"input\", this._handleInputEvent);\n                if (strictMode) {\n                    this._handleKeydownEvent = e => {\n                        // only ignore actual character presses, rather than ctrl, alt, shift, command, arrow keys, delete/backspace, cut/copy/paste etc\n                        if (e.key.length === 1 && !e.altKey && !e.ctrlKey && !e.metaKey) {\n                            const isInitialPlus = this.telInput.selectionStart === 0 && e.key === \"+\";\n                            const isNumeric = /^[0-9]$/.test(e.key);\n                            const isAllowedChar = isInitialPlus || isNumeric;\n                            const fullNumber = this._getFullNumber();\n                            const coreNumber = intlTelInputUtils.getCoreNumber(fullNumber, this.selectedCountryData.iso2);\n                            const hasReachedMaxLength = this.maxCoreNumberLength && coreNumber.length >= this.maxCoreNumberLength;\n                            if (!isAllowedChar || hasReachedMaxLength) {\n                                e.preventDefault();\n                            }\n                        }\n                    };\n                    this.telInput.addEventListener(\"keydown\", this._handleKeydownEvent);\n                }\n            }\n            // iterate through the formattedValue until hit the right number of relevant chars\n            _translateCursorPosition(relevantChars, formattedValue, prevCaretPos, isDeleteForwards) {\n                // if the first char is a formatting char, and they backspace delete it:\n                // cursor should stay at the start (pos 0), rather than stick to the first digit (pos 1)\n                if (prevCaretPos === 0 && !isDeleteForwards) {\n                    return 0;\n                }\n                let count = 0;\n                for (let i = 0; i < formattedValue.length; i++) {\n                    if (/[+0-9]/.test(formattedValue[i])) {\n                        count++;\n                    }\n                    // normal case: stop when you hit the right number of relevant chars\n                    // (cursor will be just after the final relevant char)\n                    if (count === relevantChars && !isDeleteForwards) {\n                        return i + 1;\n                    }\n                    // spacial case: delete forwards (fn + delete on a mac):\n                    // wait until hit one extra relevant char, and put the cursor just before it (after any formatting chars)\n                    if (isDeleteForwards && count === relevantChars + 1) {\n                        return i;\n                    }\n                }\n                return formattedValue.length;\n            }\n            // adhere to the input's maxlength attr\n            _cap(number) {\n                const max = this.telInput.getAttribute(\"maxlength\");\n                return max && number.length > max ? number.substr(0, max) : number;\n            }\n            // clear the input if it just contains a dial code\n            _removeEmptyDialCode() {\n                if (this.telInput.value.charAt(0) === \"+\") {\n                    const numeric = this._getNumeric(this.telInput.value);\n                    // if just a plus, or if just a dial code\n                    if (!numeric || this.selectedCountryData.dialCode === numeric) {\n                        this.telInput.value = \"\";\n                    }\n                }\n            }\n            // extract the numeric digits from the given string\n            _getNumeric(s) {\n                return s.replace(/\\D/g, \"\");\n            }\n            // trigger a custom event on the input\n            _trigger(name) {\n                const e = new Event(name, {\n                    bubbles: true,\n                    cancelable: true\n                });\n                this.telInput.dispatchEvent(e);\n            }\n            // open the dropdown\n            _openDropdown() {\n                const {\n                    fixDropdownWidth,\n                    countrySearch\n                } = this.options;\n                if (fixDropdownWidth) {\n                    this.dropdownContent.style.width = `${this.telInput.offsetWidth}px`;\n                }\n                this.dropdownContent.classList.remove(\"iti__hide\");\n                this.selectedFlag.setAttribute(\"aria-expanded\", \"true\");\n                this._setDropdownPosition();\n                // if we have previously selected a country (and countrySearch is disabled), then highlight that item and scroll to it\n                // else highlight the first item and scroll to top (even if countrySearch is disabled e.g. on init, showing globe icon)\n                if (this.activeItem && !countrySearch) {\n                    // update highlighting and scroll to active list item\n                    this._highlightListItem(this.activeItem, false);\n                    this._scrollTo(this.activeItem, true);\n                } else {\n                    // start by highlighting the first item in the list\n                    const {\n                        firstElementChild\n                    } = this.countryList;\n                    if (firstElementChild) {\n                        this._highlightListItem(firstElementChild, false);\n                        this.countryList.scrollTop = 0;\n                    }\n                    if (countrySearch) {\n                        this.searchInput.focus();\n                    }\n                }\n                // bind all the dropdown-related listeners: mouseover, click, click-off, keydown\n                this._bindDropdownListeners();\n                // update the arrow\n                this.dropdownArrow.classList.add(\"iti__arrow--up\");\n                this._trigger(\"open:countrydropdown\");\n            }\n            // make sure the el has the className or not, depending on the value of shouldHaveClass\n            _toggleClass(el, className, shouldHaveClass) {\n                if (shouldHaveClass && !el.classList.contains(className)) {\n                    el.classList.add(className);\n                } else if (!shouldHaveClass && el.classList.contains(className)) {\n                    el.classList.remove(className);\n                }\n            }\n            // decide if should position dropdown above or below input (depends on position within viewport, and scroll)\n            _setDropdownPosition() {\n                if (this.options.dropdownContainer) {\n                    this.options.dropdownContainer.appendChild(this.dropdown);\n                }\n                if (!this.options.useFullscreenPopup) {\n                    const pos = this.telInput.getBoundingClientRect();\n                    // windowTop from https://stackoverflow.com/a/14384091/217866\n                    const windowTop = document.documentElement.scrollTop;\n                    const inputTop = pos.top + windowTop;\n                    const dropdownHeight = this.dropdownContent.offsetHeight;\n                    // dropdownFitsBelow = (dropdownBottom < windowBottom)\n                    const dropdownFitsBelow = inputTop + this.telInput.offsetHeight + dropdownHeight < windowTop + window.innerHeight;\n                    const dropdownFitsAbove = inputTop - dropdownHeight > windowTop;\n                    // dont allow positioning above when country search enabled as the search box jumps around as you filter countries\n                    const positionDropdownAboveInput = !this.options.countrySearch && !dropdownFitsBelow && dropdownFitsAbove;\n                    // by default, the dropdown will be below the input. If we want to position it above the\n                    // input, we add the dropup class.\n                    this._toggleClass(this.dropdownContent, \"iti__dropdown-content--dropup\", positionDropdownAboveInput);\n                    // if dropdownContainer is enabled, calculate postion\n                    if (this.options.dropdownContainer) {\n                        // if we want to position the dropdown below the input, we need to add the input height to the top value\n                        const extraTop = positionDropdownAboveInput ? 0 : this.telInput.offsetHeight;\n                        // calculate placement\n                        this.dropdown.style.top = `${inputTop + extraTop}px`;\n                        this.dropdown.style.left = `${pos.left + document.body.scrollLeft}px`;\n                        // close menu on window scroll\n                        this._handleWindowScroll = () => this._closeDropdown();\n                        window.addEventListener(\"scroll\", this._handleWindowScroll);\n                    }\n                }\n            }\n            // we only bind dropdown listeners when the dropdown is open\n            _bindDropdownListeners() {\n                // when mouse over a list item, just highlight that one\n                // we add the class \"highlight\", so if they hit \"enter\" we know which one to select\n                this._handleMouseoverCountryList = e => {\n                    // handle event delegation, as we're listening for this event on the countryList\n                    const listItem = e.target.closest(\".iti__country\");\n                    if (listItem) {\n                        this._highlightListItem(listItem, false);\n                    }\n                };\n                this.countryList.addEventListener(\"mouseover\", this._handleMouseoverCountryList);\n                // listen for country selection\n                this._handleClickCountryList = e => {\n                    const listItem = e.target.closest(\".iti__country\");\n                    if (listItem) {\n                        this._selectListItem(listItem);\n                    }\n                };\n                this.countryList.addEventListener(\"click\", this._handleClickCountryList);\n                // click off to close\n                // (except when this initial opening click is bubbling up)\n                // we cannot just stopPropagation as it may be needed to close another instance\n                let isOpening = true;\n                this._handleClickOffToClose = () => {\n                    if (!isOpening) {\n                        this._closeDropdown();\n                    }\n                    isOpening = false;\n                };\n                document.documentElement.addEventListener(\"click\", this._handleClickOffToClose);\n                // listen for up/down scrolling, enter to select, or escape to close\n                // use keydown as keypress doesn't fire for non-char keys and we want to catch if they\n                // just hit down and hold it to scroll down (no keyup event).\n                // listen on the document because that's where key events are triggered if no input has focus\n                let query = \"\";\n                let queryTimer = null;\n                this._handleKeydownOnDropdown = e => {\n                    // prevent down key from scrolling the whole page,\n                    // and enter key from submitting a form etc\n                    if ([ \"ArrowUp\", \"ArrowDown\", \"Enter\", \"Escape\" ].includes(e.key)) {\n                        e.preventDefault();\n                        e.stopPropagation();\n                        // up and down to navigate\n                        if (e.key === \"ArrowUp\" || e.key === \"ArrowDown\") {\n                            this._handleUpDownKey(e.key);\n                        }\n                        // enter to select\n                         else if (e.key === \"Enter\") {\n                            this._handleEnterKey();\n                        }\n                        // esc to close\n                         else if (e.key === \"Escape\") {\n                            this._closeDropdown();\n                        }\n                    }\n                    // alpha chars to perform search\n                    // regex allows one latin alpha char or space, based on https://stackoverflow.com/a/26900132/217866)\n                    if (!this.options.countrySearch && /^[a-zA-ZÀ-ÿа-яА-Я ]$/.test(e.key)) {\n                        e.stopPropagation();\n                        // jump to countries that start with the query string\n                        if (queryTimer) {\n                            clearTimeout(queryTimer);\n                        }\n                        query += e.key.toLowerCase();\n                        this._searchForCountry(query);\n                        // if the timer hits 1 second, reset the query\n                        queryTimer = setTimeout(() => {\n                            query = \"\";\n                        }, 1e3);\n                    }\n                };\n                document.addEventListener(\"keydown\", this._handleKeydownOnDropdown);\n                if (this.options.countrySearch) {\n                    const doFilter = () => {\n                        const inputQuery = this.searchInput.value.trim();\n                        if (inputQuery) {\n                            this._filterCountries(inputQuery);\n                        } else {\n                            this._filterCountries(\"\", true);\n                        }\n                    };\n                    let keyupTimer = null;\n                    this._handleSearchChange = () => {\n                        // filtering country nodes is expensive (lots of DOM manipulation), so rate limit it\n                        if (keyupTimer) {\n                            clearTimeout(keyupTimer);\n                        }\n                        keyupTimer = setTimeout(() => {\n                            doFilter();\n                            keyupTimer = null;\n                        }, 100);\n                    };\n                    this.searchInput.addEventListener(\"input\", this._handleSearchChange);\n                    // stop propagation on search input click, so doesn't trigger click-off-to-close listener\n                    this.searchInput.addEventListener(\"click\", e => e.stopPropagation());\n                }\n            }\n            // turns \"Réunion\" into \"Reunion\"\n            // from https://stackoverflow.com/a/37511463\n            _normaliseString(s = \"\") {\n                return s.normalize(\"NFD\").replace(/[\\u0300-\\u036f]/g, \"\").toLowerCase();\n            }\n            _filterCountries(query, isReset = false) {\n                let isFirst = true;\n                this.countryList.innerHTML = \"\";\n                const normalisedQuery = this._normaliseString(query);\n                for (let i = 0; i < this.countries.length; i++) {\n                    const c = this.countries[i];\n                    const normalisedCountryName = this._normaliseString(c.name);\n                    const fullDialCode = `+${c.dialCode}`;\n                    if (isReset || normalisedCountryName.includes(normalisedQuery) || fullDialCode.includes(normalisedQuery) || c.iso2.includes(normalisedQuery)) {\n                        this.countryList.appendChild(c.nodeById[this.id]);\n                        // highlight the first item\n                        if (isFirst) {\n                            this._highlightListItem(c.nodeById[this.id], false);\n                            isFirst = false;\n                        }\n                    }\n                }\n                // scroll to top (useful if user had previously scrolled down)\n                this.countryList.scrollTop = 0;\n                this._updateSearchResultsText();\n            }\n            // update search results text (for a11y)\n            _updateSearchResultsText() {\n                const {\n                    i18n\n                } = this.options;\n                const count = this.countryList.childElementCount;\n                let searchText;\n                if (count === 0) {\n                    searchText = i18n.zeroSearchResults || \"No results found\";\n                } else if (count === 1) {\n                    searchText = i18n.oneSearchResult || \"1 result found\";\n                } else {\n                    // eslint-disable-next-line no-template-curly-in-string\n                    searchText = i18n.multipleSearchResults ? i18n.multipleSearchResults.replace(\"${count}\", count) : `${count} results found`;\n                }\n                this.searchResultsA11yText.textContent = searchText;\n            }\n            // highlight the next/prev item in the list (and ensure it is visible)\n            _handleUpDownKey(key) {\n                let next = key === \"ArrowUp\" ? this.highlightedItem.previousElementSibling : this.highlightedItem.nextElementSibling;\n                if (next) {\n                    // skip the divider\n                    if (next.classList.contains(\"iti__divider\")) {\n                        next = key === \"ArrowUp\" ? next.previousElementSibling : next.nextElementSibling;\n                    }\n                } else if (this.countryList.childElementCount > 1) {\n                    // otherwise, we must be at the end, so loop round again\n                    next = key === \"ArrowUp\" ? this.countryList.lastElementChild : this.countryList.firstElementChild;\n                }\n                if (next) {\n                    // make sure the next item is visible\n                    // (before calling focus(), which can cause the next item to scroll to the middle of the dropdown, which is jarring)\n                    this._scrollTo(next, false);\n                    // if country search enabled, dont lose focus from the search input on up/down\n                    const doFocus = !this.options.countrySearch;\n                    this._highlightListItem(next, doFocus);\n                }\n            }\n            // select the currently highlighted item\n            _handleEnterKey() {\n                if (this.highlightedItem) {\n                    this._selectListItem(this.highlightedItem);\n                }\n            }\n            // find the first list item whose name starts with the query string\n            _searchForCountry(query) {\n                for (let i = 0; i < this.countries.length; i++) {\n                    if (this._startsWith(this.countries[i].name, query)) {\n                        const listItem = this.countries[i].nodeById[this.id];\n                        // update highlighting and scroll\n                        this._highlightListItem(listItem, false);\n                        this._scrollTo(listItem, true);\n                        break;\n                    }\n                }\n            }\n            // check if string a starts with string b\n            _startsWith(a, b) {\n                return a.substr(0, b.length).toLowerCase() === b;\n            }\n            // update the input's value to the given val (format first if possible)\n            // NOTE: this is called from _setInitialState, handleUtils and setNumber\n            _updateValFromNumber(fullNumber) {\n                let number = fullNumber;\n                if (this.options.formatOnDisplay && window.intlTelInputUtils && this.selectedCountryData) {\n                    const useNational = this.options.nationalMode || number.charAt(0) !== \"+\" && !this.options.showSelectedDialCode;\n                    const {\n                        NATIONAL,\n                        INTERNATIONAL\n                    } = intlTelInputUtils.numberFormat;\n                    const format = useNational ? NATIONAL : INTERNATIONAL;\n                    number = intlTelInputUtils.formatNumber(number, this.selectedCountryData.iso2, format);\n                }\n                number = this._beforeSetNumber(number);\n                this.telInput.value = number;\n            }\n            // check if need to select a new flag based on the given number\n            // Note: called from _setInitialState, keyup handler, setNumber\n            _updateFlagFromNumber(fullNumber) {\n                const plusIndex = fullNumber.indexOf(\"+\");\n                // if it contains a plus, discard any chars before it e.g. accidental space char.\n                // this keeps the selected country auto-updating correctly, which we want as\n                // libphonenumber's validation/getNumber methods will ignore these chars anyway\n                let number = plusIndex ? fullNumber.substring(plusIndex) : fullNumber;\n                // if we already have US/Canada selected, make sure the number starts\n                // with a +1 so _getDialCode will be able to extract the area code\n                // update: if we dont yet have selectedCountryData, but we're here (trying to update the flag\n                // from the number), that means we're initialising the plugin with a number that already has a\n                // dial code, so fine to ignore this bit\n                const selectedDialCode = this.selectedCountryData.dialCode;\n                const isNanp = selectedDialCode === \"1\";\n                if (number && isNanp && number.charAt(0) !== \"+\") {\n                    if (number.charAt(0) !== \"1\") {\n                        number = `1${number}`;\n                    }\n                    number = `+${number}`;\n                }\n                // if showSelectedDialCode enabled, then consider the selected dial code to be part of the number\n                if (this.options.showSelectedDialCode && selectedDialCode && number.charAt(0) !== \"+\") {\n                    number = `+${selectedDialCode}${number}`;\n                }\n                // try and extract valid dial code from input\n                const dialCode = this._getDialCode(number, true);\n                const numeric = this._getNumeric(number);\n                let iso2 = null;\n                if (dialCode) {\n                    const iso2Codes = this.dialCodeToIso2Map[this._getNumeric(dialCode)];\n                    // check if the right country is already selected. this should be false if the number is\n                    // longer than the matched dial code because in this case we need to make sure that if\n                    // there are multiple country matches, that the first one is selected (note: we could\n                    // just check that here, but it requires the same loop that we already have later)\n                    const alreadySelected = iso2Codes.indexOf(this.selectedCountryData.iso2) !== -1 && numeric.length <= dialCode.length - 1;\n                    const isRegionlessNanpNumber = selectedDialCode === \"1\" && this._isRegionlessNanp(numeric);\n                    // only update the flag if:\n                    // A) NOT (we currently have a NANP flag selected, and the number is a regionlessNanp)\n                    // AND\n                    // B) the right country is not already selected\n                    if (!isRegionlessNanpNumber && !alreadySelected) {\n                        // if using onlyCountries option, iso2Codes[0] may be empty, so we must find the first\n                        // non-empty index\n                        for (let j = 0; j < iso2Codes.length; j++) {\n                            if (iso2Codes[j]) {\n                                iso2 = iso2Codes[j];\n                                break;\n                            }\n                        }\n                    }\n                } else if (number.charAt(0) === \"+\" && numeric.length) {\n                    // invalid dial code, so empty\n                    // Note: use getNumeric here because the number has not been formatted yet, so could contain\n                    // bad chars\n                    iso2 = \"\";\n                } else if ((!number || number === \"+\") && !this.selectedCountryData.iso2) {\n                    // if no selected flag, and user either clears the input, or just types a plus, then show default\n                    iso2 = this.defaultCountry;\n                }\n                if (iso2 !== null) {\n                    return this._setCountry(iso2);\n                }\n                return false;\n            }\n            // check if the given number is a regionless NANP number (expects the number to contain an\n            // international dial code)\n            _isRegionlessNanp(number) {\n                const numeric = this._getNumeric(number);\n                if (numeric.charAt(0) === \"1\") {\n                    const areaCode = numeric.substr(1, 3);\n                    return regionlessNanpNumbers.indexOf(areaCode) !== -1;\n                }\n                return false;\n            }\n            // remove highlighting from other list items and highlight the given item\n            _highlightListItem(listItem, shouldFocus) {\n                const prevItem = this.highlightedItem;\n                if (prevItem) {\n                    prevItem.classList.remove(\"iti__highlight\");\n                    prevItem.setAttribute(\"aria-selected\", \"false\");\n                }\n                this.highlightedItem = listItem;\n                this.highlightedItem.classList.add(\"iti__highlight\");\n                this.highlightedItem.setAttribute(\"aria-selected\", \"true\");\n                this.selectedFlag.setAttribute(\"aria-activedescendant\", listItem.getAttribute(\"id\"));\n                if (this.options.countrySearch) {\n                    this.searchInput.setAttribute(\"aria-activedescendant\", listItem.getAttribute(\"id\"));\n                }\n                if (shouldFocus) {\n                    this.highlightedItem.focus();\n                }\n            }\n            // find the country data for the given iso2 code\n            // the ignoreOnlyCountriesOption is only used during init() while parsing the onlyCountries array\n            _getCountryData(iso2, allowFail) {\n                for (let i = 0; i < this.countries.length; i++) {\n                    if (this.countries[i].iso2 === iso2) {\n                        return this.countries[i];\n                    }\n                }\n                if (allowFail) {\n                    return null;\n                }\n                throw new Error(`No country data for '${iso2}'`);\n            }\n            // update the selected flag, dial code (if showSelectedDialCode), placeholder, title, and active list item\n            // Note: called from _setInitialState, _updateFlagFromNumber, _selectListItem, setCountry\n            _setCountry(iso2) {\n                const {\n                    allowDropdown,\n                    showSelectedDialCode,\n                    showFlags,\n                    countrySearch,\n                    i18n\n                } = this.options;\n                const prevCountry = this.selectedCountryData.iso2 ? this.selectedCountryData : {};\n                // do this first as it will throw an error and stop if iso2 is invalid\n                this.selectedCountryData = iso2 ? this._getCountryData(iso2, false) : {};\n                // update the defaultCountry - we only need the iso2 from now on, so just store that\n                if (this.selectedCountryData.iso2) {\n                    this.defaultCountry = this.selectedCountryData.iso2;\n                }\n                // update the flag class and the a11y text\n                if (this.selectedFlagInner) {\n                    let flagClass = \"\";\n                    let a11yText = \"\";\n                    if (iso2) {\n                        if (showFlags) {\n                            flagClass = `iti__flag iti__${iso2}`;\n                            a11yText = `${this.selectedCountryData.name} +${this.selectedCountryData.dialCode}`;\n                        }\n                        // if showFlags disabled and showSelectedDialCode is enabled, we dont show a flag or have any a11y text, as the displayed dial code is enough\n                    } else {\n                        flagClass = \"iti__flag iti__globe\";\n                        a11yText = i18n.noCountrySelected || \"No country selected\";\n                    }\n                    this.selectedFlagInner.className = flagClass;\n                    this.selectedFlagA11yText.textContent = a11yText;\n                }\n                this._setSelectedCountryFlagTitleAttribute(iso2, showSelectedDialCode);\n                // update the selected dial code\n                if (showSelectedDialCode) {\n                    const dialCode = this.selectedCountryData.dialCode ? `+${this.selectedCountryData.dialCode}` : \"\";\n                    this.selectedDialCode.innerHTML = dialCode;\n                    // offsetWidth is zero if input is in a hidden container during initialisation\n                    const selectedFlagWidth = this.selectedFlag.offsetWidth || this._getHiddenSelectedFlagWidth();\n                    // add 6px of padding after the grey selected-dial-code box, as this is what we use in the css\n                    if (this.isRTL) {\n                        this.telInput.style.paddingRight = `${selectedFlagWidth + 6}px`;\n                    } else {\n                        this.telInput.style.paddingLeft = `${selectedFlagWidth + 6}px`;\n                    }\n                }\n                // and the input's placeholder\n                this._updatePlaceholder();\n                // update the maximum valid number length\n                this._updateMaxLength();\n                // update the active list item (only if country search disabled, as country search doesn't store the active item)\n                if (allowDropdown && !countrySearch) {\n                    const prevItem = this.activeItem;\n                    if (prevItem) {\n                        prevItem.classList.remove(\"iti__active\");\n                        prevItem.setAttribute(\"aria-selected\", \"false\");\n                    }\n                    if (iso2) {\n                        // check if there is a preferred item first, else fall back to standard\n                        const nextItem = this.countryList.querySelector(`#iti-${this.id}__item-${iso2}-preferred`) || this.countryList.querySelector(`#iti-${this.id}__item-${iso2}`);\n                        nextItem.setAttribute(\"aria-selected\", \"true\");\n                        nextItem.classList.add(\"iti__active\");\n                        this.activeItem = nextItem;\n                    }\n                }\n                // return if the flag has changed or not\n                return prevCountry.iso2 !== iso2;\n            }\n            // update the maximum valid number length for the currently selected country\n            _updateMaxLength() {\n                if (this.options.strictMode && window.intlTelInputUtils) {\n                    if (this.selectedCountryData.iso2) {\n                        const numberType = intlTelInputUtils.numberType[this.options.placeholderNumberType];\n                        let exampleNumber = intlTelInputUtils.getExampleNumber(this.selectedCountryData.iso2, null, numberType, true);\n                        // see if adding more digits is still valid to get the true maximum valid length\n                        let validNumber = exampleNumber;\n                        while (intlTelInputUtils.isPossibleNumber(exampleNumber, this.selectedCountryData.iso2)) {\n                            validNumber = exampleNumber;\n                            exampleNumber += \"0\";\n                        }\n                        const coreNumber = intlTelInputUtils.getCoreNumber(validNumber, this.selectedCountryData.iso2);\n                        this.maxCoreNumberLength = coreNumber.length;\n                    } else {\n                        this.maxCoreNumberLength = null;\n                    }\n                }\n            }\n            _setSelectedCountryFlagTitleAttribute(iso2, showSelectedDialCode) {\n                if (!this.selectedFlag) {\n                    return;\n                }\n                let title;\n                if (iso2 && !showSelectedDialCode) {\n                    title = `${this.selectedCountryData.name}: +${this.selectedCountryData.dialCode}`;\n                } else if (iso2) {\n                    // For screen reader output, we don't want to include the dial code in the reader output twice\n                    // so just use the selected country name here:\n                    title = this.selectedCountryData.name;\n                } else {\n                    title = \"Unknown\";\n                }\n                this.selectedFlag.setAttribute(\"title\", title);\n            }\n            // when the input is in a hidden container during initialisation, we must inject some markup\n            // into the end of the DOM to calculate the correct offsetWidth\n            // NOTE: this is only used when showSelectedDialCode is enabled, so flagsContainer and selectedFlag\n            // will definitely exist\n            _getHiddenSelectedFlagWidth() {\n                // to get the right styling to apply, all we need is a shallow clone of the container,\n                // and then to inject a deep clone of the selectedFlag element\n                const containerClone = this.telInput.parentNode.cloneNode();\n                containerClone.style.visibility = \"hidden\";\n                document.body.appendChild(containerClone);\n                const flagsContainerClone = this.flagsContainer.cloneNode();\n                containerClone.appendChild(flagsContainerClone);\n                const selectedFlagClone = this.selectedFlag.cloneNode(true);\n                flagsContainerClone.appendChild(selectedFlagClone);\n                const width = selectedFlagClone.offsetWidth;\n                containerClone.parentNode.removeChild(containerClone);\n                return width;\n            }\n            // update the input placeholder to an example number from the currently selected country\n            _updatePlaceholder() {\n                const {\n                    autoPlaceholder,\n                    placeholderNumberType,\n                    nationalMode,\n                    customPlaceholder\n                } = this.options;\n                const shouldSetPlaceholder = autoPlaceholder === \"aggressive\" || !this.hadInitialPlaceholder && autoPlaceholder === \"polite\";\n                if (window.intlTelInputUtils && shouldSetPlaceholder) {\n                    const numberType = intlTelInputUtils.numberType[placeholderNumberType];\n                    // note: must set placeholder to empty string if no country selected (globe icon showing)\n                    let placeholder = this.selectedCountryData.iso2 ? intlTelInputUtils.getExampleNumber(this.selectedCountryData.iso2, nationalMode, numberType) : \"\";\n                    placeholder = this._beforeSetNumber(placeholder);\n                    if (typeof customPlaceholder === \"function\") {\n                        placeholder = customPlaceholder(placeholder, this.selectedCountryData);\n                    }\n                    this.telInput.setAttribute(\"placeholder\", placeholder);\n                }\n            }\n            // called when the user selects a list item from the dropdown\n            _selectListItem(listItem) {\n                // update selected flag and active list item\n                const flagChanged = this._setCountry(listItem.getAttribute(\"data-country-code\"));\n                this._closeDropdown();\n                this._updateDialCode(listItem.getAttribute(\"data-dial-code\"));\n                // focus the input\n                this.telInput.focus();\n                if (flagChanged) {\n                    this._triggerCountryChange();\n                }\n            }\n            // close the dropdown and unbind any listeners\n            _closeDropdown() {\n                this.dropdownContent.classList.add(\"iti__hide\");\n                this.selectedFlag.setAttribute(\"aria-expanded\", \"false\");\n                this.selectedFlag.removeAttribute(\"aria-activedescendant\");\n                if (this.highlightedItem) {\n                    this.highlightedItem.setAttribute(\"aria-selected\", \"false\");\n                }\n                if (this.options.countrySearch) {\n                    this.searchInput.removeAttribute(\"aria-activedescendant\");\n                }\n                // update the arrow\n                this.dropdownArrow.classList.remove(\"iti__arrow--up\");\n                // unbind key events\n                document.removeEventListener(\"keydown\", this._handleKeydownOnDropdown);\n                if (this.options.countrySearch) {\n                    this.searchInput.removeEventListener(\"input\", this._handleSearchChange);\n                }\n                document.documentElement.removeEventListener(\"click\", this._handleClickOffToClose);\n                this.countryList.removeEventListener(\"mouseover\", this._handleMouseoverCountryList);\n                this.countryList.removeEventListener(\"click\", this._handleClickCountryList);\n                // remove menu from container\n                if (this.options.dropdownContainer) {\n                    if (!this.options.useFullscreenPopup) {\n                        window.removeEventListener(\"scroll\", this._handleWindowScroll);\n                    }\n                    if (this.dropdown.parentNode) {\n                        this.dropdown.parentNode.removeChild(this.dropdown);\n                    }\n                }\n                this._trigger(\"close:countrydropdown\");\n            }\n            // check if an element is visible within it's container, else scroll until it is\n            _scrollTo(element, middle) {\n                const container = this.countryList;\n                // windowTop from https://stackoverflow.com/a/14384091/217866\n                const windowTop = document.documentElement.scrollTop;\n                const containerHeight = container.offsetHeight;\n                const containerTop = container.getBoundingClientRect().top + windowTop;\n                const containerBottom = containerTop + containerHeight;\n                const elementHeight = element.offsetHeight;\n                const elementTop = element.getBoundingClientRect().top + windowTop;\n                const elementBottom = elementTop + elementHeight;\n                let newScrollTop = elementTop - containerTop + container.scrollTop;\n                const middleOffset = containerHeight / 2 - elementHeight / 2;\n                if (elementTop < containerTop) {\n                    // scroll up\n                    if (middle) {\n                        newScrollTop -= middleOffset;\n                    }\n                    container.scrollTop = newScrollTop;\n                } else if (elementBottom > containerBottom) {\n                    // scroll down\n                    if (middle) {\n                        newScrollTop += middleOffset;\n                    }\n                    const heightDifference = containerHeight - elementHeight;\n                    container.scrollTop = newScrollTop - heightDifference;\n                }\n            }\n            // replace any existing dial code with the new one\n            // Note: called from _selectListItem and setCountry\n            _updateDialCode(newDialCodeBare) {\n                const inputVal = this.telInput.value;\n                // save having to pass this every time\n                const newDialCode = `+${newDialCodeBare}`;\n                let newNumber;\n                if (inputVal.charAt(0) === \"+\") {\n                    // there's a plus so we're dealing with a replacement\n                    const prevDialCode = this._getDialCode(inputVal);\n                    if (prevDialCode) {\n                        // current number contains a valid dial code, so replace it\n                        newNumber = inputVal.replace(prevDialCode, newDialCode);\n                    } else {\n                        // current number contains an invalid dial code, so ditch it\n                        // (no way to determine where the invalid dial code ends and the rest of the number begins)\n                        newNumber = newDialCode;\n                    }\n                    this.telInput.value = newNumber;\n                }\n            }\n            // try and extract a valid international dial code from a full telephone number\n            // Note: returns the raw string inc plus character and any whitespace/dots etc\n            _getDialCode(number, includeAreaCode) {\n                let dialCode = \"\";\n                // only interested in international numbers (starting with a plus)\n                if (number.charAt(0) === \"+\") {\n                    let numericChars = \"\";\n                    // iterate over chars\n                    for (let i = 0; i < number.length; i++) {\n                        const c = number.charAt(i);\n                        // if char is number (https://stackoverflow.com/a/8935649/217866)\n                        if (!isNaN(parseInt(c, 10))) {\n                            numericChars += c;\n                            // if current numericChars make a valid dial code\n                            if (includeAreaCode) {\n                                if (this.dialCodeToIso2Map[numericChars]) {\n                                    // store the actual raw string (useful for matching later)\n                                    dialCode = number.substr(0, i + 1);\n                                }\n                            } else {\n                                if (this.dialCodes[numericChars]) {\n                                    dialCode = number.substr(0, i + 1);\n                                    // if we're just looking for a dial code, we can break as soon as we find one\n                                    break;\n                                }\n                            }\n                            // stop searching as soon as we can - in this case when we hit max len\n                            if (numericChars.length === this.dialCodeMaxLen) {\n                                break;\n                            }\n                        }\n                    }\n                }\n                return dialCode;\n            }\n            // get the input val, adding the dial code if showSelectedDialCode is enabled\n            _getFullNumber() {\n                const val = this.telInput.value.trim();\n                const {\n                    dialCode\n                } = this.selectedCountryData;\n                let prefix;\n                const numericVal = this._getNumeric(val);\n                if (this.options.showSelectedDialCode && !this.options.nationalMode && val.charAt(0) !== \"+\" && dialCode && numericVal) {\n                    // when using showSelectedDialCode, it is visible so is effectively part of the typed number\n                    prefix = `+${dialCode}`;\n                } else {\n                    prefix = \"\";\n                }\n                return prefix + val;\n            }\n            // remove the dial code if showSelectedDialCode is enabled\n            // also cap the length if the input has a maxlength attribute\n            _beforeSetNumber(fullNumber) {\n                let number = fullNumber;\n                if (this.options.showSelectedDialCode) {\n                    let dialCode = this._getDialCode(number);\n                    // if there is a valid dial code\n                    if (dialCode) {\n                        // in case _getDialCode returned an area code as well\n                        dialCode = `+${this.selectedCountryData.dialCode}`;\n                        // a lot of numbers will have a space separating the dial code and the main number, and\n                        // some NANP numbers will have a hyphen e.g. +1 684-733-1234 - in both cases we want to get\n                        // rid of it\n                        // NOTE: don't just trim all non-numerics as may want to preserve an open parenthesis etc\n                        const start = number[dialCode.length] === \" \" || number[dialCode.length] === \"-\" ? dialCode.length + 1 : dialCode.length;\n                        number = number.substr(start);\n                    }\n                }\n                return this._cap(number);\n            }\n            // trigger the 'countrychange' event\n            _triggerCountryChange() {\n                this._trigger(\"countrychange\");\n            }\n            // format the number as the user types\n            _formatNumberAsYouType() {\n                const val = this._getFullNumber();\n                const result = window.intlTelInputUtils ? intlTelInputUtils.formatNumberAsYouType(val, this.selectedCountryData.iso2) : val;\n                // if showSelectedDialCode and they haven't (re)typed the dial code in the input as well, then remove the dial code\n                const {\n                    dialCode\n                } = this.selectedCountryData;\n                if (this.options.showSelectedDialCode && !this.options.nationalMode && this.telInput.value.charAt(0) !== \"+\" && result.includes(`+${dialCode}`)) {\n                    const afterDialCode = result.split(`+${dialCode}`)[1] || \"\";\n                    return afterDialCode.trim();\n                }\n                return result;\n            }\n            /**************************\n   *  SECRET PUBLIC METHODS\n   **************************/\n            // this is called when the geoip call returns\n            handleAutoCountry() {\n                if (this.options.initialCountry === \"auto\") {\n                    // we must set this even if there is an initial val in the input: in case the initial val is\n                    // invalid and they delete it - they should see their auto country\n                    this.defaultCountry = window.intlTelInputGlobals.autoCountry;\n                    // if there's no initial value in the input, then update the flag\n                    if (!this.telInput.value) {\n                        this.setCountry(this.defaultCountry);\n                    }\n                    this.resolveAutoCountryPromise();\n                }\n            }\n            // this is called when the utils request completes\n            handleUtils() {\n                // if the request was successful\n                if (window.intlTelInputUtils) {\n                    // if there's an initial value in the input, then format it\n                    if (this.telInput.value) {\n                        this._updateValFromNumber(this.telInput.value);\n                    }\n                    if (this.selectedCountryData.iso2) {\n                        this._updatePlaceholder();\n                        this._updateMaxLength();\n                    }\n                }\n                this.resolveUtilsScriptPromise();\n            }\n            /********************\n   *  PUBLIC METHODS\n   ********************/\n            // remove plugin\n            destroy() {\n                if (this.options.allowDropdown) {\n                    // make sure the dropdown is closed (and unbind listeners)\n                    this._closeDropdown();\n                    this.selectedFlag.removeEventListener(\"click\", this._handleClickSelectedFlag);\n                    this.flagsContainer.removeEventListener(\"keydown\", this._handleFlagsContainerKeydown);\n                    // label click hack\n                    const label = this.telInput.closest(\"label\");\n                    if (label) {\n                        label.removeEventListener(\"click\", this._handleLabelClick);\n                    }\n                }\n                // unbind hiddenInput listeners\n                const {\n                    form\n                } = this.telInput;\n                if (this._handleHiddenInputSubmit && form) {\n                    form.removeEventListener(\"submit\", this._handleHiddenInputSubmit);\n                }\n                // unbind key events, and cut/paste events\n                this.telInput.removeEventListener(\"input\", this._handleInputEvent);\n                if (this._handleKeydownEvent) {\n                    this.telInput.removeEventListener(\"keydown\", this._handleKeydownEvent);\n                }\n                // remove attribute of id instance: data-intl-tel-input-id\n                this.telInput.removeAttribute(\"data-intl-tel-input-id\");\n                // remove markup (but leave the original input)\n                const wrapper = this.telInput.parentNode;\n                wrapper.parentNode.insertBefore(this.telInput, wrapper);\n                wrapper.parentNode.removeChild(wrapper);\n                delete window.intlTelInputGlobals.instances[this.id];\n            }\n            // get the extension from the current number\n            getExtension() {\n                if (window.intlTelInputUtils) {\n                    return intlTelInputUtils.getExtension(this._getFullNumber(), this.selectedCountryData.iso2);\n                }\n                return \"\";\n            }\n            // format the number to the given format\n            getNumber(format) {\n                if (window.intlTelInputUtils) {\n                    const {\n                        iso2\n                    } = this.selectedCountryData;\n                    return intlTelInputUtils.formatNumber(this._getFullNumber(), iso2, format);\n                }\n                return \"\";\n            }\n            // get the type of the entered number e.g. landline/mobile\n            getNumberType() {\n                if (window.intlTelInputUtils) {\n                    return intlTelInputUtils.getNumberType(this._getFullNumber(), this.selectedCountryData.iso2);\n                }\n                return -99;\n            }\n            // get the country data for the currently selected flag\n            getSelectedCountryData() {\n                return this.selectedCountryData;\n            }\n            // get the validation error\n            getValidationError() {\n                if (window.intlTelInputUtils) {\n                    const {\n                        iso2\n                    } = this.selectedCountryData;\n                    return intlTelInputUtils.getValidationError(this._getFullNumber(), iso2);\n                }\n                return -99;\n            }\n            // validate the input val - assumes the global function isPossibleNumber (from utilsScript)\n            isValidNumber(mobileOnly = true) {\n                const val = this._getFullNumber();\n                // return false for any alpha chars\n                if (/\\p{L}/u.test(val)) {\n                    return false;\n                }\n                return window.intlTelInputUtils ? intlTelInputUtils.isPossibleNumber(val, this.selectedCountryData.iso2, mobileOnly) : null;\n            }\n            // validate the input val (precise) - assumes the global function isValidNumber (from utilsScript)\n            isValidNumberPrecise() {\n                const val = this._getFullNumber();\n                // return false for any alpha chars\n                if (/\\p{L}/u.test(val)) {\n                    return false;\n                }\n                return window.intlTelInputUtils ? intlTelInputUtils.isValidNumber(val, this.selectedCountryData.iso2) : null;\n            }\n            // update the selected flag, and update the input val accordingly\n            setCountry(iso2) {\n                const iso2Lower = iso2.toLowerCase();\n                // check if already selected\n                if (this.selectedCountryData.iso2 !== iso2Lower) {\n                    this._setCountry(iso2Lower);\n                    this._updateDialCode(this.selectedCountryData.dialCode);\n                    this._triggerCountryChange();\n                }\n            }\n            // set the input value and update the flag\n            setNumber(number) {\n                // we must update the flag first, which updates this.selectedCountryData, which is used for\n                // formatting the number before displaying it\n                const flagChanged = this._updateFlagFromNumber(number);\n                this._updateValFromNumber(number);\n                if (flagChanged) {\n                    this._triggerCountryChange();\n                }\n            }\n            // set the placeholder number typ\n            setPlaceholderNumberType(type) {\n                this.options.placeholderNumberType = type;\n                this._updatePlaceholder();\n            }\n        }\n        /********************\n *  STATIC METHODS\n ********************/\n        // get the country data object\n        intlTelInputGlobals.getCountryData = () => allCountries;\n        // inject a <script> element to load utils.js\n        const injectScript = (path, handleSuccess, handleFailure) => {\n            // inject a new script element into the page\n            const script = document.createElement(\"script\");\n            script.onload = () => {\n                forEachInstance(\"handleUtils\");\n                if (handleSuccess) {\n                    handleSuccess();\n                }\n            };\n            script.onerror = () => {\n                forEachInstance(\"rejectUtilsScriptPromise\");\n                if (handleFailure) {\n                    handleFailure();\n                }\n            };\n            script.className = \"iti-load-utils\";\n            script.async = true;\n            script.src = path;\n            document.body.appendChild(script);\n        };\n        // load the utils script\n        intlTelInputGlobals.loadUtils = path => {\n            // 2 options:\n            // 1) not already started loading (start)\n            // 2) already started loading (do nothing - just wait for the onload callback to fire, which will\n            // trigger handleUtils on all instances, invoking their resolveUtilsScriptPromise functions)\n            if (!window.intlTelInputUtils && !window.intlTelInputGlobals.startedLoadingUtilsScript) {\n                // only do this once\n                window.intlTelInputGlobals.startedLoadingUtilsScript = true;\n                return new Promise((resolve, reject) => injectScript(path, resolve, reject));\n            }\n            return null;\n        };\n        // default options\n        intlTelInputGlobals.defaults = defaults;\n        // version\n        intlTelInputGlobals.version = \"20.3.0\";\n        // convenience wrapper\n        return function(input, options) {\n            var iti = new Iti(input, options);\n            iti._init();\n            input.setAttribute(\"data-intl-tel-input-id\", iti.id);\n            window.intlTelInputGlobals.instances[iti.id] = iti;\n            return iti;\n        };\n    }();\n});"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}